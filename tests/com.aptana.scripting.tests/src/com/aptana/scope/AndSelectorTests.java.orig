package com.aptana.scope;

import junit.framework.TestCase;

<<<<<<< HEAD
public class AndSelectorTests extends TestCase
{
	/**
	 * testNamesArePrefixes
	 */
=======

public class AndSelectorTests extends TestCase
{
>>>>>>> development
	public void testNamesArePrefixes()
	{
		ScopeSelector selector = new ScopeSelector("source string.quoted");

		assertTrue(selector.matches("source.ruby string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testPrefixThenExact
	 */
=======
	
>>>>>>> development
	public void testPrefixThenExact()
	{
		ScopeSelector selector = new ScopeSelector("source string.quoted.double.ruby");

		assertTrue(selector.matches("source.ruby string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testExactThenPrefix
	 */
=======
	
>>>>>>> development
	public void testExactThenPrefix()
	{
		ScopeSelector selector = new ScopeSelector("source.ruby string.quoted");

		assertTrue(selector.matches("source.ruby string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testNamesAreExact
	 */
=======
	
>>>>>>> development
	public void testNamesAreExact()
	{
		ScopeSelector selector = new ScopeSelector("source.ruby string.quoted.double.ruby");

		assertTrue(selector.matches("source.ruby string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testFirstNonMatching
	 */
=======
	
>>>>>>> development
	public void testFirstNonMatching()
	{
		ScopeSelector selector = new ScopeSelector("source.ruby string.quoted.double.ruby");

		assertFalse(selector.matches("source.php string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testSecondNonMatching
	 */
=======
	
>>>>>>> development
	public void testSecondNonMatching()
	{
		ScopeSelector selector = new ScopeSelector("source.ruby string.quoted.double.ruby");

		assertFalse(selector.matches("source.ruby string.quoted.double.php"));
	}
<<<<<<< HEAD

	/**
	 * testEmptySelector
	 */
=======
	
>>>>>>> development
	public void testEmptySelector()
	{
		ScopeSelector selector = new ScopeSelector("");

		assertFalse(selector.matches("source.ruby string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testEmptyScope
	 */
=======
	
>>>>>>> development
	public void testEmptyScope()
	{
		ScopeSelector selector = new ScopeSelector("source.ruby string.quoted.double.ruby");

		assertFalse(selector.matches(""));
	}
<<<<<<< HEAD

	/**
	 * testNullSelector
	 */
=======
	
>>>>>>> development
	public void testNullSelector()
	{
		ScopeSelector selector = new ScopeSelector((String) null);

		assertFalse(selector.matches("source.ruby string.quoted.double.ruby"));
	}
<<<<<<< HEAD

	/**
	 * testNullScope
	 */
=======
	
>>>>>>> development
	public void testNullScope()
	{
		ScopeSelector selector = new ScopeSelector("source.ruby string.quoted.double.ruby");

		assertFalse(selector.matches((String) null));
	}
}
