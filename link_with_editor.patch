diff --git a/plugins/com.aptana.editor.common/src/com/aptana/editor/common/AbstractThemeableEditor.java b/plugins/com.aptana.editor.common/src/com/aptana/editor/common/AbstractThemeableEditor.java
index 4cfcffe..d36f1a4 100644
--- a/plugins/com.aptana.editor.common/src/com/aptana/editor/common/AbstractThemeableEditor.java
+++ b/plugins/com.aptana.editor.common/src/com/aptana/editor/common/AbstractThemeableEditor.java
@@ -68,6 +68,7 @@ import com.aptana.editor.common.theme.IThemeManager;
 import com.aptana.editor.findbar.api.FindBarDecoratorFactory;
 import com.aptana.editor.findbar.api.IFindBarDecorated;
 import com.aptana.editor.findbar.api.IFindBarDecorator;
+import com.aptana.parsing.ast.IParseNode;
 import com.aptana.parsing.lexer.IRange;
 import com.aptana.scripting.Activator;
 import com.aptana.scripting.keybindings.ICommandElementsProvider;
@@ -798,7 +799,7 @@ public abstract class AbstractThemeableEditor extends AbstractFoldingEditor
 	 */
 	protected Object getOutlineElementAt(int caret)
 	{
-		return null;
+		return getASTNodeAt(caret);
 	}
 
 	/**
@@ -809,6 +810,16 @@ public abstract class AbstractThemeableEditor extends AbstractFoldingEditor
 		return CommonEditorPlugin.getDefault().getPreferenceStore();
 	}
 
+	protected IParseNode getASTNodeAt(int offset)
+	{
+		IParseNode root = getFileService().getParseResult();
+		if (root == null)
+		{
+			return null;
+		}
+		return root.getElementAt(offset);
+	}
+
 	private boolean isLinkedWithEditor()
 	{
 		return getOutlinePreferenceStore().getBoolean(IPreferenceConstants.LINK_OUTLINE_WITH_EDITOR);
diff --git a/plugins/com.aptana.editor.html/src/com/aptana/editor/html/HTMLEditor.java b/plugins/com.aptana.editor.html/src/com/aptana/editor/html/HTMLEditor.java
index 3c6daf2..7e6cc6e 100644
--- a/plugins/com.aptana.editor.html/src/com/aptana/editor/html/HTMLEditor.java
+++ b/plugins/com.aptana.editor.html/src/com/aptana/editor/html/HTMLEditor.java
@@ -44,6 +44,7 @@ import com.aptana.editor.html.outline.HTMLOutlineLabelProvider;
 import com.aptana.editor.html.parsing.HTMLParseState;
 import com.aptana.editor.html.parsing.HTMLParser;
 import com.aptana.editor.js.Activator;
+import com.aptana.parsing.ast.IParseNode;
 
 public class HTMLEditor extends AbstractThemeableEditor
 {
@@ -93,6 +94,16 @@ public class HTMLEditor extends AbstractThemeableEditor
 	}
 
 	@Override
+	protected Object getOutlineElementAt(int caret)
+	{
+		IParseNode astNode = getASTNodeAt(caret);
+		if (astNode == null) {
+			return null;
+		}
+		return HTMLOutlineContentProvider.getOutlineItem(astNode);
+	}
+
+	@Override
 	protected IPreferenceStore getOutlinePreferenceStore()
 	{
 		return Activator.getDefault().getPreferenceStore();
diff --git a/plugins/com.aptana.editor.html/src/com/aptana/editor/html/outline/HTMLOutlineContentProvider.java b/plugins/com.aptana.editor.html/src/com/aptana/editor/html/outline/HTMLOutlineContentProvider.java
index 3d78fdb..f841126 100644
--- a/plugins/com.aptana.editor.html/src/com/aptana/editor/html/outline/HTMLOutlineContentProvider.java
+++ b/plugins/com.aptana.editor.html/src/com/aptana/editor/html/outline/HTMLOutlineContentProvider.java
@@ -11,6 +11,7 @@ import com.aptana.editor.html.parsing.ast.HTMLSpecialNode;
 import com.aptana.editor.js.outline.JSOutlineContentProvider;
 import com.aptana.editor.js.parsing.IJSParserConstants;
 import com.aptana.parsing.ast.IParseNode;
+import com.aptana.parsing.ast.ParseRootNode;
 
 public class HTMLOutlineContentProvider extends CompositeOutlineContentProvider
 {
@@ -21,6 +22,11 @@ public class HTMLOutlineContentProvider extends CompositeOutlineContentProvider
 		addSubLanguage(IJSParserConstants.LANGUAGE, new JSOutlineContentProvider());
 	}
 
+	public static HTMLOutlineItem getOutlineItem(IParseNode node)
+	{
+		return new HTMLOutlineItem(node.getNameNode().getNameRange(), node);
+	}
+
 	@Override
 	public Object[] getChildren(Object parentElement)
 	{
@@ -39,6 +45,23 @@ public class HTMLOutlineContentProvider extends CompositeOutlineContentProvider
 	}
 
 	@Override
+	public Object getParent(Object element)
+	{
+		if (element instanceof HTMLOutlineItem)
+		{
+			IParseNode node = ((HTMLOutlineItem) element).getReferenceNode();
+			IParseNode parent = node.getParent();
+			if (parent instanceof ParseRootNode)
+			{
+				// we're at the root of the nested language, which is not displayed; go one level up
+				parent = parent.getParent();
+			}
+			return new HTMLOutlineItem(parent, parent);
+		}
+		return super.getParent(element);
+	}
+
+	@Override
 	protected Object[] filter(IParseNode[] nodes)
 	{
 		List<HTMLOutlineItem> items = new ArrayList<HTMLOutlineItem>();
diff --git a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/XMLEditor.java b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/XMLEditor.java
index dc8eeb2..dd13208 100644
--- a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/XMLEditor.java
+++ b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/XMLEditor.java
@@ -41,6 +41,7 @@ import com.aptana.editor.common.outline.CommonOutlinePage;
 import com.aptana.editor.xml.outline.XMLOutlineContentProvider;
 import com.aptana.editor.xml.outline.XMLOutlineLabelProvider;
 import com.aptana.editor.xml.parsing.XMLParser;
+import com.aptana.parsing.ast.IParseNode;
 
 public class XMLEditor extends AbstractThemeableEditor {
 
@@ -65,6 +66,16 @@ public class XMLEditor extends AbstractThemeableEditor {
 	}
 
 	@Override
+	protected Object getOutlineElementAt(int caret)
+	{
+		IParseNode astNode = getASTNodeAt(caret);
+		if (astNode == null) {
+			return null;
+		}
+		return XMLOutlineContentProvider.getOutlineItem(astNode);
+	}
+
+	@Override
 	protected IPreferenceStore getOutlinePreferenceStore()
 	{
 		return XMLPlugin.getDefault().getPreferenceStore();
diff --git a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineContentProvider.java b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineContentProvider.java
index f4d8eff..c91dce2 100644
--- a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineContentProvider.java
+++ b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineContentProvider.java
@@ -1,6 +1,6 @@
 package com.aptana.editor.xml.outline;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 
 import com.aptana.editor.common.outline.CommonOutlineContentProvider;
@@ -10,18 +10,33 @@ import com.aptana.parsing.ast.IParseNode;
 public class XMLOutlineContentProvider extends CommonOutlineContentProvider
 {
 
+	public static XMLOutlineItem getOutlineItem(IParseNode node)
+	{
+		return new XMLOutlineItem(node.getNameNode().getNameRange(), node);
+	}
+
+	@Override
+	public Object[] getChildren(Object parentElement)
+	{
+		if (parentElement instanceof XMLOutlineItem)
+		{
+			// delegates to the parse node it references to
+			return getChildren(((XMLOutlineItem) parentElement).getReferenceNode());
+		}
+		return super.getChildren(parentElement);
+	}
+
 	@Override
 	protected Object[] filter(IParseNode[] nodes)
 	{
-		// only shows the element node
-		List<XMLElementNode> elements = new LinkedList<XMLElementNode>();
+		List<XMLOutlineItem> items = new ArrayList<XMLOutlineItem>();
 		for (IParseNode node : nodes)
 		{
 			if (node instanceof XMLElementNode)
 			{
-				elements.add((XMLElementNode) node);
+				items.add(new XMLOutlineItem(node.getNameNode().getNameRange(), node));
 			}
 		}
-		return elements.toArray(new XMLElementNode[elements.size()]);
+		return items.toArray(new XMLOutlineItem[items.size()]);
 	}
 }
diff --git a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineLabelProvider.java b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineLabelProvider.java
index 07758cc..664b3ef 100644
--- a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineLabelProvider.java
+++ b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/outline/XMLOutlineLabelProvider.java
@@ -18,7 +18,7 @@ public class XMLOutlineLabelProvider extends LabelProvider
 	@Override
 	public Image getImage(Object element)
 	{
-		if (element instanceof XMLElementNode)
+		if (element instanceof XMLOutlineItem)
 		{
 			return ELEMENT_ICON;
 		}
@@ -28,6 +28,10 @@ public class XMLOutlineLabelProvider extends LabelProvider
 	@Override
 	public String getText(Object element)
 	{
+		if (element instanceof XMLOutlineItem)
+		{
+			return getText(((XMLOutlineItem) element).getReferenceNode());
+		}
 		if (element instanceof XMLElementNode)
 		{
 			return ((XMLElementNode) element).getName();
diff --git a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/XMLParser.java b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/XMLParser.java
index b30a499..0138576 100644
--- a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/XMLParser.java
+++ b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/XMLParser.java
@@ -83,6 +83,8 @@ public class XMLParser implements IParser
 
 	private void processEndTag(Symbol symbol) throws IOException, Exception
 	{
+		// adjusts the ending offset of current element to include the entire block
+		((XMLElementNode) fCurrentElement).setLocation(fCurrentElement.getStartingOffset(), symbol.getEnd());
 		closeElement();
 	}
 
diff --git a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/ast/XMLElementNode.java b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/ast/XMLElementNode.java
index 6640877..f18260c 100644
--- a/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/ast/XMLElementNode.java
+++ b/plugins/com.aptana.editor.xml/src/com/aptana/editor/xml/parsing/ast/XMLElementNode.java
@@ -2,11 +2,40 @@ package com.aptana.editor.xml.parsing.ast;
 
 import java.util.StringTokenizer;
 
+import com.aptana.parsing.ast.INameNode;
 import com.aptana.parsing.ast.IParseNode;
+import com.aptana.parsing.lexer.IRange;
+import com.aptana.parsing.lexer.Range;
 
 public class XMLElementNode extends XMLNode
 {
-	private String fName;
+
+	private static final class NameNode implements INameNode
+	{
+
+		private final String fName;
+		private final IRange fRange;
+
+		public NameNode(String name, int start, int end)
+		{
+			fName = name;
+			fRange = new Range(start, end);
+		}
+
+		@Override
+		public String getName()
+		{
+			return fName;
+		}
+
+		@Override
+		public IRange getNameRange()
+		{
+			return fRange;
+		}
+	}
+
+	private INameNode fNameNode;
 	private boolean fIsSelfClosing;
 
 	public XMLElementNode(String tag, int start, int end)
@@ -17,7 +46,6 @@ public class XMLElementNode extends XMLNode
 	public XMLElementNode(String tag, XMLNode[] children, int start, int end)
 	{
 		super(XMLNodeTypes.ELEMENT.getIndex(), children, start, end);
-		fName = tag;
 		if (tag.length() > 0)
 		{
 			try
@@ -25,23 +53,30 @@ public class XMLElementNode extends XMLNode
 				if (tag.endsWith("/>")) //$NON-NLS-1$
 				{
 					// self-closing
-					fName = getTagName(tag.substring(1, tag.length() - 2));
+					tag = getTagName(tag.substring(1, tag.length() - 2));
 					fIsSelfClosing = true;
 				}
 				else
 				{
-					fName = getTagName(tag.substring(1, tag.length() - 1));
+					tag = getTagName(tag.substring(1, tag.length() - 1));
 				}
 			}
 			catch (IndexOutOfBoundsException e)
 			{
 			}
 		}
+		fNameNode = new NameNode(tag, start, end);
 	}
 
 	public String getName()
 	{
-		return fName;
+		return fNameNode.getName();
+	}
+
+	@Override
+	public INameNode getNameNode()
+	{
+		return fNameNode;
 	}
 
 	public boolean isSelfClosing()
@@ -74,16 +109,17 @@ public class XMLElementNode extends XMLNode
 	public String toString()
 	{
 		StringBuilder text = new StringBuilder();
-		if (fName.length() > 0)
+		String name = getName();
+		if (name.length() > 0)
 		{
-			text.append("<").append(fName); //$NON-NLS-1$
+			text.append("<").append(name); //$NON-NLS-1$
 			text.append(">"); //$NON-NLS-1$
 			IParseNode[] children = getChildren();
 			for (IParseNode child : children)
 			{
 				text.append(child);
 			}
-			text.append("</").append(fName).append(">"); //$NON-NLS-1$//$NON-NLS-2$
+			text.append("</").append(name).append(">"); //$NON-NLS-1$//$NON-NLS-2$
 		}
 		return text.toString();
 	}
diff --git a/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/IParseNode.java b/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/IParseNode.java
index 9592e0c..38a963e 100644
--- a/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/IParseNode.java
+++ b/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/IParseNode.java
@@ -25,4 +25,6 @@ public interface IParseNode extends IRange, ILanguageNode
 	public short getType();
 
 	public String getLanguage();
+
+	public IParseNode getElementAt(int offset);
 }
diff --git a/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/ParseBaseNode.java b/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/ParseBaseNode.java
index ca88034..8d67529 100644
--- a/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/ParseBaseNode.java
+++ b/plugins/com.aptana.parsing/src/com/aptana/parsing/ast/ParseBaseNode.java
@@ -1,10 +1,10 @@
 package com.aptana.parsing.ast;
 
-import com.aptana.parsing.lexer.IRange;
-
 import beaver.spec.ast.Node;
 import beaver.spec.ast.TreeWalker;
 
+import com.aptana.parsing.lexer.IRange;
+
 public class ParseBaseNode extends Node implements IParseNode
 {
 
@@ -81,6 +81,25 @@ public class ParseBaseNode extends Node implements IParseNode
 	}
 
 	@Override
+	public IParseNode getElementAt(int offset)
+	{
+		if (offset < getStartingOffset() || offset > getEndingOffset())
+		{
+			// not in this node
+			return null;
+		}
+		IParseNode[] children = getChildren();
+		for (IParseNode child : children)
+		{
+			if (child.getStartingOffset() <= offset && offset <= child.getEndingOffset())
+			{
+				return child.getElementAt(offset);
+			}
+		}
+		return this;
+	}
+
+	@Override
 	public int getEndingOffset()
 	{
 		return getEnd();
