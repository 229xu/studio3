package com.aptana.editor.js.sdoc.parsing;

import java.util.ArrayList;
import java.util.List;
import com.aptana.editor.js.sdoc.model.*;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "SDoc.grammar".
 */
@SuppressWarnings("unchecked")
public class SDocParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbcji55KKn$yp#sXfbxQMMiGMUPIMxRfTjgq8AYBr0HJauGD5jFXMG0Nn3GeMZ1gCCT7" +
		"4nCH4lXZzfD54JJIn28g8HG4fWbWG544KYwX8LVJultVFJYVhfcxyHi8cl$EUCxTdxfqfu5" +
		"QY7qv22OfHX3BqHIbEHZaA4K01N6b31ORZKboD6x0Gzw4F#cC0gb2DAt4LhiC2F8Wb26Nl8" +
		"O9XrAVar2ENchoSgfPbMSs9oF4LAKSGez6CXFoDXv50A#OY7tDmFaQXdhwHO#GOBg1TZbEj" +
		"Nuv1Y62yjITXCA#RXZ3p4SGmdt88XhAcHZkSXt5sdoTmkgr9TRXUUnigRSrON$r4Ao#cDz1" +
		"6PrZ$4fnclIPsgVNwDk0AgmTZfZqBgp7BtkTcNKUXl8ThpNMoohUMMws#1tVY35eFwRsRiS" +
		"YhQSQzDZhFYqInsEecBCMvb4sOZ0cKSKpd78n$EMwYd8IxKKTzEnx022JHY94u4sVZB9p3s" +
		"Wjn4MKSKp2LyZ9o3Lemcok#aVOjk0rtu2vQzvC8ykKlE73vbWZoz8TvClDv6gFy#uTpderS" +
		"VGcVQIcVR9bzcltv5XZ0vrJ1gGxal0PnBcOEsNk0FOpEfKTkz$c$gpaHERuYPjSOp#4UIb0" +
		"cwIMOA#RNh92#aSNC5T4sjGNs$DIIL4KLumdQIPjt#VsAUZMf3X6#eOpdS8ywlcogTu7zSf" +
		"gQ8bzzaKg7vzP4NVLTwyLuVTph6zAzxwXszJwkToSJwUcIMLljMslOLnFMg$AyI42lYb77A" +
		"MFs$CVuZeXp3Zr#bMQ7KOSuxI3j6hv1WhPsX9Lf7R3KyxvHQpVO#e1cefoj#IrlfH2HlLHr" +
		"P0Xj0Pnfj1kfMrfj6UQeNcXqhl2tc3n2dYJFijyACe#ifFy2UPdsw#GTqaR$DRtkRRA6iPr" +
		"aFbb0lpsLSnQfFaAEglqIwLPxATckzWHoJEqfggcSPVzUgpETj9EPwZz67i#eUO9i9hFLVv" +
		"eyaxBTFDhFaUVfTEZViLFrFgtfm$ohr14wXpJNpHXFYTkN#Wto9fbA2dptxM2#M7kK#EBzD" +
		"5PA#mEoZbHgh8psHhA9L6izdxepYeppFQFnhAqmDX$z3gqRIiQgNPEkPNwFnYPcpgyt#3Ep" +
		"cKn6ardQOwxgCMH9Hdr0SsOEJwdDlUIi8ZFKtz3xFPqjFdkJpzwcskovhLckUpSrRoSzYxR" +
		"qVlBLV65YP9VwgqcdBx$MvDBxZFfHrIjyDPsgTVyuBMI$sXyIdabdjzbFlVsTMh$IPwyd1y" +
		"WhljWdv0VoblelaiDc1hwQWocDvSZuoK$I9GVbH$bJVfTkEIg$oH7vLNwHd#Mm$C4yEyltN" +
		"lK1rLto7UL#pzj7kKC#fzmgdr5ssFXcuVwKBMIZzJ#LxR9DE5$XccM3ZRNBEk54v6EotaO#" +
		"yhf#I$QIRxp8rvHxlDLqoMvPQosU3raZxpFobPVRvLbyqqWdzPToI2zjulzE3j#20ILet#k" +
		"rzXlmtoHPcxJV0zZlHe9#3w4CEzCtEfmr7#TQuknNfyGi0H$63$hY8P$EqroOvFDBuLWQB0" +
		"5FrzllOugH$m3w4wfb");

	// suppress parser error reporting and let the custom error recovery mechanism handle it
	private static class SDocEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}
	
	private SDocScanner fScanner;
	
	/**
	 * parse
	 *
	 * @param source
	 */
	public Object parse(String source) throws java.lang.Exception
	{
		fScanner.setSource(source);
		
		return parse(fScanner);
	}

	public SDocParser() {
		super(PARSING_TABLES);


	report = new SDocEvents();
	fScanner = new SDocScanner();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 1: // Block = START_DOCUMENTATION Text.text END_DOCUMENTATION
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Block((String) text.value);
			}
			case 2: // Block = START_DOCUMENTATION Tags.tags END_DOCUMENTATION
			{
					final Symbol tags = _symbols[offset + 2];
					
			return new Block((List<Tag>) tags.value);
			}
			case 3: // Block = START_DOCUMENTATION Text.text Tags.tags END_DOCUMENTATION
			{
					final Symbol text = _symbols[offset + 2];
					final Symbol tags = _symbols[offset + 3];
					
			return new Block((String) text.value, (List<Tag>) tags.value);
			}
			case 4: // Text = Text.text TextPart.part
			{
					final Symbol text = _symbols[offset + 1];
					final Symbol part = _symbols[offset + 2];
					
			return new Symbol(text.value + " " + part.value);
			}
			case 15: // Tags = Tags.tags Tag.tag
			{
					final Symbol tags = _symbols[offset + 1];
					final Symbol _symbol_tag = _symbols[offset + 2];
					final Tag tag = (Tag) _symbol_tag.value;
					
			((List<Tag>) tags.value).add(tag);
			
			return tags;
			}
			case 16: // Tags = Tag.tag
			{
					final Symbol _symbol_tag = _symbols[offset + 1];
					final Tag tag = (Tag) _symbol_tag.value;
					
			List<Tag> tags = new ArrayList<Tag>();
			
			tags.add(tag);
			
			return new Symbol(tags);
			}
			case 19: // Tag = ADVANCED opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.ADVANCED, (String) text.value);
			}
			case 20: // Tag = ALIAS Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.ALIAS, (String) text.value);
			}
			case 21: // Tag = AUTHOR Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.AUTHOR, (String) text.value);
			}
			case 22: // Tag = CLASS_DESCRIPTION LCURLY Namespace.name RCURLY Text.text
			{
					final Symbol _symbol_name = _symbols[offset + 3];
					final String name = (String) _symbol_name.value;
					final Symbol text = _symbols[offset + 5];
					
			return new TagWithName(TagType.CLASS_DESCRIPTION, name, (String) text.value);
			}
			case 23: // Tag = CONSTRUCTOR opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.CONSTRUCTOR, (String) text.value);
			}
			case 24: // Tag = EXAMPLE Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.EXAMPLE, (String) text.value);
			}
			case 25: // Tag = EXCEPTION LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new TagWithTypes(TagType.EXCEPTION, (List<Type>) types.value, (String) text.value);
			}
			case 26: // Tag = EXTENDS LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new TagWithTypes(TagType.EXTENDS, (List<Type>) types.value, (String) text.value);
			}
			case 27: // Tag = INTERNAL opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.INTERNAL, (String) text.value);
			}
			case 28: // Tag = METHOD opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.METHOD, (String) text.value);
			}
			case 29: // Tag = NAMESPACE LCURLY Namespace.name RCURLY opt$Text.text
			{
					final Symbol _symbol_name = _symbols[offset + 3];
					final String name = (String) _symbol_name.value;
					final Symbol text = _symbols[offset + 5];
					
			return new TagWithName(TagType.NAMESPACE, name, (String) text.value);
			}
			case 30: // Tag = OVERVIEW Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.OVERVIEW, (String) text.value);
			}
			case 31: // Tag = PARAM LCURLY Types.types RCURLY ParamName.name opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol _symbol_name = _symbols[offset + 5];
					final Parameter name = (Parameter) _symbol_name.value;
					final Symbol text = _symbols[offset + 6];
					
			return new ParamTag(name, (List<Type>) types.value, (String) text.value);
			}
			case 32: // Tag = PRIVATE opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.PRIVATE, (String) text.value);
			}
			case 33: // Tag = PROPERTY LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new TagWithTypes(TagType.PROPERTY, (List<Type>) types.value, (String) text.value);
			}
			case 34: // Tag = RETURN LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new TagWithTypes(TagType.RETURN, (List<Type>) types.value, (String) text.value);
			}
			case 35: // Tag = SEE Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new Tag(TagType.SEE, (String) text.value);
			}
			case 36: // Tag = UNKNOWN.name opt$Text.text
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					final Symbol text = _symbols[offset + 2];
					
			return new TagWithName(TagType.UNKNOWN, name, (String) text.value);
			}
			case 37: // Types = Types.types TypeDelimiter Type.type
			{
					final Symbol types = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final Type type = (Type) _symbol_type.value;
					
			((List<Type>) types.value).add(type);
			
			return types;
			}
			case 38: // Types = Type.type
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final Type type = (Type) _symbol_type.value;
					
			List<Type> types = new ArrayList<Type>();
			
			types.add(type);
			
			return new Symbol(types);
			}
			case 41: // Type = IDENTIFIER.name
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					
			return new Type(name);
			}
			case 42: // Type = IDENTIFIER.name LBRACKET RBRACKET
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					
			return new ArrayType(new Type(name));
			}
			case 43: // Type = ARRAY LBRACKET RBRACKET
			{
					
			return new ArrayType();
			}
			case 44: // Type = FUNCTION LBRACKET RBRACKET
			{
					
			return new FunctionType();
			}
			case 45: // Type = ARRAY
			{
					
			return new ArrayType();
			}
			case 46: // Type = ARRAY LESS_THAN Type.memberType GREATER_THAN
			{
					final Symbol _symbol_memberType = _symbols[offset + 3];
					final Type memberType = (Type) _symbol_memberType.value;
					
			return new ArrayType(memberType);
			}
			case 47: // Type = FUNCTION
			{
					
			return new FunctionType();
			}
			case 48: // Type = FUNCTION ReturnDelimiter Type.returnType
			{
					final Symbol _symbol_returnType = _symbols[offset + 3];
					final Type returnType = (Type) _symbol_returnType.value;
					
			FunctionType function = new FunctionType();
			
			function.addReturnType(returnType);
			
			return function;
			}
			case 49: // Type = FUNCTION ReturnDelimiter LPAREN Types.returnTypes RPAREN
			{
					final Symbol returnTypes = _symbols[offset + 4];
					
			FunctionType function = new FunctionType();
			
			for (Type returnType : (List<Type>) returnTypes.value)
			{
				function.addReturnType(returnType);
			}
			
			return function;
			}
			case 50: // Type = FUNCTION LPAREN RPAREN
			{
					
			return new FunctionType();
			}
			case 51: // Type = FUNCTION LPAREN RPAREN ReturnDelimiter Type.returnType
			{
					final Symbol _symbol_returnType = _symbols[offset + 5];
					final Type returnType = (Type) _symbol_returnType.value;
					
			FunctionType function = new FunctionType();
			
			function.addReturnType(returnType);
			
			return function;
			}
			case 52: // Type = FUNCTION LPAREN RPAREN ReturnDelimiter LPAREN Types.returnTypes RPAREN
			{
					final Symbol returnTypes = _symbols[offset + 6];
					
			FunctionType function = new FunctionType();
			
			for (Type returnType : (List<Type>) returnTypes.value)
			{
				function.addReturnType(returnType);
			}
			
			return function;
			}
			case 53: // Type = FUNCTION LPAREN Types.parameterTypes RPAREN
			{
					final Symbol parameterTypes = _symbols[offset + 3];
					
			FunctionType function = new FunctionType();
			
			for (Type parameterType : (List<Type>) parameterTypes.value)
			{
				function.addParameterType(parameterType);
			}
			
			return function;
			}
			case 54: // Type = FUNCTION LPAREN Types.parameterTypes RPAREN ReturnDelimiter Type.returnType
			{
					final Symbol parameterTypes = _symbols[offset + 3];
					final Symbol _symbol_returnType = _symbols[offset + 6];
					final Type returnType = (Type) _symbol_returnType.value;
					
			FunctionType function = new FunctionType();
			
			for (Type parameterType : (List<Type>) parameterTypes.value)
			{
				function.addParameterType(parameterType);
			}
			
			function.addReturnType(returnType);
			
			return function;
			}
			case 55: // Type = FUNCTION LPAREN Types.parameterTypes RPAREN ReturnDelimiter LPAREN Types.returnTypes RPAREN
			{
					final Symbol parameterTypes = _symbols[offset + 3];
					final Symbol returnTypes = _symbols[offset + 7];
					
			FunctionType function = new FunctionType();
			
			for (Type parameterType : (List<Type>) parameterTypes.value)
			{
				function.addParameterType(parameterType);
			}
			
			for (Type returnType : (List<Type>) returnTypes.value)
			{
				function.addReturnType(returnType);
			}
			
			return function;
			}
			case 58: // ParamName = TEXT.name
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					
			return new Parameter(name);
			}
			case 59: // ParamName = LBRACKET TEXT.name RBRACKET
			{
					final Symbol _symbol_name = _symbols[offset + 2];
					final String name = (String) _symbol_name.value;
					
			Parameter result = new Parameter(name);
			
			result.setUsage(Usage.OPTIONAL);
			
			return result;
			}
			case 60: // ParamName = ELLIPSIS
			{
					
			Parameter result = new Parameter("...");
			
			result.setUsage(Usage.ONE_OR_MORE);
			
			return result;
			}
			case 61: // ParamName = LBRACKET ELLIPSIS RBRACKET
			{
					
			Parameter result = new Parameter("...");
			
			result.setUsage(Usage.ZERO_OR_MORE);
			
			return result;
			}
			case 17: // opt$Text = 
			{
				return new Symbol(null);
			}
			case 0: // Grammar = Block
			case 5: // Text = TextPart
			case 6: // TextPart = TEXT
			case 7: // TextPart = LBRACKET
			case 8: // TextPart = RBRACKET
			case 9: // TextPart = LCURLY
			case 10: // TextPart = RCURLY
			case 11: // TextPart = POUND
			case 12: // TextPart = IDENTIFIER
			case 13: // TextPart = COLON
			case 14: // TextPart = ERROR
			case 18: // opt$Text = Text
			case 39: // TypeDelimiter = COMMA
			case 40: // TypeDelimiter = PIPE
			case 56: // ReturnDelimiter = COLON
			case 57: // ReturnDelimiter = ARROW
			case 62: // Namespace = IDENTIFIER
			case 63: // Namespace = FUNCTION
			case 64: // Namespace = ARRAY
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
