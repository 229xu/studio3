package com.aptana.editor.js.sdoc.parsing;

import java.util.ArrayList;
import java.util.List;
import com.aptana.editor.js.sdoc.model.*;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "SDoc.grammar".
 */
@SuppressWarnings("unchecked")
public class SDocParser extends Parser {
	static public class AltGoals {
		static public final short Types = 43;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLbjKLLKKdUVSUu6KHDGGDH0pG1vUx#KPAfILOWzHp00p4vFCiZAixAL9PQMzjJ4QZJx" +
		"wwRC#wgCniiIUvgCifOT9fKLffMIbbcNeRkxDuh2X8zAdOtZEc7kkkTRQw#ozppxxNi1TZ8" +
		"jn8IRW0foFYIZ3HPW45$bgBSv62eQX005SZXhCndpSZAMu7oin5fDnAMQW2jUY3Wjn3nx64" +
		"#guKYZogLQEIqoja6cpUbUjbrdbk0pdzJft6bRxZE#qvrJtn9gTDHgLXlEe1w4V#c0ufkCA" +
		"gY6UFWlPEDTJiTmJuv69SHX9VupLJqUg4R5qfnM77CpoZUIOv$j5Kb6Be6z4zxZLDt963zN" +
		"wOgYdipsh78M8HwcPrLEu4a#pFHF5HYVWQiFzCTTm9UOP7e3hS3j7VfjPA#rPZXiD3yHYmo" +
		"jmBmOZqOn6wplGWCUGvEbKF8HSMZVXRi#NZCSbzYH6iKr555SPdeD5RE$4VMn3U91PZz1Am" +
		"wCOWNEGZWnwGmXZ34Bgc6f3YJhA6Ubx2Yem5QLgdNfJlK4zatdN4DTZ0MwWleLsFPRWBYoZ" +
		"zG1HYbLiIzG$S7Yc1VW6GkOjnt5jYtbkb73T4hWYsPp$0Cvt4FT74kUQp1qpb6UVdaqgrpN" +
		"DZ6qaTuw#CdsgvNBtwLfHgTYxQhtBqhKp$rVkVyTtsdFgUzftLYVtuIaGp#zRiyFliqFhFl" +
		"qzvPWzaSZlAP7#iDMl8zAfEwqGlrhNDpBAFDyl4cQFY6z4z$2l5koXMhfLBSQpz9Z3R3NdS" +
		"LO5R3FOQXsYrXmKTeJDQSAHnvegskDA94DOwtm#KOz6wrXgLqRNKI5YhAmklivOc7Ua2sUP" +
		"DYhzskSJvXFpZJSghAyy8jVS0PxWBjarjzPHGQ6dYpYke1Tfz#MPEciQs2Ybzf3I0MS5cMU" +
		"Miwh1X9rdY4rYlqQi9ZQBFa0S4ljPOg$OzO0xMEnQuHVuZEFQji6y5CPU90#Nl0N4CcAHw9" +
		"VqwTcrZpE3Q2QMYdw5g95wKzXay5cATWNj4lAqzXYM22$lFewUm6ibmNdZUKAFjPBFgoDp7" +
		"7YPuBguLKGrKKEzNlfj9BRHDvFvhnFFKU#KSSwYRYHUfMYH$Ft2XoLdDkD7oRKKnsIkCKG2" +
		"VNF96uYtY3OYsLhJH6AUs7NMkeqGttpQMyYwLhRuzBetaVkHyoL$F36HleNa7UHaSeN4ggt" +
		"rcSfOlRQvx4qIr$ieGAxoNrDdxGdysorxjsMt2NC$kF7#VTqaA$yWzK1YYCJGiIUj$6Jjqt" +
		"jGDCVh3hF7IAoJM8hbdow#TBznd0YyWkoJ0VFjkfbI8qrYasddT5kBHk4vZ8sHV5qZLxzxQ" +
		"nwnHDZwBhSAMslfveglMVW8VSKIYoCAY0Zzkqu#3wV5gjkNu3VcxBDyt4FkEFqEHEltCC6o" +
		"ophVfsk$Zp9PYpMmBhL3VSgsITHszJ7RRSRUgZvY#mdneT5RrEVgC$M5PBv7R2Os6RLHlQl" +
		"U8Nz0R32UzxiyvO1gLVlKVlMtEgB#L7#em#gGEgX#Lx#fNzLVZFzC$EHb$oZSglQotUEf7p" +
		"phUwA5#CxpVCjsjrUXLUrIRnkBNx1gLElf#SQBVUrPNx5jzjHEualrYnIPnDFD8Lp#CtNut" +
		"pGW29fVfz7cr$haA61kWVdT0#5mTxeMGjtixbfpZ4#ydICSJuGreuAmGO082WV45xHY8OjZ" +
		"9QR$XyGPEvzv6aK60OyBoHqO#o#fHVxw");

	// suppress parser error reporting and let the custom error recovery mechanism handle it
	private static class SDocEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private SDocScanner fScanner;

	/**
	 * parse
	 *
	 * @param source
	 */
	public Object parse(String source) throws java.lang.Exception
	{
		return parse(source, 0);
	}

	/**
	 * parse
	 *
	 * @param source
	 * @param offset
	 */
	public Object parse(String source, int offset) throws java.lang.Exception
	{
		fScanner.setOffset(offset);
		fScanner.setSource(source);

		return parse(fScanner);
	}

	/**
	 * parseType
	 * 
	 * @param source
	 * @return
	 * @throws java.lang.Exception
	 */
	public List<Type> parseType(String source) throws java.lang.Exception
	{
		fScanner.setOffset(0);
		fScanner.setSource(source);
		fScanner.queueTypeTokens(0, source.length());

		Object result = parse(fScanner, AltGoals.Types);

		return (result instanceof List) ? (List<Type>) result : null;
	}

	public SDocParser() {
		super(PARSING_TABLES);


	report = new SDocEvents();
	fScanner = new SDocScanner();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 3: // Block = START_DOCUMENTATION Text.text END_DOCUMENTATION
			{
					final Symbol text = _symbols[offset + 2];
					
			return new DocumentationBlock((String) text.value);
			}
			case 4: // Block = START_DOCUMENTATION Tags.tags END_DOCUMENTATION
			{
					final Symbol tags = _symbols[offset + 2];
					
			return new DocumentationBlock((List<Tag>) tags.value);
			}
			case 5: // Block = START_DOCUMENTATION Text.text Tags.tags END_DOCUMENTATION
			{
					final Symbol text = _symbols[offset + 2];
					final Symbol tags = _symbols[offset + 3];
					
			return new DocumentationBlock((String) text.value, (List<Tag>) tags.value);
			}
			case 6: // Text = Text.text TextPart.part
			{
					final Symbol text = _symbols[offset + 1];
					final Symbol part = _symbols[offset + 2];
					
			return new Symbol(text.value + " " + part.value);
			}
			case 17: // Tags = Tags.tags Tag.tag
			{
					final Symbol tags = _symbols[offset + 1];
					final Symbol _symbol_tag = _symbols[offset + 2];
					final Tag tag = (Tag) _symbol_tag.value;
					
			((List<Tag>) tags.value).add(tag);

			return tags;
			}
			case 18: // Tags = Tag.tag
			{
					final Symbol _symbol_tag = _symbols[offset + 1];
					final Tag tag = (Tag) _symbol_tag.value;
					
			List<Tag> tags = new ArrayList<Tag>();

			tags.add(tag);

			return new Symbol(tags);
			}
			case 21: // Tag = ADVANCED opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new AdvancedTag((String) text.value);
			}
			case 22: // Tag = ALIAS Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new AliasTag((String) text.value);
			}
			case 23: // Tag = AUTHOR Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new AuthorTag((String) text.value);
			}
			case 24: // Tag = CLASS_DESCRIPTION LCURLY Namespace.name RCURLY Text.text
			{
					final Symbol _symbol_name = _symbols[offset + 3];
					final String name = (String) _symbol_name.value;
					final Symbol text = _symbols[offset + 5];
					
			return new ClassDescriptionTag(name, (String) text.value);
			}
			case 25: // Tag = CONSTRUCTOR opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new ConstructorTag((String) text.value);
			}
			case 26: // Tag = EXAMPLE Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new ExampleTag((String) text.value);
			}
			case 27: // Tag = EXCEPTION LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new ExceptionTag((List<Type>) types.value, (String) text.value);
			}
			case 28: // Tag = EXTENDS LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new ExtendsTag((List<Type>) types.value, (String) text.value);
			}
			case 29: // Tag = INTERNAL opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new InternalTag((String) text.value);
			}
			case 30: // Tag = METHOD opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new MethodTag((String) text.value);
			}
			case 31: // Tag = NAMESPACE LCURLY Namespace.name RCURLY opt$Text.text
			{
					final Symbol _symbol_name = _symbols[offset + 3];
					final String name = (String) _symbol_name.value;
					final Symbol text = _symbols[offset + 5];
					
			return new NamespaceTag(name, (String) text.value);
			}
			case 32: // Tag = OVERVIEW Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new OverviewTag((String) text.value);
			}
			case 33: // Tag = PARAM LCURLY Types.types RCURLY ParamName.name opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol _symbol_name = _symbols[offset + 5];
					final Parameter name = (Parameter) _symbol_name.value;
					final Symbol text = _symbols[offset + 6];
					
			return new ParamTag(name, (List<Type>) types.value, (String) text.value);
			}
			case 34: // Tag = PRIVATE opt$Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new PrivateTag((String) text.value);
			}
			case 35: // Tag = PROPERTY LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new PropertyTag((List<Type>) types.value, (String) text.value);
			}
			case 36: // Tag = RETURN LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new ReturnTag((List<Type>) types.value, (String) text.value);
			}
			case 37: // Tag = SEE Text.text
			{
					final Symbol text = _symbols[offset + 2];
					
			return new SeeTag((String) text.value);
			}
			case 38: // Tag = TYPE LCURLY Types.types RCURLY opt$Text.text
			{
					final Symbol types = _symbols[offset + 3];
					final Symbol text = _symbols[offset + 5];
					
			return new TypeTag((List<Type>) types.value, (String) text.value);
			}
			case 39: // Tag = UNKNOWN.name opt$Text.text
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					final Symbol text = _symbols[offset + 2];
					
			return new UnknownTag(name, (String) text.value);
			}
			case 40: // Types = Types.types TypeDelimiter Type.type
			{
					final Symbol types = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final Type type = (Type) _symbol_type.value;
					
			((List<Type>) types.value).add(type);

			return types;
			}
			case 41: // Types = Type.type
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final Type type = (Type) _symbol_type.value;
					
			List<Type> types = new ArrayList<Type>();

			types.add(type);

			return new Symbol(types);
			}
			case 44: // Type = IDENTIFIER.name
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					
			return new Type(name);
			}
			case 45: // Type = IDENTIFIER.name LBRACKET RBRACKET
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					
			return new ArrayType(new Type(name));
			}
			case 46: // Type = CLASS LESS_THAN Type.memberType GREATER_THAN
			{
					final Symbol _symbol_memberType = _symbols[offset + 3];
					final Type memberType = (Type) _symbol_memberType.value;
					
			return new ClassType(memberType);
			}
			case 47: // Type = ARRAY LBRACKET RBRACKET
			{
					
			return new ArrayType();
			}
			case 48: // Type = FUNCTION LBRACKET RBRACKET
			{
					
			return new FunctionType();
			}
			case 49: // Type = ARRAY
			{
					
			return new ArrayType();
			}
			case 50: // Type = ARRAY LESS_THAN Type.memberType GREATER_THAN
			{
					final Symbol _symbol_memberType = _symbols[offset + 3];
					final Type memberType = (Type) _symbol_memberType.value;
					
			return new ArrayType(memberType);
			}
			case 51: // Type = FUNCTION
			{
					
			return new FunctionType();
			}
			case 52: // Type = FUNCTION ReturnDelimiter Type.returnType
			{
					final Symbol _symbol_returnType = _symbols[offset + 3];
					final Type returnType = (Type) _symbol_returnType.value;
					
			FunctionType function = new FunctionType();

			function.addReturnType(returnType);

			return function;
			}
			case 53: // Type = FUNCTION ReturnDelimiter LPAREN Types.returnTypes RPAREN
			{
					final Symbol returnTypes = _symbols[offset + 4];
					
			FunctionType function = new FunctionType();

			for (Type returnType : (List<Type>) returnTypes.value)
			{
				function.addReturnType(returnType);
			}

			return function;
			}
			case 54: // Type = FUNCTION LPAREN RPAREN
			{
					
			return new FunctionType();
			}
			case 55: // Type = FUNCTION LPAREN RPAREN ReturnDelimiter Type.returnType
			{
					final Symbol _symbol_returnType = _symbols[offset + 5];
					final Type returnType = (Type) _symbol_returnType.value;
					
			FunctionType function = new FunctionType();

			function.addReturnType(returnType);

			return function;
			}
			case 56: // Type = FUNCTION LPAREN RPAREN ReturnDelimiter LPAREN Types.returnTypes RPAREN
			{
					final Symbol returnTypes = _symbols[offset + 6];
					
			FunctionType function = new FunctionType();

			for (Type returnType : (List<Type>) returnTypes.value)
			{
				function.addReturnType(returnType);
			}

			return function;
			}
			case 57: // Type = FUNCTION LPAREN Types.parameterTypes RPAREN
			{
					final Symbol parameterTypes = _symbols[offset + 3];
					
			FunctionType function = new FunctionType();

			for (Type parameterType : (List<Type>) parameterTypes.value)
			{
				function.addParameterType(parameterType);
			}

			return function;
			}
			case 58: // Type = FUNCTION LPAREN Types.parameterTypes RPAREN ReturnDelimiter Type.returnType
			{
					final Symbol parameterTypes = _symbols[offset + 3];
					final Symbol _symbol_returnType = _symbols[offset + 6];
					final Type returnType = (Type) _symbol_returnType.value;
					
			FunctionType function = new FunctionType();

			for (Type parameterType : (List<Type>) parameterTypes.value)
			{
				function.addParameterType(parameterType);
			}

			function.addReturnType(returnType);

			return function;
			}
			case 59: // Type = FUNCTION LPAREN Types.parameterTypes RPAREN ReturnDelimiter LPAREN Types.returnTypes RPAREN
			{
					final Symbol parameterTypes = _symbols[offset + 3];
					final Symbol returnTypes = _symbols[offset + 7];
					
			FunctionType function = new FunctionType();

			for (Type parameterType : (List<Type>) parameterTypes.value)
			{
				function.addParameterType(parameterType);
			}

			for (Type returnType : (List<Type>) returnTypes.value)
			{
				function.addReturnType(returnType);
			}

			return function;
			}
			case 60: // Type = PROPERTIES LESS_THAN Type.memberType GREATER_THAN
			{
					final Symbol _symbol_memberType = _symbols[offset + 3];
					final Type memberType = (Type) _symbol_memberType.value;
					
			return new PropertiesType(memberType);
			}
			case 63: // ParamName = TEXT.name
			{
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					
			return new Parameter(name);
			}
			case 64: // ParamName = LBRACKET TEXT.name RBRACKET
			{
					final Symbol _symbol_name = _symbols[offset + 2];
					final String name = (String) _symbol_name.value;
					
			Parameter result = new Parameter(name);

			result.setUsage(Usage.OPTIONAL);

			return result;
			}
			case 65: // ParamName = ELLIPSIS
			{
					
			Parameter result = new Parameter("...");

			result.setUsage(Usage.ONE_OR_MORE);

			return result;
			}
			case 66: // ParamName = LBRACKET ELLIPSIS RBRACKET
			{
					
			Parameter result = new Parameter("...");

			result.setUsage(Usage.ZERO_OR_MORE);

			return result;
			}
			case 19: // opt$Text = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Grammar
			case 2: // Grammar = Block
			case 7: // Text = TextPart
			case 8: // TextPart = TEXT
			case 9: // TextPart = LBRACKET
			case 10: // TextPart = RBRACKET
			case 11: // TextPart = LCURLY
			case 12: // TextPart = RCURLY
			case 13: // TextPart = POUND
			case 14: // TextPart = IDENTIFIER
			case 15: // TextPart = COLON
			case 16: // TextPart = ERROR
			case 20: // opt$Text = Text
			case 42: // TypeDelimiter = COMMA
			case 43: // TypeDelimiter = PIPE
			case 61: // ReturnDelimiter = COLON
			case 62: // ReturnDelimiter = ARROW
			case 67: // Namespace = IDENTIFIER
			case 68: // Namespace = FUNCTION
			case 69: // Namespace = ARRAY
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Types Types
			{
				return _symbols[offset + 2];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
