package com.aptana.editor.js.parsing;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import beaver.Action;
import beaver.Parser;
import beaver.ParsingTables;
import beaver.Scanner;
import beaver.Symbol;

import com.aptana.editor.js.parsing.ast.JSAssignmentNode;
import com.aptana.editor.js.parsing.ast.JSBinaryOperatorNode;
import com.aptana.editor.js.parsing.ast.JSFunctionNode;
import com.aptana.editor.js.parsing.ast.JSGetElementOperatorNode;
import com.aptana.editor.js.parsing.ast.JSGetPropertyOperatorNode;
import com.aptana.editor.js.parsing.ast.JSLabelStatementNode;
import com.aptana.editor.js.parsing.ast.JSNaryAndExpressionNode;
import com.aptana.editor.js.parsing.ast.JSNaryNode;
import com.aptana.editor.js.parsing.ast.JSNode;
import com.aptana.editor.js.parsing.ast.JSNodeTypes;
import com.aptana.editor.js.parsing.ast.JSPostUnaryOperatorNode;
import com.aptana.editor.js.parsing.ast.JSPrimitiveNode;
import com.aptana.editor.js.parsing.ast.JSUnaryOperatorNode;
import com.aptana.editor.js.parsing.lexer.JSTokens;
import com.aptana.parsing.IParseState;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.ast.ParseRootNode;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings("nls")
public class JSParser extends Parser implements IParser {

	// suppresses the parser error reporting and lets the custom error recovery mechanism handles it
	private static class JSEvents extends Events
	{

		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTu55NNFdTsDmtIAmaX2IMK4B4hpK89Yj95194cLP0c8jX0a6815G7fLNhlsB1tHR2" +
		"2s3is$51H4VVyxypSxCwIpMPdPvBuF#xcEVkUszvpphrpMpOiH3Npn9Lq8mqN$Uaw5Ubi6a" +
		"ANKo$gGTVI9U8#MagNqbcqaEQ9nVG0FKWFqInwMBmgNX6zHK$HNLmjkeY6efwuI9mhEefsu" +
		"dBHLBn9hz2hug1uMxn3Rz9#yRxuG1mI7ufpnFMYdwXBXocIFX5lYGFYNV5UiNsnH2mLoyHo" +
		"iKAi4JF5FU9UwL4$UDH1UhI5vj1SUiIo$IZnwUdspSLFdrco7oC#BoF#6Pxuesc8AD8z4fV" +
		"H8bfCIs3$HqlsKyHF8SH$Ezr1Tz84j7wLZbkodon#BIF#Hn7$J8$5H4hozZwbOlmTbkpdY3" +
		"yjn9y7#n6MxDSIVvSH$sgV#AjHfY7#Eh0$ofBzki9j8Vu2sB$Palr2HIaZ$iq#yU#WR4FyZ" +
		"M1$d2NxrHHNCF7JkJxnRw9nj83cqnZOlyEI$HPAJ83u7op3buQmFz7Qyw$4beX$10sZqJIL" +
		"cb4JkficKsDgIaEfFKsaksWIJQ4Bw49gJXVHnTGRzk#sP7#hacZH$ZHBzZihAHRjRxTalvE" +
		"IQT7#BalsyvHiiyy$pQRxwJQwWNfIBkm$PctzK$8inl#a9VjzbDeMxJzhRVzNwbkq$v8b#t" +
		"sLCqhOTvB$FU0vdpLGEtzH7BbAjqylgFRfDNgTtb3jqrjqW0xIEmRxCwaB$q5Tg2NLeRQ6S" +
		"vNl7l0ozW3jl4FFAuqCViwWzPGW1f4YnjC6saZrmTH5n59RSJvjSn#aZcAeJNvs58tvXEJI" +
		"FHbhy4FFqKlrzvkLHdGUdOypQoJT8dUBGLJLgXy6csNlKY$IIpIU77RP5CbKX9zkD13zNjS" +
		"pGhEeWEgBU56LhgO1r9gk52cgJJ7Gait1vAOYqojIJNhVikLCn5XerhAuGgHRjfmZQehweW" +
		"4pZH1EUlVq5K2qzhC2HD3RuWQAf#$e9$fSHDA7z2lzGKn$YmoHPOw76fN68ng9GgfYZer7b" +
		"UgLEXTYGrdjy2GVicNscBCPu8PNRZQ$g0IR0MwIvMOpmEsnl6m6kZ6Mcyq0jyHowzlAc2kL" +
		"O3FG3RZSR0QuzPQRpG0ttNAp6U1sMsus0zneoyrcW5jikTaCS7CjDvi1RglbPZF03RNSR0Q" +
		"ubPQRpG0tqNAp6U3sMMus0zmuoytcbvPkR#PEhYDjE4yNWMT4gJpRHHgzPu9j5qxdHmAUfp" +
		"y0srz1idqf3jEduZLnLFmilX2HueZA9dup7UDNyEfR6$hgA7X#je7d17XEMkSHX3kLomQUA" +
		"F0asy1J1N6zQmDFTVYJOmDF3PlyoOK$jMpWgGsUV1juwjWJ5#N0dxDiyESyy3InWQSPU5hP" +
		"45SUU5hQu4yRzBCTuzuM$hIt8QwwyAUE3VvS1NywsU1F0NXwsC1J29xhRE1f19u#DlJFa3B" +
		"Mmo3tB$6GE2pc1DY$WkLv63oFMDy7nNp4jT1wN5I0VRd0XhWM8gxvDl3CAQD$pFJpAXjur7" +
		"7VQ0FFHl1ii85d4tZsMUVXBuJwTnZMUJw7Fn$PmFEPECo1peV1ydm2dezjuFa8F4TiuFaGF" +
		"8Tju3a4dWziu7aVFE$PmFCknlqp6tXU1CzNfVBu#oGam##dmjtfCbf7rIdTP9js8RSfeXNQ" +
		"PrD5z3kreh#eI7mD6II#er4qdJwcR#W7MYuIHO9GQ9c84KaYXNuJtzEV8aNSX5PNcBIwkOA" +
		"YMwEs4SF4hMAwc8I8KcXa49$xTRNDisBUC#XHaKSpQ0RwLF$SRxR8flgYcxYHgedxnKhn07" +
		"rKKQCjXeijOhtOe$N7rwP#Zt2CTugrz7s5UVgKsZkyGwmJnyHeKv$h$yBRbLGnei8yVOEIn" +
		"7vwII7CXdzC$0L8TwgXHEBf51NbgH9FHKgwMA$aOFoZJOt#BzgpcbfXdjOHl$DYSL99umT4" +
		"DLEUdk9jl5LSK56UyXRUp9ju8s$0sUWICwClpk3rl4wChJ1Fr$8Q9PzNyMeYSPUf6NKRuIN" +
		"khB0zoV0IKqnvkbLhixjIFDrXojF$QMqUhnHFdpRZgHAbjNcXKZpzs1#3qi1dprvFNKGS3H" +
		"ONgt$7X5F9Do5PVHxcRgBhrPEG6ApPVbsqW5xYhwd4XU9Ib8uadvVuGKSbebBwYKsDQ8RMv" +
		"bIbU7h2r6gkzwcZCZnLuaBmj4gbU9eKWgSrAiNJh10yhLafdjODmTE69gscXU1fLWXjseJG" +
		"vfeGsjmQGfjxGsYpEeGsEqDeipk4DY#RRoCAGcXpPWXjpjRQc7kkrmO#qufhQPf9nli2COf" +
		"Ug76FJJwUgVcelbRQvECv7iPLfXZziec#6jjLDZ0Dq9Z#PugfYnP7M$Bp4cDCCHNvDEveuB" +
		"b5t6w1oUZH137P9gQfOfjDJ3l5NfkOdX37RM9wHX4sCRsecFiTGUbCdoW9DZ5zgvZxRK3fJ" +
		"3ygkS7VraLpKrR3TSDrmtN3TV#BTODRKsi7Lqzq2E8pcs2OyeEf9JhxsIVKt$$CjSMBUcNN" +
		"4LrBsQsMY7as#D2WJ8vhj7zvL$A5NB6WpDQBv2U9sguhdgSznMsfIFmX$b6SIbMbm92Bbv9" +
		"CU#anUfoUe2VfATf7JzCpz2mzLqhk7erTOpHufp4grPLQ6jOppLZAIodqgFxR5iyBzQNE2$" +
		"Lbd1VUyjv#oxsltjI9EkD4VfK7kzBLr0styEvQF$T4t$T2hJxK5trzDkuXvw8NXe9V7P4HD" +
		"996mT9DD8Pkfh7QlveSZzluRPv$#wzRd0mlfi2VQJGTTwnxIS7Cc44pjNyxMcnN$tQ0sVBV" +
		"OiwZ#R94#7Xq1ZN2xSgg$Ir#x5Ta$0uJyM$ryUXot9kkA9V#Bpl#yxNrjZ5QMxM$DgZu6tW" +
		"ifbE6eVSBBDjlRYd#PfRjDpKP$r9QPeY$YMNxYop5ly2o$HKcux#IsXdYNsxP$jAGujzEEo" +
		"YQOcYtPVjBoeY$B5$Au$aNcDSESfAB8YYIehH8gr1LYgKuYgS4xLjyaYc5KYcjNEB$Bzdtj" +
		"$vMfFrc8Jt$$UXwway3Q62vh7yL6R#$$RyYxVlR$olI$bO$zhlYh5dsCs3F#Qi1edL0dDZB" +
		"d8QLlUGUe9ztrjAZ1jyMegUsqMBQJEkqdbe99a6hmEIaGfoN2sc3JNuMuiSXkNHFCWn#w3b" +
		"wgVvU5twguwUEPV5keS1FgtvuRPOzGkfPgHxyiClcOl3fFmjnRl2Eq0Bq#mP4N0S$zV7Jq0" +
		"QRxJNlpQz8QonRLkskg1JB7QYZThuZKoj0EYohtokdVYgRJJKeXt8fZsfIBQfjacTvgJpgg" +
		"QkkIRPwfRAfxUfMoceNjXcs6ROPjXcs6ROPjXcs6RRvtx1fryarU9wCW3mAoioSf#k1JPHn" +
		"dWwUBHDi#JR4AC2JRXDFwT45pvDkepzsF0Cgps8RU1pWSTZ0CnGy7MpWsMYZFtQCkmAUeJR" +
		"mrB4fhkOsFJzBmAFOvCyI6tYQsUIF6bTJc$onWsSHU9hyYtWMW6U13JmhmBF21fxb0NytP6" +
		"uNisCzR6xZysFNk2$y5utxGl0iie6dgKtzqyoczR2vJUkFkb#ije6d03mDRE39jockV9lsq" +
		"toRpeTXdlz$F9cbyfZvL7WG3QOXT4E5jSdm$2Xq7oG3KMTWhqd7cMwJzhcK#idKAkqpgbsG" +
		"kjHGcolf6cQWpRyvkhgQZweq3ChJFUNWsIQS#XVYPx7dSx#Tj18$gxHFhDJFXogk3ttxmzp" +
		"TNfqd5UVfQgrtycazlFntUrhSew7CXegTGRwUckjJTJGgSlG5Hh4UHZy$XD7Fhq1Fypq$Yc" +
		"ch5Uzf0$MTsMoVCcjjAiXJDhp2dlx7FIsRGK4qTV7kr289RfylwUbQM5FFEEf9gBrcUniLG" +
		"Y$vrrJrgJvAwp3xUYfnNNX4xVFKn5CGzZJiwN$6qt2RS9kGsvXwhdt#LjU$ZVhsCgA6hOpQ" +
		"pAnane0Hrwaa9g75uMG$BvDC6Jvj2truB32Tvb6OASnaBvEPrTFKp0hN3TSDrmtN$G$M3NP" +
		"DjQzUS4n1rVApJ#Y$$x77Yo3gbB9RgLxOuKFPDJ36Vkoh8$zG4AtbPubQcmPKu6cR8Jz9h6" +
		"FCbVkm#iqpbz2br89QKYjgJKNKXYuh9RT0uzSO3TuL5E$eeJ6MVaRmQFxRodcXrS2yqD0uB" +
		"ppbc1T#oWsMqeYKCoTgNoPITHXHn0kgNYnuNGZfe7vNYfwE#4x7o7X3dJ#9H5DT5#aIpo1o" +
		"EBnrykxHqT5IHoK2#cJKQmvy7dWTaREb#drzG3L$AL3zRkLFOQi9qhM0Ov2k3zoCzZE1to4" +
		"DZAhfjHFLKqVNIcCSmGZQD94SSw7$9VK3qj#daDUCA3e6UD8Grqca#oA6lTwyBDdMzRUEqQ" +
		"raxFkyTHniiBiEiSh#JNyQwSQGKv0PaCsd#UWgwNVqdKJ9hMNx9sMz2HAlaVWSwktLTP4HV" +
		"9zaTPLufs##2DY$YEVeQNwlCkWH9Uid5qaxQoGUyCyRmNXEUq8cbYohkaFsnt7eguXY6WOR" +
		"Pqakrq4TOmQ6rhxgWnBtd9Q$7vpB46yRw9z03X35AdfPR3xI7mBJKGUOV1bqXonhIbGb1Nc" +
		"NGsyhyp1tKdeGfNOdgbu3wU6oB$l8yijbkfzCNw5ZwcRPbtBUnsA#LMcFUksWpv9vlI2xfR" +
		"u6vTDHZdKWzbNqpPzwVlfyoI$zIMxlZRCAdhUgc9knQZnkfF4yHmoJVAz37mLSgQVZahtju" +
		"l3ino6ck6iX4xpvURDb$vqlVN#MA6CEwWm2VW$47AXsiRU#IyPSRJRyV5Dolo9n2$AF0jz5" +
		"sJwYx5#0#$Mo#0GlHqtCzUhTlUduwaGri6x5oNaTduCqyk9RGGP3FnlpeZTa7dICdVgzKgu" +
		"4wEXB5yRATJrqh66H1OZZ7UZt8kyAo5NGbnNRqRbhxFPD9qJ1Rar84VfvbPwNKYZ70N74tI" +
		"37e3zynZeQDrDFLqV$n6sNPRk9qgv17doDUr#Mtm$zf2pVYpJMdFWQicmRz1RIdpSCOx4Tw" +
		"IzacuFGiVudu9dDYGDYZSof3Sm2OjrEk0JO4Ns2TJnd83QShu2t8#RHa9j107$LxvLFm3n8" +
		"U1E2iSYPHPI8VivPgzj8J8Q08#KYu6YPToFAz#bwsYRu2f$Y1qg$tuT#h#mZsA$#0TBocQ$" +
		"#D$It9ST8SA3lidEHTqB6rWTvU9woMyENJDynICI#aFWaEBy5FWx4CvI8EPpu6L6I0d52C8" +
		"UJwa7QGgw438V0JX9YIiApc8GnIFoS22Of#mROG4n9wFU4Va3CbOIfGEnhoGDG1tjpzWFGE" +
		"yCMk99lGLv3vEr4lVN8GzqKn9w2vpaTzgjZZYLWVKbPZZc#5dLR81xiwGbO3rFlXc2U9u8p" +
		"THhoqN#969$KPQZ$0pZpaCPpcegsUV0vSH9qz5kg2zpTK8xdBd4rqeTGFWBwQz0FGp3UsKE" +
		"H$Xaw$CyR1$#Je1yXzMX1gOWl0sEG$I3opqVwTzHP35rTjqv0rB9TI6F#fY6sl2NGLq0lX3" +
		"H037XUy#1Jqaj8Du8EMxdmBm$f98nJsfdUyN6Y7rnjZ6Ec2fuvh3UKgzTnoVNKTPUXtNglJ" +
		"hEyUhKTNbsS8$FUzEQbxDJH8VSTroaTSy#LY3vMlvSwTojiO9t9FQwVRvJn#XgHZ7ECmDXd" +
		"ZV1oPisJzewS7aTPedwJdOv9XmmnV6ieNuIouwVr3PuPvIDVdkH2ttIc26pNWVvroZt0sSw" +
		"ytybjlBhuqhVCQJXhPMRfwBerUEuakKPadkUR7vW3vPDEIt$frIDw1uYbhxJN8LWVIt9a3f" +
		"4uELGE0zVYqDgvdf2nVkCdHcqlnhEpHKz7ohaLsSDGvoq$xOxAUhEzUKxC$PJQ#jeUkJyut" +
		"rB6#ybxMCUeA6zUL0j3#NwlxdnQndYJZaclwnWRQwWlxpakx6rHsAzIQtdBOgSW5kpbiODb" +
		"shCc#FeK#wjNZwYbO#OURrwgN3SovLapymTlMLm3MQUvV#vikR$5OLzC7UU$3i7lkBc#UH6" +
		"DVTEvbnbqGDnds0kTq75#IyR#d3mMQwq3ULYBux4#PsK3iHV4utoJfIBMutYiSrbF#$9cVL" +
		"NIduZpq9UxLLuz7J$7MnRrYw5Vi5T6D$2ce$iRod16ICN#6xt4K6vOxz9mHef9ygPZhbGHp" +
		"wfXBKz6lz0vthGYrtRNL5a#IVQ7l4lcuYwQe2BsxGJqHHvi962VJy0#du3pU49RtpX9Zgim" +
		"s4YH#qx20M#UaFNIi8UcOM#FcMhm#nb3J0yXRLW7gvnhA7j3vicpVqeLv7qZyzOQ$TBpqXk" +
		"VdXUAW2TFHVJhCHbp8sdp2qETfdxQZPNr3NjUEkvpwLW7qjz2OeitFoD6rZtcpHED3Bg18m" +
		"DhY32q5OOs6JYJPs3FLGnj5MDRdASKGrj5nfGgxsKPE5DLYyO#PsZlCBIlXdE#mz3UOR1Th" +
		"PUEJja$AMyZRvpCCt0eP#gXifjFyTzIFmdv5NASjV$rYt4svhVKqmo$vZx6dHXpt$sp6oSg" +
		"DrgmW4H2OY4uCJDk9bmV0cR6oOkRC#uQt1Rjsl6Lt8QBk3MtufRSWY$bI$XYxifNSH$D3lh" +
		"B$R7x90$GKiFS7#4TEWzbd5WPjqt6gOoxCV5mlf4ZU3fFqsh#HPuN$yw$yPzSbQVo5BwRjU" +
		"#mPPmf6Ui9OrtXcxISqPp4wPp6gPpY$i3zllizzxlkTzpe8xuBCf5lut6SpJbSWsjpBQx9U" +
		"PpB3RYG6t81dyNdyDby0JVXndmXO$zWdAqOvqY#WyVphNmBtovz6SDNSt$k2wsNdkF#pNtK" +
		"$PtxM$Stxg$TNxc$T7$X$jpzcVjJzoUCiUPZg764V#QV#4V#WR$de$mTVylVyDVy5N#9Sjp" +
		"T#6q#wFwG32z#sIVrWaTxtf2BLPKVXQo4u9JBEDdoCiXIJuqbZDs57pIqmQcD5q9mOkH7UA" +
		"wMDviVrd2czZw3xyFxFNo$fyszxf#u0#DEx$xHZIV8BKV6VPoxS6VkgTN13PjxkB6$kPclr" +
		"t9mB#H1V9qwsZoG#xbnRsSN3s7i1ro5SHlcHCP2o9cCsntNPQn$V0RZLCxdCjPsRihD6EiX" +
		"NyO767TpdiLOkNW1PBx6$wpqxXdj$McFj$kqzwTawadj$GduTTZz0tS2Vk$6y#$#0$8FIh0" +
		"2CsOZnqDmS#GwdC$LE8wZM76Vad7#uZuXsTxaL$7#Yamzhhq$9bDxjVSz$8PCxrAjQTfkzo" +
		"5#oJ3hZccQzZHeck5fAEtbVG9AhJ6bh1gXlOhZWTR9e$sZ$KxsCHAqcTJlj1Fqg9IkvAJkv" +
		"808seAoBT3tQY9eAz9ReG#3Fan3HUh1o$sQgD#Pg4WzU1bAwhSLEsWDS0tIsw1l0wu7gly#" +
		"Owqc3kslzbS3RwD8Y8jc06$Nn0M9aBegKGPK9Tg0giHuocS2PwBzJBJNTLMY3AXAj05LYV6" +
		"Ktm6Vxu1FTmBl14u0JW1E1ES3a4dWdOIwkaH9YQPLgBSAyIn6tSKOcmr8Ru1#5#H1o6J8tH" +
		"vnqavmRKITQz16bKubn45TKDv5GrMS41VjGjakvEz2tYxaROA#2NdTWDsGjnlwRk1so0xen" +
		"NArHvmGXoPZa1w3z1XDTr0Ff7k0PofmAl0wZpWX3hePkYvEY8EMG5y2tAE9e6kbt2IbboOA" +
		"JGDE0ou5gj9J4uMc0wS3rMyeAKjwQ#AW6u4t0fS3YwMF9WuQ3XmEN05KfQyc3Xf1wl#Iuw0" +
		"5m6Bffuc3HW970Xy2FWHS23nTLagvNXC7ZGAE0iu2pW8k0XgbF$Bw0yS2nm8V1ZuC700S0B" +
		"m5U0jmDd0sS21G$OkHSS1nm3d0ES11m470yS3nmBd0kS0Xm270qS3Hm4U0Zm1lqCH5zm3l0" +
		"Su7pWSE1Wv67VNRMTJlGPq7d0TS1ZGZzw6D#dUkjm9l1Qu3hWDsBaMc$1$AZQMa");

	private final Action[] actions;

	private JSScanner fScanner;

	@SuppressWarnings("unchecked")
	public JSParser() {
		super(PARSING_TABLES);
		fScanner = new JSScanner();
		report = new JSEvents();

		actions = new Action[] {
			new Action() {	// [0] Program = SourceElements.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					return new ParseRootNode(IJSParserConstants.LANGUAGE, p, _symbol_p.getStart(), _symbol_p.getEnd());
				}
			},
			new Action() {	// [1] SourceElements = SourceElements SourceElement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [2] SourceElements = SourceElement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [3] SourceElement = FunctionDeclaration
			Action.RETURN,	// [4] SourceElement = Statement
			new Action() {	// [5] FunctionDeclaration = FUNCTION.f IDENTIFIER.i FunctionParameters.p FunctionBody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSFunctionNode(i, new JSNode[] { p, b }, f.getStart(), b.getEnd());
				}
			},
			new Action() {	// [6] FunctionExpression = FUNCTION.f FunctionParameters.p FunctionBody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSFunctionNode(new JSNode[] { p, b }, f.getStart(), b.getEnd());
				}
			},
			Action.RETURN,	// [7] FunctionExpression = FunctionDeclaration
			new Action() {	// [8] FunctionParameters = LPAREN.l RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.PARAMETERS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [9] FunctionParameters = LPAREN.l FormalParameterList.p RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol r = _symbols[offset + 3];
					p.setLocation(l.getStart(), r.getEnd());return p;
				}
			},
			new Action() {	// [10] FormalParameterList = FormalParameterList.p COMMA IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					JSNode node = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());p.addChild(node);p.setLocation(p.getStart(), node.getEnd());return p;
				}
			},
			new Action() {	// [11] FormalParameterList = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode node = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNaryNode(JSNodeTypes.PARAMETERS, new JSNode[] { node }, node.getStart(), node.getEnd());
				}
			},
			new Action() {	// [12] FunctionBody = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [13] FunctionBody = LCURLY.l SourceElements.s RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, s, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [14] Statement = Block
			new Action() {	// [15] Statement = VAR.s VariableDeclarationList.l SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol e = _symbols[offset + 3];
					JSNode node = new JSNaryNode(JSNodeTypes.VAR, l, s.getStart(), e.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [16] Statement = Expression_NoLBF.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.setSemicolonIncluded(true); return e;
				}
			},
			Action.RETURN,	// [17] Statement = IfStatement
			Action.RETURN,	// [18] Statement = IterationStatement
			Action.RETURN,	// [19] Statement = ContinueStatement
			Action.RETURN,	// [20] Statement = BreakStatement
			Action.RETURN,	// [21] Statement = ReturnStatement
			Action.RETURN,	// [22] Statement = WithStatement
			Action.RETURN,	// [23] Statement = LabelledStatement
			Action.RETURN,	// [24] Statement = SwitchStatement
			Action.RETURN,	// [25] Statement = ThrowStatement
			Action.RETURN,	// [26] Statement = TryStatement
			new Action() {	// [27] Statement = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd(), true);
				}
			},
			new Action() {	// [28] Statement = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [29] Statement_NoIf = Block
			new Action() {	// [30] Statement_NoIf = VAR.s VariableDeclarationList.l SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol e = _symbols[offset + 3];
					JSNode node = new JSNaryNode(JSNodeTypes.VAR, l, s.getStart(), e.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [31] Statement_NoIf = Expression_NoLBF.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.setSemicolonIncluded(true); return e;
				}
			},
			Action.RETURN,	// [32] Statement_NoIf = IfStatement_NoIf
			Action.RETURN,	// [33] Statement_NoIf = IterationStatement_NoIf
			Action.RETURN,	// [34] Statement_NoIf = ContinueStatement
			Action.RETURN,	// [35] Statement_NoIf = BreakStatement
			Action.RETURN,	// [36] Statement_NoIf = ReturnStatement
			Action.RETURN,	// [37] Statement_NoIf = WithStatement_NoIf
			Action.RETURN,	// [38] Statement_NoIf = LabelledStatement_NoIf
			Action.RETURN,	// [39] Statement_NoIf = SwitchStatement
			Action.RETURN,	// [40] Statement_NoIf = ThrowStatement
			Action.RETURN,	// [41] Statement_NoIf = TryStatement
			new Action() {	// [42] Statement_NoIf = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd());
				}
			},
			new Action() {	// [43] Statement_NoIf = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [44] Block = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [45] Block = LCURLY.l StatementList.a RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, a, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [46] StatementList = StatementList Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [47] StatementList = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [48] VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [49] VariableDeclarationList = VariableDeclaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [50] VariableDeclarationList_NoIn = VariableDeclarationList_NoIn COMMA VariableDeclaration_NoIn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [51] VariableDeclarationList_NoIn = VariableDeclaration_NoIn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [52] VariableDeclaration = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, new JSNode() }, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [53] VariableDeclaration = IDENTIFIER.i EQUAL AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, e }, _symbol_i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [54] VariableDeclaration_NoIn = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, new JSNode() }, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [55] VariableDeclaration_NoIn = IDENTIFIER.i EQUAL AssignmentExpression_NoIn.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, e }, _symbol_i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [56] IfStatement = IF.i LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, sn, s }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [57] IfStatement = IF.i LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, s, new JSNode() }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [58] IfStatement_NoIf = IF.i LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, sn, s }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [59] IterationStatement = DO.d Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 7];
					JSNode node = new JSNode(JSNodeTypes.DO, new JSNode[] { s, e }, d.getStart(), r.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [60] IterationStatement = WHILE.w LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WHILE, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [61] IterationStatement = FOR.f LPAREN SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 6];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [62] IterationStatement = FOR.f LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 5];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [63] IterationStatement = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [64] IterationStatement = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [65] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [66] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [67] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [68] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [69] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [70] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [71] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [72] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 8];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [73] IterationStatement = FOR.f LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { i, o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [74] IterationStatement = FOR.f LPAREN VAR.v VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, new JSNode[] { i }, v.getStart(), i.getEnd()), o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [75] IterationStatement_NoIf = DO.d Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 7];
					JSNode node = new JSNode(JSNodeTypes.DO, new JSNode[] { s, e }, d.getStart(), r.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [76] IterationStatement_NoIf = WHILE.w LPAREN Expression.e RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WHILE, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [77] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 6];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [78] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 5];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [79] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [80] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [81] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [82] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [83] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [84] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [85] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [86] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [87] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [88] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 8];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [89] IterationStatement_NoIf = FOR.f LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { i, o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [90] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, new JSNode[] {i }, v.getStart(), i.getEnd()), o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [91] ContinueStatement = CONTINUE.c SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, c.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [92] ContinueStatement = CONTINUE.c IDENTIFIER.i SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, i, c.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [93] BreakStatement = BREAK.b SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, b.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [94] BreakStatement = BREAK.b IDENTIFIER.i SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, i, b.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [95] ReturnStatement = RETURN.r SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.RETURN, new JSNode(), r.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [96] ReturnStatement = RETURN.r Expression.e SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.RETURN, e, r.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [97] WithStatement = WITH.w LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WITH, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [98] WithStatement_NoIf = WITH.w LPAREN Expression.e RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WITH, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [99] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [100] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol r = _symbols[offset + 7];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, c, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [101] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY DefaultClause.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol r = _symbols[offset + 7];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, new JSNode[] { d }, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [102] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY DefaultClause.d CaseClauses.c RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol r = _symbols[offset + 8];
					
			List<JSNode> children = new ArrayList<JSNode>();
			children.add(d);
			for (JSNode statement : c) {
				children.add(statement);
			}
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [103] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c DefaultClause.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol _symbol_d = _symbols[offset + 7];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol r = _symbols[offset + 8];
					
			List<JSNode> children = new ArrayList<JSNode>();
			for (JSNode statement : c) {
				children.add(statement);
			}
			children.add(d);
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [104] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c1 DefaultClause.d CaseClauses.c2 RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c1 = _symbols[offset + 6];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSNode[] c1 = _list_c1 == null ? new JSNode[0] : (JSNode[]) _list_c1.toArray(new JSNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 7];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 8];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSNode[] c2 = _list_c2 == null ? new JSNode[0] : (JSNode[]) _list_c2.toArray(new JSNode[_list_c2.size()]);
					final Symbol r = _symbols[offset + 9];
					
			List<JSNode> children = new ArrayList<JSNode>();
			for (JSNode statement : c1) {
				children.add(statement);
			}
			children.add(d);
			for (JSNode statement : c2) {
				children.add(statement);
			}
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [105] CaseClauses = CaseClauses CaseClause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [106] CaseClauses = CaseClause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [107] CaseClause = CASE.c Expression.e COLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryAndExpressionNode(JSNodeTypes.CASE, e, c.getStart(), r.getEnd());
				}
			},
			new Action() {	// [108] CaseClause = CASE.c Expression.e COLON StatementList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					return new JSNaryAndExpressionNode(JSNodeTypes.CASE, e, s, c.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [109] DefaultClause = DEFAULT.d COLON.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.DEFAULT, d.getStart(), c.getEnd());
				}
			},
			new Action() {	// [110] DefaultClause = DEFAULT.d COLON StatementList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					return new JSNaryNode(JSNodeTypes.DEFAULT, s, d.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [111] LabelledStatement = IDENTIFIER.i COLON Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.LABELLED, new JSNode[] { id, s }, _symbol_i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [112] LabelledStatement_NoIf = IDENTIFIER.i COLON Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.LABELLED, new JSNode[] { id, s }, _symbol_i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [113] ThrowStatement = THROW.t Expression.e SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.THROW, e, t.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [114] TryStatement = TRY.t Block.b Catch.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSNode c = (JSNode) _symbol_c.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, c, new JSNode() }, t.getStart(), c.getEnd());
				}
			},
			new Action() {	// [115] TryStatement = TRY.t Block.b Finally.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, new JSNode(), f }, t.getStart(), f.getEnd());
				}
			},
			new Action() {	// [116] TryStatement = TRY.t Block.b Catch.c Finally.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, c, f }, t.getStart(), f.getEnd());
				}
			},
			new Action() {	// [117] Catch = CATCH.c LPAREN IDENTIFIER.i RPAREN Block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSNode b = (JSNode) _symbol_b.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.CATCH, new JSNode[] { id, b }, c.getStart(), b.getEnd());
				}
			},
			new Action() {	// [118] Finally = FINALLY.f Block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSNode(JSNodeTypes.FINALLY, new JSNode[] { b }, f.getStart(), b.getEnd());
				}
			},
			Action.RETURN,	// [119] PrimaryExpression = PrimaryExpression_NoLBF
			Action.RETURN,	// [120] PrimaryExpression = ObjectLiteral
			new Action() {	// [121] PrimaryExpression_NoLBF = THIS.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.THIS, t.value.toString(), t.getStart(), t.getEnd());
				}
			},
			new Action() {	// [122] PrimaryExpression_NoLBF = IDENTIFIER.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, t, _symbol_t.getStart(), _symbol_t.getEnd());
				}
			},
			Action.RETURN,	// [123] PrimaryExpression_NoLBF = Literal
			Action.RETURN,	// [124] PrimaryExpression_NoLBF = ArrayLiteral
			new Action() {	// [125] PrimaryExpression_NoLBF = LPAREN.l Expression.e RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSUnaryOperatorNode(JSNodeTypes.GROUP, e, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [126] ArrayLiteral = LBRACKET.l RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [127] ArrayLiteral = LBRACKET.l Elision.e RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [128] ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [129] ArrayLiteral = LBRACKET.l ElementList.e COMMA RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e, new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0) }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [130] ArrayLiteral = LBRACKET.l ElementList.e COMMA Elision.n RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e, n }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [131] ElementList = AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNaryNode(JSNodeTypes.ELEMENTS, new JSNode[] { e }, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [132] ElementList = Elision.n AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNaryNode(JSNodeTypes.ELEMENTS, new JSNode[] { n, e }, n.getStart(), e.getEnd());
				}
			},
			new Action() {	// [133] ElementList = ElementList.l COMMA AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					l.addChild(e);l.setLocation(l.getStart(), e.getEnd());return l;
				}
			},
			new Action() {	// [134] ElementList = ElementList.l COMMA Elision.n AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					l.addChild(n);l.addChild(e);l.setLocation(l.getStart(), e.getEnd());return l;
				}
			},
			new Action() {	// [135] Elision = Elision.e COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.addChild(new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0));return e;
				}
			},
			new Action() {	// [136] Elision = COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					return new JSNaryNode(JSNodeTypes.ELISION, new JSNode[] { new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0), new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0) }, 0, 0);
				}
			},
			new Action() {	// [137] ObjectLiteral = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.OBJECT_LITERAL, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [138] ObjectLiteral = LCURLY.l PropertyNameAndValueList.p RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.OBJECT_LITERAL, p, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [139] PropertyNameAndValueList = PropertyNameAndValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [140] PropertyNameAndValueList = PropertyNameAndValueList COMMA PropertyNameAndValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [141] PropertyNameAndValue = PropertyName.n COLON AssignmentExpression.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					return new JSNode(JSNodeTypes.NAME_VALUE_PAIR, new JSNode[] { n, v }, n.getStart(), v.getEnd());
				}
			},
			new Action() {	// [142] PropertyName = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [143] PropertyName = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [144] PropertyName = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());
				}
			},
			Action.RETURN,	// [145] MemberExpression = PrimaryExpression
			Action.RETURN,	// [146] MemberExpression = FunctionExpression
			new Action() {	// [147] MemberExpression = MemberExpression.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [148] MemberExpression = MemberExpression.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [149] MemberExpression = NEW.l MemberExpression.e Arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final JSNode a = (JSNode) _symbol_a.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, a }, l.getStart(), a.getEnd());
				}
			},
			Action.RETURN,	// [150] MemberExpression_NoLBF = PrimaryExpression_NoLBF
			new Action() {	// [151] MemberExpression_NoLBF = MemberExpression_NoLBF.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [152] MemberExpression_NoLBF = MemberExpression_NoLBF.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [153] MemberExpression_NoLBF = NEW.l MemberExpression.e Arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final JSNode a = (JSNode) _symbol_a.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, a }, l.getStart(), a.getEnd());
				}
			},
			Action.RETURN,	// [154] NewExpression = MemberExpression
			new Action() {	// [155] NewExpression = NEW.l NewExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, new JSNode() }, l.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [156] NewExpression_NoLBF = MemberExpression_NoLBF
			new Action() {	// [157] NewExpression_NoLBF = NEW.l NewExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, new JSNode() }, l.getStart(), e.getEnd());
				}
			},
			new Action() {	// [158] CallExpression = MemberExpression.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [159] CallExpression = CallExpression.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [160] CallExpression = CallExpression.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [161] CallExpression = CallExpression.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [162] CallExpression_NoLBF = MemberExpression_NoLBF.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [163] CallExpression_NoLBF = CallExpression_NoLBF.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [164] CallExpression_NoLBF = CallExpression_NoLBF.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [165] CallExpression_NoLBF = CallExpression_NoLBF.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [166] Arguments = LPAREN.l RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.ARGUMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [167] Arguments = LPAREN.l ArgumentList.a RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARGUMENTS, a, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [168] ArgumentList = ArgumentList COMMA AssignmentExpression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [169] ArgumentList = AssignmentExpression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [170] LeftHandSideExpression = NewExpression
			Action.RETURN,	// [171] LeftHandSideExpression = CallExpression
			Action.RETURN,	// [172] LeftHandSideExpression_NoLBF = NewExpression_NoLBF
			Action.RETURN,	// [173] LeftHandSideExpression_NoLBF = CallExpression_NoLBF
			Action.RETURN,	// [174] PostfixExpression = LeftHandSideExpression
			new Action() {	// [175] PostfixExpression = LeftHandSideExpression.e PostfixOperator.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					return new JSPostUnaryOperatorNode(e, o, e.getStart(), _symbol_o.getEnd());
				}
			},
			Action.RETURN,	// [176] PostfixExpression_NoLBF = LeftHandSideExpression_NoLBF
			new Action() {	// [177] PostfixExpression_NoLBF = LeftHandSideExpression_NoLBF.e PostfixOperator.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					return new JSPostUnaryOperatorNode(e, o, e.getStart(),  _symbol_o.getEnd());
				}
			},
			Action.RETURN,	// [178] PostfixOperator = PLUS_PLUS
			Action.RETURN,	// [179] PostfixOperator = MINUS_MINUS
			Action.RETURN,	// [180] UnaryExpression = PostfixExpression
			new Action() {	// [181] UnaryExpression = UnaryOperator.o UnaryExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSUnaryOperatorNode(o, e, _symbol_o.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [182] UnaryExpression_NoLBF = PostfixExpression_NoLBF
			new Action() {	// [183] UnaryExpression_NoLBF = UnaryOperator.o UnaryExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSUnaryOperatorNode(o, e, _symbol_o.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [184] UnaryOperator = DELETE
			Action.RETURN,	// [185] UnaryOperator = EXCLAMATION
			Action.RETURN,	// [186] UnaryOperator = MINUS
			Action.RETURN,	// [187] UnaryOperator = MINUS_MINUS
			Action.RETURN,	// [188] UnaryOperator = PLUS
			Action.RETURN,	// [189] UnaryOperator = PLUS_PLUS
			Action.RETURN,	// [190] UnaryOperator = TILDE
			Action.RETURN,	// [191] UnaryOperator = TYPEOF
			Action.RETURN,	// [192] UnaryOperator = VOID
			Action.RETURN,	// [193] MultiplicativeExpression = UnaryExpression
			new Action() {	// [194] MultiplicativeExpression = MultiplicativeExpression.l MultiplicativeOperator.o UnaryExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [195] MultiplicativeExpression_NoLBF = UnaryExpression_NoLBF
			new Action() {	// [196] MultiplicativeExpression_NoLBF = MultiplicativeExpression_NoLBF.l MultiplicativeOperator.o UnaryExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [197] MultiplicativeOperator = STAR
			Action.RETURN,	// [198] MultiplicativeOperator = FORWARD_SLASH
			Action.RETURN,	// [199] MultiplicativeOperator = PERCENT
			Action.RETURN,	// [200] AdditiveExpression = MultiplicativeExpression
			new Action() {	// [201] AdditiveExpression = AdditiveExpression.l AdditiveOperator.o MultiplicativeExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [202] AdditiveExpression_NoLBF = MultiplicativeExpression_NoLBF
			new Action() {	// [203] AdditiveExpression_NoLBF = AdditiveExpression_NoLBF.l AdditiveOperator.o MultiplicativeExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [204] AdditiveOperator = PLUS
			Action.RETURN,	// [205] AdditiveOperator = MINUS
			Action.RETURN,	// [206] ShiftExpression = AdditiveExpression
			new Action() {	// [207] ShiftExpression = ShiftExpression.l ShiftOperator.o AdditiveExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [208] ShiftExpression_NoLBF = AdditiveExpression_NoLBF
			new Action() {	// [209] ShiftExpression_NoLBF = ShiftExpression_NoLBF.l ShiftOperator.o AdditiveExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [210] ShiftOperator = LESS_LESS
			Action.RETURN,	// [211] ShiftOperator = GREATER_GREATER
			Action.RETURN,	// [212] ShiftOperator = GREATER_GREATER_GREATER
			Action.RETURN,	// [213] RelationalExpression = ShiftExpression
			new Action() {	// [214] RelationalExpression = RelationalExpression.l RelationalOperator.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [215] RelationalExpression_NoLBF = ShiftExpression_NoLBF
			new Action() {	// [216] RelationalExpression_NoLBF = RelationalExpression_NoLBF.l RelationalOperator.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [217] RelationalExpression_NoIn = ShiftExpression
			new Action() {	// [218] RelationalExpression_NoIn = RelationalExpression_NoIn.l RelationalOperator_NoIn.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [219] RelationalOperator_NoIn = LESS
			Action.RETURN,	// [220] RelationalOperator_NoIn = GREATER
			Action.RETURN,	// [221] RelationalOperator_NoIn = LESS_EQUAL
			Action.RETURN,	// [222] RelationalOperator_NoIn = GREATER_EQUAL
			Action.RETURN,	// [223] RelationalOperator_NoIn = INSTANCEOF
			Action.RETURN,	// [224] RelationalOperator = RelationalOperator_NoIn
			Action.RETURN,	// [225] RelationalOperator = IN
			Action.RETURN,	// [226] EqualityExpression = RelationalExpression
			new Action() {	// [227] EqualityExpression = EqualityExpression.l EqualityOperator.o RelationalExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [228] EqualityExpression_NoLBF = RelationalExpression_NoLBF
			new Action() {	// [229] EqualityExpression_NoLBF = EqualityExpression_NoLBF.l EqualityOperator.o RelationalExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [230] EqualityExpression_NoIn = RelationalExpression_NoIn
			new Action() {	// [231] EqualityExpression_NoIn = EqualityExpression_NoIn.l EqualityOperator.o RelationalExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [232] EqualityOperator = EQUAL_EQUAL
			Action.RETURN,	// [233] EqualityOperator = EXCLAMATION_EQUAL
			Action.RETURN,	// [234] EqualityOperator = EQUAL_EQUAL_EQUAL
			Action.RETURN,	// [235] EqualityOperator = EXCLAMATION_EQUAL_EQUAL
			new Action() {	// [236] BitwiseAndExpression = BitwiseAndExpression.l AMPERSAND.o EqualityExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [237] BitwiseAndExpression = EqualityExpression
			new Action() {	// [238] BitwiseAndExpression_NoLBF = BitwiseAndExpression_NoLBF.l AMPERSAND.o EqualityExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [239] BitwiseAndExpression_NoLBF = EqualityExpression_NoLBF
			new Action() {	// [240] BitwiseAndExpression_NoIn = BitwiseAndExpression_NoIn.l AMPERSAND.o EqualityExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [241] BitwiseAndExpression_NoIn = EqualityExpression_NoIn
			new Action() {	// [242] BitwiseXorExpression = BitwiseXorExpression.l CARET.o BitwiseAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [243] BitwiseXorExpression = BitwiseAndExpression
			new Action() {	// [244] BitwiseXorExpression_NoLBF = BitwiseXorExpression_NoLBF.l CARET.o BitwiseAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [245] BitwiseXorExpression_NoLBF = BitwiseAndExpression_NoLBF
			new Action() {	// [246] BitwiseXorExpression_NoIn = BitwiseXorExpression_NoIn.l CARET.o BitwiseAndExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [247] BitwiseXorExpression_NoIn = BitwiseAndExpression_NoIn
			new Action() {	// [248] BitwiseOrExpression = BitwiseOrExpression.l PIPE.o BitwiseXorExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [249] BitwiseOrExpression = BitwiseXorExpression
			new Action() {	// [250] BitwiseOrExpression_NoLBF = BitwiseOrExpression_NoLBF.l PIPE.o BitwiseXorExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [251] BitwiseOrExpression_NoLBF = BitwiseXorExpression_NoLBF
			new Action() {	// [252] BitwiseOrExpression_NoIn = BitwiseOrExpression_NoIn.l PIPE.o BitwiseXorExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [253] BitwiseOrExpression_NoIn = BitwiseXorExpression_NoIn
			new Action() {	// [254] LogicalAndExpression = LogicalAndExpression.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [255] LogicalAndExpression = BitwiseOrExpression
			new Action() {	// [256] LogicalAndExpression_NoLBF = LogicalAndExpression_NoLBF.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [257] LogicalAndExpression_NoLBF = BitwiseOrExpression_NoLBF
			new Action() {	// [258] LogicalAndExpression_NoIn = LogicalAndExpression_NoIn.l AMPERSAND_AMPERSAND.o BitwiseOrExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [259] LogicalAndExpression_NoIn = BitwiseOrExpression_NoIn
			new Action() {	// [260] LogicalOrExpression = LogicalOrExpression.l PIPE_PIPE.o LogicalAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [261] LogicalOrExpression = LogicalAndExpression
			new Action() {	// [262] LogicalOrExpression_NoLBF = LogicalOrExpression_NoLBF.l PIPE_PIPE.o LogicalAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [263] LogicalOrExpression_NoLBF = LogicalAndExpression_NoLBF
			new Action() {	// [264] LogicalOrExpression_NoIn = LogicalOrExpression_NoIn.l PIPE_PIPE.o LogicalAndExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [265] LogicalOrExpression_NoIn = LogicalAndExpression_NoIn
			Action.RETURN,	// [266] ConditionalExpression = LogicalOrExpression
			new Action() {	// [267] ConditionalExpression = LogicalOrExpression.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [268] ConditionalExpression_NoLBF = LogicalOrExpression_NoLBF
			new Action() {	// [269] ConditionalExpression_NoLBF = LogicalOrExpression_NoLBF.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [270] ConditionalExpression_NoIn = LogicalOrExpression_NoIn
			new Action() {	// [271] ConditionalExpression_NoIn = LogicalOrExpression_NoIn.l QUESTION AssignmentExpression_NoIn.t COLON AssignmentExpression_NoIn.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [272] AssignmentExpression = ConditionalExpression
			new Action() {	// [273] AssignmentExpression = LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [274] AssignmentExpression_NoLBF = ConditionalExpression_NoLBF
			new Action() {	// [275] AssignmentExpression_NoLBF = LeftHandSideExpression_NoLBF.l AssignmentOperator.o AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [276] AssignmentExpression_NoIn = ConditionalExpression_NoIn
			new Action() {	// [277] AssignmentExpression_NoIn = LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [278] AssignmentOperator = EQUAL
			Action.RETURN,	// [279] AssignmentOperator = STAR_EQUAL
			Action.RETURN,	// [280] AssignmentOperator = FORWARD_SLASH_EQUAL
			Action.RETURN,	// [281] AssignmentOperator = PERCENT_EQUAL
			Action.RETURN,	// [282] AssignmentOperator = PLUS_EQUAL
			Action.RETURN,	// [283] AssignmentOperator = MINUS_EQUAL
			Action.RETURN,	// [284] AssignmentOperator = LESS_LESS_EQUAL
			Action.RETURN,	// [285] AssignmentOperator = GREATER_GREATER_EQUAL
			Action.RETURN,	// [286] AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			Action.RETURN,	// [287] AssignmentOperator = AMPERSAND_EQUAL
			Action.RETURN,	// [288] AssignmentOperator = CARET_EQUAL
			Action.RETURN,	// [289] AssignmentOperator = PIPE_EQUAL
			new Action() {	// [290] Expression = Expression.l COMMA AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [291] Expression = AssignmentExpression
			new Action() {	// [292] Expression_NoLBF = Expression_NoLBF.l COMMA AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [293] Expression_NoLBF = AssignmentExpression_NoLBF
			new Action() {	// [294] Expression_NoIn = Expression_NoIn.l COMMA AssignmentExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [295] Expression_NoIn = AssignmentExpression_NoIn
			new Action() {	// [296] Literal = NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.NULL, n.value.toString(), n.getStart(), n.getEnd());
				}
			},
			new Action() {	// [297] Literal = TRUE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.TRUE, t.value.toString(), t.getStart(), t.getEnd());
				}
			},
			new Action() {	// [298] Literal = FALSE.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.FALSE, f.value.toString(), f.getStart(), f.getEnd());
				}
			},
			new Action() {	// [299] Literal = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());
				}
			},
			new Action() {	// [300] Literal = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [301] Literal = REGEX.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final String r = (String) _symbol_r.value;
					return new JSPrimitiveNode(JSNodeTypes.REGEX, r, _symbol_r.getStart(), _symbol_r.getEnd());
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}

	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		int start = 0;
		for (int i = 0; i < _symbols.length; ++i)
		{
			if (_symbols[i] == null && i > 0)
			{
				start = _symbols[i - 1].getEnd();
				break;
			}
		}
		Symbol term = new Symbol(JSTokens.SEMICOLON, start, token.getStart(), ";");

		Simulator sim = new Simulator();
		in.alloc(2);
		in.insert(term, token); // insert expected terminal before unexpected one
		in.rewind();
		if (sim.parse(in))
		{
			in.rewind();
			report.missingTokenInserted(term);
			return;
		}
		super.recoverFromError(token, in);
	}

	@Override
	public IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		fScanner.setSource(new String(parseState.getSource()));
		IParseNode result = (IParseNode) parse(fScanner);
		parseState.setParseResult(result);
		return result;
	}
}
