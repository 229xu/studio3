package com.aptana.editor.js.parsing;

import java.util.ArrayList;
import com.aptana.editor.js.parsing.ast.JSNodeTypes;
import com.aptana.editor.js.parsing.ast.JSAssignmentNode;
import com.aptana.editor.js.parsing.ast.JSNaryAndExpressionNode;
import com.aptana.editor.js.parsing.ast.JSLabelStatementNode;
import java.util.List;
import com.aptana.editor.js.parsing.lexer.JSTokenType;
import com.aptana.editor.js.parsing.ast.JSGetElementOperatorNode;
import com.aptana.editor.js.parsing.ast.JSBinaryOperatorNode;
import java.io.IOException;
import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.ParseRootNode;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.editor.js.parsing.ast.JSPostUnaryOperatorNode;
import com.aptana.editor.js.parsing.ast.JSNode;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.editor.js.parsing.ast.JSUnaryOperatorNode;
import com.aptana.editor.js.parsing.ast.JSGetPropertyOperatorNode;
import com.aptana.parsing.IParseState;
import com.aptana.editor.js.parsing.ast.JSPrimitiveNode;
import com.aptana.editor.js.parsing.ast.JSNaryNode;
import com.aptana.editor.js.parsing.ast.JSFunctionNode;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
public class JSParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTy56NJdzcxIt9tWFGaz13f8AXW0G75Wc814Hie8898xrK1AL94KPgAz0u2qi4kzew" +
		"zlQ9Y0mGBAYWMRhx$xZx9xIMNI$RsIFZUT#z#ipDFcVdFFFqXOKEKkPftyhdKasxdg#bMkb" +
		"QNg2vTGDTHUxg6pk6HD8$EfJeqbsRnFJISHj186iKxU3jVmPVn9NmXdy$fxETwdC7DkIcVn" +
		"RNvQLf3QtaNFyylq0PwZ5$cL$XLVfshSJjkoodq91MZv$XPVevVv9V2#3oTx#NxU0RVptFu" +
		"3XxE8x8zAaQjJO#qEkIdW6Fy8E$EZMydVdhU4NvnVZVV#4TRua$bCqsFk0cLejB0VziHVZh" +
		"lSHZ$1uxmA$8t#SO$4$5FfMbq3qsdU#a#gXoMWV#T8$oglDzX$FiTuMVomNpZdvqZ$XhM#B" +
		"cp8$nQ$9Ep#BcR8$nI$6k#ySytubU8MWCg5n5$3qVuJVb8mUAd#X7ntqyFq4pCnXtSsmc#L" +
		"fV$YXd$c9Y#r0H#FqVnj#5$uuh$GNg87gRBW3$8sVgZKOpun#NZoQd07#fi$T4yzkEd6JIP" +
		"Xb5tgW3ynOxwlwRcZn#Vpm7#CaVuLRLY3iR$ZS1VvQZzEsaby#p$yVcsGtNWhtM4tr4h4tV" +
		"xLwBAm7$C4VuGBIrUV3uFkzSEtkfi$z4gP#5JKZP#ZQWxmCOeAu2Fl7dZKnSTdnwbTRHUnw" +
		"UDj8asqrOB$bIwd6g1cia0QcLProDtW6tO0OmHnnsqAXO$fz3Fj9e6ayQtKN##WJ9WQGxDX" +
		"gKLMhtGEtGfqYjf5MSwzlDIO9bZteYRQm8hsmz#YdhHRTINxjAgqWqqbiPG2loyddhG9JIQ" +
		"xg0xQHmreDFePiT#9DbUepq9n3HRmEm9lOScId#qS5UwXUlJJpG8FQ6t$b4TawznWidNSaF" +
		"fL$1eZHbH1Ms$moaoVKKjw6bxoDoITj4nnyZ$0FabEptCn1vwcQz73p#Uc1xc00UpnZ9w#6" +
		"vZBB$67NACvT$e3M36kFaaSYIZXQjn9Qv0xm3pnSB2v5R6MFu4c35kM0cUiLchbo$MhSeMv" +
		"g$S5QFgKlgSZlAKF3oeRNZWYtMJIcYS5tDF7iO3u9SlrkqfePZJSDCOnG$mdOcRAx4n#L9#" +
		"b1VmG$GrFrWuc7mv$SuhqAg856kmBzRDC06OzGpC6xaJFqa1sWT47JF6RT0v9bzbO3w3$UO" +
		"NQi5$y33w0PWnRe09m6nlO8QeXLPMIq9$$gZvW1dZrcSBimM#RK43MSC9euLMGlNV4GhXX7" +
		"4LzQ7cT14De6U16UEcPmjpWO7QGiS3pZOwpaJ27VWYoA$IM$GjpQT3t94E0pF6xSvsd2rmJ" +
		"ch1p5uyVPn4spYPd#0gk4LNfp$vPgx1ft5tOCQuqTd737#v5f$EZRWEfNDV7i9BUGrlu2ty" +
		"DdyCp1YtE4UOZVbigiZDS5FudFVnZ$mx$wDfMb0h3SmODpUxc5ecjy1ju0BAvDPKWzjGBRw" +
		"IhzDIjKfQTJh2O$akdi2JW1dZjcRhd32Pfr8cqAP2ccHOdyNpW3EF7#P7U9ryBNkfc7mbNm" +
		"8pnWtD3gPy8NlaS$cFV2QVoYVoiNma7ye7yZw$oU$8Y$m1VyYVo1R#J3O3CyQjp5QSNyec$" +
		"axcymzodsoKnsI3h9TrygYivNcoHbRBAbafosM5bW7C63SnEvXQEVbJ$j1ErMhXTbnVQqXv" +
		"VtpylXDC2U6izprc$LtKcCumpdgdqvdq1FNWCxBFUWsf4JMXi#XisWB4P7gTTjCBT82UeW$" +
		"fKzfBU#Wl#bSaKPOIPaV$t9HGQvqJQcrxGgtjf5vyeA3M#3KYVfm$vI$uFJh0R#ZM#Di4jx" +
		"zhnxNZsd7jk7PSEmMoawZzwsJR1q#sk5mxhXtNZcl7ffre$pfMCihFn3lGrNG#BQUoT8fDd" +
		"OlZrlaOw#z$r9tul1ntv0aHgO$e4VeirptwGdkeMkr2YcwfeMFzzCxXkVvJnHNWlsWry5n9" +
		"g#WeNHcFPxo9YrC$hPfkbA$DrKABiWGkmQTmIIx5fRaCb#LoN9vJEGq5pnHQRri$hsJzj2f" +
		"YV4V#j2gyJxyB$#VIcqNXANUnuob$HQHv#QOYQTCl2$pxBxg5yeREDqNYwK5RlV#UeVD7aN" +
		"ZwjorFlp16pAb5CauRsEbzhcZet5eadlQtDQDkDtJw58cdWsrvkj3GMLuadYwnvUbUGsTra" +
		"NYwtfQdVnewcul4qxUYMT3I8txod#F37pbUSQpMSlysLVHwwWp5HukadNwsqwDQig5pg4Wy" +
		"$TxMQcxg$5OadXwFmzE$Yy9JZUrxgXKl4ay3SNXQgaWyBMzZBqzJEXLjefQ8mzCoSUYqZ4E" +
		"dNHmwtUBG6Hg7pgGuT9ROr#5YSUXKZaEdgdqTxRGuT1ePElPcuB8yDiRmPxnDYtVdQt5Ymd" +
		"rSc70V5zjVoVBuN94mI#ydoXBVaZ1BlH9cQM32B2rAcAML2RFqTS8i7KwOfMC9ioI9igIb9" +
		"CoIlPNGhUlMTUkwTVzRwXRuTiDrJmf$tRfkNRUkM$T$iQx#a#hSd#YvCJzQ1IuUJJTdRlIV" +
		"LEUHMpmQKivSEnRfQcC$we0TAYnTXzQvWMwaZjI9RgARgJDrqV$thD4#vs3NweFMx4VzQG0" +
		"DDFutxH0QYlrBlVb2jUaOjFGujFbuca0JQH9k#PDfYde$Y6Qy7sI6yJzqmwWpiHFEfZdO4S" +
		"t$4JmlkqopU9HAQOxnrqJ5BxpuwzcClxd5eyMqn37#UKKSVxC2nbyNC$KCpDN6c9jDBR9J$" +
		"0L57FyZSSI$B87nBotY#1SNEFuin2leoWJ6loZE#4ypzedc9mZV6dziNueg$ike3LsErVZ4" +
		"h3$X#FFpvCIiF$d7tmqtkUuuDpZ5trZ4#Ene$6zqZE#9sV$v##4KVvEZzc$g6B#s8$m59sZ" +
		"$MLRW5S0fVbsCmAKWBrh2QrdNS#y0veXRI2iilisdbRI5jj9Zj9Psq3fQ3aj#2i2IXbFr4o" +
		"2cP4f1sgcV3O1bUc36tG1OOJ$M04V3MFOQN4VS33#3L8oAKmawXKfIAV9H4lnqweVzDNf50" +
		"Z7D5Z2VPW$LHiJwETnBjOoUq5k$VW8mhq8BrxOz8pHQxHXPZuPj8zTC4785MyXjgHryTOuS" +
		"HjBl55bZMUzXVIodOjP5ZkMLg5EO8xcRSUehR4nzBASMAcRMwfKup5h6g6g0PttqPomF2ZD" +
		"EtQT4tDxjOEeZMnz5XOUvIgqbZnOQfjdRUgJr2mcpbiAi3SJ2mimQFMRh5XwcsP#UXFPdMl" +
		"PtFKuOQTdzjv2suOHH0zyw#DO2JpocZhSGyVJ1Fh8UqdB8DHHc3QpnwnAEkSQOyuod1WGTU" +
		"JD6JdFSGckhI4z4d5bV3JWQqCvJKOQ$9mvp4T2QuTlqX6CsnMrW0SxpZ#3qlWndwgL6c#hV" +
		"XKRCpH9mMmbZBi3eqR7cGsfgMAzjjAs6ML8Ff$gQ#6h6Ct6ODVFuil6iO9n4pLJYC5bPh9q" +
		"BLOj8FPv0pBgO6HxOtsGyQqkU7yUOb7tMqsyd#bbFFtz4dlLA6x$xMexAKoeGqz7E5VNto5" +
		"8LgahLA8EgKoQTca1B2R9Zj4yjrrfHjRzhnxNZsd7jk7PSEwuTruvhnxNZslb$RAVWFvE#p" +
		"VWDvrxKkz1qDFYjgJlnz1ntv0qHgLJQhaUPeyxqapcwI4zpUAxtgcRS$$Idth$rQMTSdjMb" +
		"Ulg$CnfMhyhLGjcjI2se9PrF5r0hkf0keelf4cfDbnPc6#ReEVlZs$KqFqzjMIZS6UIiJLr" +
		"FtTvtFNKzFTbcbEJunETfJYlPrdBzDbKUzTJfWjQwFPeuJvtqgEkfwsbXxUM5xQchu#h4hM" +
		"Dh1b9QNZjZzaofureis4gMXwKQhYNNaclfvBRardNhkdNTklyrTUsS74y6VzswRbsthbltV" +
		"x4kwaGvlqRDZVtHVr8TJJTdRlIVLEUHMoygKevSMnP9E$qkunqymR#8YbNHPIlXSmxe0YMt" +
		"K$n#ehIvuJgPJKoUTj3a#Zlaqrj2c0i#1$nPeihwE$05$30HLo2geiU$5xoIyHSvgCePqBi" +
		"T73xvEe9tHlfjyA5Xd2htcDptQ4u$yoFeD5KsbX3vbobvX$Bt9fIVX$HRA5jkqLa8keN8an" +
		"hEg$YNoVqhb8rlb8rGk8wdfSN6KgJHjjwppNInLehtCdcIJzav5jRnTidjVzKIm5nfocN#e" +
		"tnOfJ2wAxrPg7UgALFNWhTDnMiL7nkPpojYwtaEHAQJqYqnxCvTtxz7uQnM$DteTdsfeDzW" +
		"hrf1OuZKB$Q0uZijldLHV1BQg2byMOloBv4UILHSCykArqHw3GXZjMexrFa2yb6pBBaSycv" +
		"37dIAjr5vROdAOgoMkv6eKXNazpVpotHIvKDK#cQL$iJavHvJllGrUSgZi7qdR7y56xDKtX" +
		"#GrVZqmtvLzAt$Qz03Q9jZokvEPVT5fVDaEDwgY2DG7ZOGI$4GqfY3IMkLlMEGxm5NVlWjO" +
		"pTm9gWng3IeIJW$ynfbzqCxVH7MJzQWUn1OM0EgwJXbmCk7otrgFbIhZx9KvOjgpy1Po6y5" +
		"ZhKe2Mj7jVwGqrJPG0k61xJB4ii0r4L$1mQfz62a7m4V2be9UHCozsASTuNy2kOmrY5VISX" +
		"xm3D0tI1Z72QF0pr1b962l3QWnP0Zraga6qUc0xk8IbG7NO9##Ltrpn5LXXXAz5O#VuYnSo" +
		"7ICrHPPSXRL7sCgV8te1phOecFLJd6POc$LJaQij9zHATKKMLNGrRhIqQRi2#PM4ipkYgT6" +
		"f27eovYpxWNV0luCl1ju8#3xm3VZJP1ksHy1muVClv6pD#2zXdlnoOj7VM#0I4lW35P7MqM" +
		"#1Eyfl83Ua7efM3C1gkfFAo1rSypvV8Ru3TmJxbDbRM7hDRsb3THzWdIQcm6he7ylfB$WGt" +
		"K3NH0tXzcNfcFa8Vs2LnBLB92P1y4TM8GvhNV1#uny$tD8Nj1TK7rG1XpmGQWqq0DGOr0fu" +
		"Em9mKn7uAO3y4ce4x06Wkiwu3L0kcpmJ56WXYN9IU3NmpgWZhOymBNGyPO2M9V2Q9ETSpn0" +
		"EPSIV2WhZiDQyT6ebJCYqh$8Xzj7km1ceww63i1y98OUy6U8AmxfJ2NWxsGZpuhXVKhs1jn" +
		"O8#jZ75Q2lqRx8CoZ8LI4o3tHTa5i0qVAcFybLg5l7uedm7v3SYOF$uHA8DEgP#HnZm9O4y" +
		"lZJaV70Z2lkqVZVtyVDJ1UbCQyo#8kHFGPQntmI4eNuUoxKYZFOBwV9e96UCeE0o4ELRzO#" +
		"IzX3pCgo36MoRQklgFo7iPULW7WYDK$s6D3Rw0VBtUYw2NBVttYhK$LTvhQaoZtOBBmTF2P" +
		"LwqfwzrRXtlqImPPuxtm$dfMyCodQlotWxdbTscykQPtDDOsLFSTvpql#f6IOUGX$NLWtML" +
		"gs5#OAopVfv16pBMxkGbOPifJvcSv#VqCp#2Zje$ItzgYM5$MDPmbYhzcrK7yHxNppUHTie" +
		"qY4nNuDYu7ama3yQRvmqLjvf7ll4vx5ICRQTCwx3iNHjPvkjliQFEazxc#RL9MAVqiqgtRM" +
		"I#zqXiFM$N7EbRBNAUVOHORb5ulGhgenr2UwXnaZGu3$mvEaV$RbJrrYk#prBddIXwFvWyk" +
		"PebJipZijZxoc9TIkvOCF$AZegIDrlPdXFEIzvjARV8tkqczwkpKT90bQvZgNz0jGNcLGhs" +
		"tdAPuJ8$rXi$pX3#zYhzMdG$$HRCf5jDNc5YGMACRg$SLcLZeUAMCwP$iQeJTTpYB96Ywds" +
		"0EYEZrw4nM0kBHUPvXaQclPOxKHBsWi158EmzoTZR$JhT31aO0Tob0fUXxLg3w#Sdd3DInf" +
		"jr0$gvv6YaNN$3tFuaOTzBWQw$cvaEj0sNfTnfQHVizIaxB6M7BMMunvNR3njrBLZTmt9vd" +
		"9FyYonbnlg6iRqjd9VyBXwDmsbDhS6QMgCzYlicAx#nlmMm$YPZFmxWR9rI75pVkyTbKOvs" +
		"L$fimKXHzuB0c70UgthbiQ#Nrp5AXyi2LrXYmlWCJBQKxRAKlQNoiivnw8$o#qmv676EjBJ" +
		"9j6ZvyH3E1HawH$l#ec9lgB0jQt1gioXwmrNz0POyt9rJiNwaleF4nd1#Ma3L$IMSnmqjii" +
		"L66jOUjkYoHISD$PSs2lriqTMikZYtQXPTJSMKeluj8WtdgdG$neT5tsFHJyz4sgBliM2dT" +
		"pQvLxMFFhVIHweyYur0zfgRaz2cQNcNLNXFyKFAzzCDHd9S$f5VvR0X$m9wMrx7yxNGJz9M" +
		"hY8A$HZw7K#SCaAuJGbEje8TMag1SBEGMY2SP0MdLcaccFzoAVGkbpPoiLma5qehkK3EbvR" +
		"IGfhBDT9UEXiuM3D2duUEoQr6gdS8zqPTbbw2qxNW92auzSgreP3qbJxYbScY$WwIu7OWy4" +
		"TmMXMS9aEVoJ49o2IPA1Dal543uGdEY89pemmoSWPAIIadPQMCb0vz5Femz47e$T1x8Snnm" +
		"ToKiJ9AXaj5gIoLfBfaI3MfAbMajjIJkb976ihfqaYQo3bojfmbc8U2DLCmn#KE6I4ZPPYC" +
		"LfuDbf$aHpaa1#K7EI3xPPzyBz$9juAxYxm7UbSmQaEVakKZBqUaNiYMdhVaxWBXh2jBGKj" +
		"0k0yAxaMoCBl60fc8vmoB3ix4CW$q86Ykp37oPibCWzzhFASBxWGoHRB$QgLC3HsIA#KA#7" +
		"Wmj3#qB$HzwBlGjw5lGb#7zeQ#2dqP#YAq9$GhIlyqwuSEozNIJZeQkZXtoWsXFv1xN6unS" +
		"d2Ba1xIIUzNwIvTGxXrY4Tw2axIuXVihtAAbC0pJN2$ang2MvFK5zoBv0p1BKZEbQQ2dKGk" +
		"aTqo6$m1mPr17WOzPDX$JddzhF5y9ZkAfutdKohrfF74RJhqIUW7QGj#88Gn7ZeAmlrES5#" +
		"JP13MQy6THpBbL4cLOf8a5FfRnVbpw8YozgQyYkShAlMuyTofKZkCvtPvGwMtwcY6j2tqiR" +
		"mKdc7obZboyJJ6YY5PnafUd$3eoBF6nFngnFV9YWbIsspfNqlvKK4BoL$IGRe9Lb2voSmFO" +
		"Ovo8tg264Jq66aWfXMalqlGIpUI1yIq4VaR8Jzk4DCcCj$pqXUoIRgiMT85etkpIN#ZgcP9" +
		"5upwaFukNm#j9lqTYaoR8Myc$Trb#lkks7Z3vHh8gy1NWTz1oI0VtGT#fq4#K9AITKgnS9t" +
		"y5gvJ8Bjy1lWCwC#0lYdhb6BXElajNAT0TlaO#3m6Feq57mi#3dmS#5smUJze0knEG5sJKX" +
		"JvQINgwMyorD#1jH1zj0xfTP37Wnu0JGHDoYOlROEjzQXp0tHqQf#BFAI$eRw3mNNoWdoq7" +
		"MNRaRyTUTkHjm7o1kHT3tuzydP0tW6#1RGLSXPTbqrUaCUWeKWFHNge8Nke8z8TOMSo#6Jm" +
		"cxF92$BGCCWcUK4UumrOYy1t6iJKIT4GHPqDqcWA#1JmnU0wtMIGHbF1fuBhRqRAZxeOvA5" +
		"#uFt0zVUyPb5NWppK7xm$#39mdMuno4C3m0U0FmAUHTqCyj10y87WCy5dWiy7pqdB5Trga8" +
		"S6WGy2dmK#2tm1k9Mw8wyx#73muU2pmMU3zm3l0Ju2V0Ju7F0vuBU1wxzJC19y9FXSyBdWF" +
		"S5xWey27mN#8FY3fF#bM0#8QJ3uOF27m1y2xssGZwQ1JmEV1puF$7Rmsr57VqEp$fRaXy4V" +
		"1jVVpcc7faD7$ttrqU2ZmTU2hmM$9W#w#$y01Uz6KG==");

	// suppresses the parser error reporting and lets the custom error recovery mechanism handles it
	private static class JSEvents extends Events
	{

		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}
	
	private final IRecoveryStrategy[] recoveryStrategies;
	private JSScanner fScanner;
	
	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, token, in))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (this.top != -1)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		fScanner.setSource(new String(parseState.getSource()));
		IParseNode result = (IParseNode) parse(fScanner);
		parseState.setParseResult(result);
		return result;
	}

	private final Action[] actions;

	public JSParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Program = SourceElements.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					return new ParseRootNode(IJSParserConstants.LANGUAGE, p, _symbol_p.getStart(), _symbol_p.getEnd());
				}
			},
			new Action() {	// [1] Program = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					return new ParseRootNode(IJSParserConstants.LANGUAGE, new Symbol[0], 0, 0);
				}
			},
			new Action() {	// [2] SourceElements = SourceElements SourceElement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [3] SourceElements = SourceElement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [4] SourceElement = Statement
			new Action() {	// [5] FunctionDeclaration = FUNCTION.f IDENTIFIER.i FunctionParameters.p FunctionBody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSFunctionNode(new JSNode[] { new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd()), p, b }, f.getStart(), b.getEnd());
				}
			},
			new Action() {	// [6] FunctionExpression = FUNCTION.f FunctionParameters.p FunctionBody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSFunctionNode(new JSNode[] { new JSNode(), p, b }, f.getStart(), b.getEnd());
				}
			},
			Action.RETURN,	// [7] FunctionExpression = FunctionDeclaration
			new Action() {	// [8] FunctionParameters = LPAREN.l RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.PARAMETERS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [9] FunctionParameters = LPAREN.l FormalParameterList.p RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol r = _symbols[offset + 3];
					p.setLocation(l.getStart(), r.getEnd());return p;
				}
			},
			new Action() {	// [10] FormalParameterList = FormalParameterList.p COMMA IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					JSNode node = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());p.addChild(node);p.setLocation(p.getStart(), node.getEnd());return p;
				}
			},
			new Action() {	// [11] FormalParameterList = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode node = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNaryNode(JSNodeTypes.PARAMETERS, new JSNode[] { node }, node.getStart(), node.getEnd());
				}
			},
			new Action() {	// [12] FunctionBody = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [13] FunctionBody = LCURLY.l SourceElements.s RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, s, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [14] Statement = Block
			Action.RETURN,	// [15] Statement = FunctionDeclaration
			new Action() {	// [16] Statement = VAR.s VariableDeclarationList.l SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol e = _symbols[offset + 3];
					JSNode node = new JSNaryNode(JSNodeTypes.VAR, l, s.getStart(), e.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [17] Statement = Expression_NoLBF.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.setSemicolonIncluded(true); return e;
				}
			},
			Action.RETURN,	// [18] Statement = IfStatement
			Action.RETURN,	// [19] Statement = IterationStatement
			Action.RETURN,	// [20] Statement = ContinueStatement
			Action.RETURN,	// [21] Statement = BreakStatement
			Action.RETURN,	// [22] Statement = ReturnStatement
			Action.RETURN,	// [23] Statement = WithStatement
			Action.RETURN,	// [24] Statement = LabelledStatement
			Action.RETURN,	// [25] Statement = SwitchStatement
			Action.RETURN,	// [26] Statement = ThrowStatement
			Action.RETURN,	// [27] Statement = TryStatement
			new Action() {	// [28] Statement = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd(), true);
				}
			},
			new Action() {	// [29] Statement = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [30] Statement_NoIf = Block
			Action.RETURN,	// [31] Statement_NoIf = FunctionDeclaration
			new Action() {	// [32] Statement_NoIf = VAR.s VariableDeclarationList.l SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol e = _symbols[offset + 3];
					JSNode node = new JSNaryNode(JSNodeTypes.VAR, l, s.getStart(), e.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [33] Statement_NoIf = Expression_NoLBF.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.setSemicolonIncluded(true); return e;
				}
			},
			Action.RETURN,	// [34] Statement_NoIf = IfStatement_NoIf
			Action.RETURN,	// [35] Statement_NoIf = IterationStatement_NoIf
			Action.RETURN,	// [36] Statement_NoIf = ContinueStatement
			Action.RETURN,	// [37] Statement_NoIf = BreakStatement
			Action.RETURN,	// [38] Statement_NoIf = ReturnStatement
			Action.RETURN,	// [39] Statement_NoIf = WithStatement_NoIf
			Action.RETURN,	// [40] Statement_NoIf = LabelledStatement_NoIf
			Action.RETURN,	// [41] Statement_NoIf = SwitchStatement
			Action.RETURN,	// [42] Statement_NoIf = ThrowStatement
			Action.RETURN,	// [43] Statement_NoIf = TryStatement
			new Action() {	// [44] Statement_NoIf = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd());
				}
			},
			new Action() {	// [45] Statement_NoIf = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [46] Block = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [47] Block = LCURLY.l StatementList.a RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, a, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [48] StatementList = StatementList Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [49] StatementList = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [50] VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [51] VariableDeclarationList = VariableDeclaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [52] VariableDeclarationList_NoIn = VariableDeclarationList_NoIn COMMA VariableDeclaration_NoIn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [53] VariableDeclarationList_NoIn = VariableDeclaration_NoIn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [54] VariableDeclaration = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, new JSNode() }, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [55] VariableDeclaration = IDENTIFIER.i EQUAL AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, e }, _symbol_i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [56] VariableDeclaration_NoIn = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, new JSNode() }, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [57] VariableDeclaration_NoIn = IDENTIFIER.i EQUAL AssignmentExpression_NoIn.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, e }, _symbol_i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [58] IfStatement = IF.i LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, sn, s }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [59] IfStatement = IF.i LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, s, new JSNode() }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [60] IfStatement_NoIf = IF.i LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, sn, s }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [61] IterationStatement = DO.d Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 7];
					JSNode node = new JSNode(JSNodeTypes.DO, new JSNode[] { s, e }, d.getStart(), r.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [62] IterationStatement = WHILE.w LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WHILE, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [63] IterationStatement = FOR.f LPAREN SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 6];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [64] IterationStatement = FOR.f LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 5];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [65] IterationStatement = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [66] IterationStatement = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [67] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [68] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [69] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [70] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [71] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [72] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [73] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [74] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 8];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [75] IterationStatement = FOR.f LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { i, o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [76] IterationStatement = FOR.f LPAREN VAR.v VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, new JSNode[] { i }, v.getStart(), i.getEnd()), o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [77] IterationStatement_NoIf = DO.d Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 7];
					JSNode node = new JSNode(JSNodeTypes.DO, new JSNode[] { s, e }, d.getStart(), r.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [78] IterationStatement_NoIf = WHILE.w LPAREN Expression.e RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WHILE, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [79] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 6];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [80] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 5];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [81] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [82] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [83] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [84] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [85] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [86] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [87] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [88] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [89] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [90] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 8];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [91] IterationStatement_NoIf = FOR.f LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { i, o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [92] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, new JSNode[] {i }, v.getStart(), i.getEnd()), o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [93] ContinueStatement = CONTINUE.c SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, c.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [94] ContinueStatement = CONTINUE.c IDENTIFIER.i SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, i, c.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [95] BreakStatement = BREAK.b SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, b.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [96] BreakStatement = BREAK.b IDENTIFIER.i SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, i, b.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [97] ReturnStatement = RETURN.r SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.RETURN, new JSNode(), r.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [98] ReturnStatement = RETURN.r Expression.e SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.RETURN, e, r.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [99] WithStatement = WITH.w LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WITH, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [100] WithStatement_NoIf = WITH.w LPAREN Expression.e RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WITH, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [101] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [102] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol r = _symbols[offset + 7];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, c, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [103] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY DefaultClause.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol r = _symbols[offset + 7];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, new JSNode[] { d }, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [104] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY DefaultClause.d CaseClauses.c RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol r = _symbols[offset + 8];
					
			List<JSNode> children = new ArrayList<JSNode>();
			children.add(d);
			for (JSNode statement : c) {
				children.add(statement);
			}
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [105] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c DefaultClause.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol _symbol_d = _symbols[offset + 7];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol r = _symbols[offset + 8];
					
			List<JSNode> children = new ArrayList<JSNode>();
			for (JSNode statement : c) {
				children.add(statement);
			}
			children.add(d);
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [106] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c1 DefaultClause.d CaseClauses.c2 RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c1 = _symbols[offset + 6];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSNode[] c1 = _list_c1 == null ? new JSNode[0] : (JSNode[]) _list_c1.toArray(new JSNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 7];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 8];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSNode[] c2 = _list_c2 == null ? new JSNode[0] : (JSNode[]) _list_c2.toArray(new JSNode[_list_c2.size()]);
					final Symbol r = _symbols[offset + 9];
					
			List<JSNode> children = new ArrayList<JSNode>();
			for (JSNode statement : c1) {
				children.add(statement);
			}
			children.add(d);
			for (JSNode statement : c2) {
				children.add(statement);
			}
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [107] CaseClauses = CaseClauses CaseClause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [108] CaseClauses = CaseClause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [109] CaseClause = CASE.c Expression.e COLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryAndExpressionNode(JSNodeTypes.CASE, e, c.getStart(), r.getEnd());
				}
			},
			new Action() {	// [110] CaseClause = CASE.c Expression.e COLON StatementList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					return new JSNaryAndExpressionNode(JSNodeTypes.CASE, e, s, c.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [111] DefaultClause = DEFAULT.d COLON.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.DEFAULT, d.getStart(), c.getEnd());
				}
			},
			new Action() {	// [112] DefaultClause = DEFAULT.d COLON StatementList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					return new JSNaryNode(JSNodeTypes.DEFAULT, s, d.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [113] LabelledStatement = IDENTIFIER.i COLON Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.LABELLED, new JSNode[] { id, s }, _symbol_i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [114] LabelledStatement_NoIf = IDENTIFIER.i COLON Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.LABELLED, new JSNode[] { id, s }, _symbol_i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [115] ThrowStatement = THROW.t Expression.e SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.THROW, e, t.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [116] TryStatement = TRY.t Block.b Catch.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSNode c = (JSNode) _symbol_c.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, c, new JSNode() }, t.getStart(), c.getEnd());
				}
			},
			new Action() {	// [117] TryStatement = TRY.t Block.b Finally.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, new JSNode(), f }, t.getStart(), f.getEnd());
				}
			},
			new Action() {	// [118] TryStatement = TRY.t Block.b Catch.c Finally.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, c, f }, t.getStart(), f.getEnd());
				}
			},
			new Action() {	// [119] Catch = CATCH.c LPAREN IDENTIFIER.i RPAREN Block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSNode b = (JSNode) _symbol_b.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.CATCH, new JSNode[] { id, b }, c.getStart(), b.getEnd());
				}
			},
			new Action() {	// [120] Finally = FINALLY.f Block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSNode(JSNodeTypes.FINALLY, new JSNode[] { b }, f.getStart(), b.getEnd());
				}
			},
			Action.RETURN,	// [121] PrimaryExpression = PrimaryExpression_NoLBF
			Action.RETURN,	// [122] PrimaryExpression = ObjectLiteral
			new Action() {	// [123] PrimaryExpression_NoLBF = THIS.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.THIS, t.value.toString(), t.getStart(), t.getEnd());
				}
			},
			new Action() {	// [124] PrimaryExpression_NoLBF = IDENTIFIER.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, t, _symbol_t.getStart(), _symbol_t.getEnd());
				}
			},
			Action.RETURN,	// [125] PrimaryExpression_NoLBF = Literal
			Action.RETURN,	// [126] PrimaryExpression_NoLBF = ArrayLiteral
			new Action() {	// [127] PrimaryExpression_NoLBF = LPAREN.l Expression.e RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSUnaryOperatorNode(JSNodeTypes.GROUP, e, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [128] ArrayLiteral = LBRACKET.l RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [129] ArrayLiteral = LBRACKET.l Elision.e RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [130] ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [131] ArrayLiteral = LBRACKET.l ElementList.e COMMA RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e, new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0) }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [132] ArrayLiteral = LBRACKET.l ElementList.e COMMA Elision.n RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e, n }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [133] ElementList = AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNaryNode(JSNodeTypes.ELEMENTS, new JSNode[] { e }, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [134] ElementList = Elision.n AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNaryNode(JSNodeTypes.ELEMENTS, new JSNode[] { n, e }, n.getStart(), e.getEnd());
				}
			},
			new Action() {	// [135] ElementList = ElementList.l COMMA AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					l.addChild(e);l.setLocation(l.getStart(), e.getEnd());return l;
				}
			},
			new Action() {	// [136] ElementList = ElementList.l COMMA Elision.n AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					l.addChild(n);l.addChild(e);l.setLocation(l.getStart(), e.getEnd());return l;
				}
			},
			new Action() {	// [137] Elision = Elision.e COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.addChild(new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0));return e;
				}
			},
			new Action() {	// [138] Elision = COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					return new JSNaryNode(JSNodeTypes.ELISION, new JSNode[] { new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0), new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0) }, 0, 0);
				}
			},
			new Action() {	// [139] ObjectLiteral = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.OBJECT_LITERAL, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [140] ObjectLiteral = LCURLY.l PropertyNameAndValueList.p RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.OBJECT_LITERAL, p, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [141] PropertyNameAndValueList = PropertyNameAndValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [142] PropertyNameAndValueList = PropertyNameAndValueList COMMA PropertyNameAndValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [143] PropertyNameAndValue = PropertyName.n COLON AssignmentExpression.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					return new JSNode(JSNodeTypes.NAME_VALUE_PAIR, new JSNode[] { n, v }, n.getStart(), v.getEnd());
				}
			},
			new Action() {	// [144] PropertyName = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [145] PropertyName = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [146] PropertyName = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());
				}
			},
			Action.RETURN,	// [147] MemberExpression = PrimaryExpression
			Action.RETURN,	// [148] MemberExpression = FunctionExpression
			new Action() {	// [149] MemberExpression = MemberExpression.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [150] MemberExpression = MemberExpression.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [151] MemberExpression = NEW.l MemberExpression.e Arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final JSNode a = (JSNode) _symbol_a.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, a }, l.getStart(), a.getEnd());
				}
			},
			Action.RETURN,	// [152] MemberExpression_NoLBF = PrimaryExpression_NoLBF
			new Action() {	// [153] MemberExpression_NoLBF = MemberExpression_NoLBF.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [154] MemberExpression_NoLBF = MemberExpression_NoLBF.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [155] MemberExpression_NoLBF = NEW.l MemberExpression.e Arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final JSNode a = (JSNode) _symbol_a.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, a }, l.getStart(), a.getEnd());
				}
			},
			Action.RETURN,	// [156] NewExpression = MemberExpression
			new Action() {	// [157] NewExpression = NEW.l NewExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, new JSNode() }, l.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [158] NewExpression_NoLBF = MemberExpression_NoLBF
			new Action() {	// [159] NewExpression_NoLBF = NEW.l NewExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, new JSNode() }, l.getStart(), e.getEnd());
				}
			},
			new Action() {	// [160] CallExpression = MemberExpression.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [161] CallExpression = CallExpression.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [162] CallExpression = CallExpression.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [163] CallExpression = CallExpression.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [164] CallExpression_NoLBF = MemberExpression_NoLBF.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [165] CallExpression_NoLBF = CallExpression_NoLBF.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [166] CallExpression_NoLBF = CallExpression_NoLBF.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [167] CallExpression_NoLBF = CallExpression_NoLBF.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [168] Arguments = LPAREN.l RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.ARGUMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [169] Arguments = LPAREN.l ArgumentList.a RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARGUMENTS, a, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [170] ArgumentList = ArgumentList COMMA AssignmentExpression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [171] ArgumentList = AssignmentExpression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [172] LeftHandSideExpression = NewExpression
			Action.RETURN,	// [173] LeftHandSideExpression = CallExpression
			Action.RETURN,	// [174] LeftHandSideExpression_NoLBF = NewExpression_NoLBF
			Action.RETURN,	// [175] LeftHandSideExpression_NoLBF = CallExpression_NoLBF
			Action.RETURN,	// [176] PostfixExpression = LeftHandSideExpression
			new Action() {	// [177] PostfixExpression = LeftHandSideExpression.e PostfixOperator.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					return new JSPostUnaryOperatorNode(e, o, e.getStart(), _symbol_o.getEnd());
				}
			},
			Action.RETURN,	// [178] PostfixExpression_NoLBF = LeftHandSideExpression_NoLBF
			new Action() {	// [179] PostfixExpression_NoLBF = LeftHandSideExpression_NoLBF.e PostfixOperator.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					return new JSPostUnaryOperatorNode(e, o, e.getStart(),  _symbol_o.getEnd());
				}
			},
			Action.RETURN,	// [180] PostfixOperator = PLUS_PLUS
			Action.RETURN,	// [181] PostfixOperator = MINUS_MINUS
			Action.RETURN,	// [182] UnaryExpression = PostfixExpression
			new Action() {	// [183] UnaryExpression = UnaryOperator.o UnaryExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSUnaryOperatorNode(o, e, _symbol_o.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [184] UnaryExpression_NoLBF = PostfixExpression_NoLBF
			new Action() {	// [185] UnaryExpression_NoLBF = UnaryOperator.o UnaryExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSUnaryOperatorNode(o, e, _symbol_o.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [186] UnaryOperator = DELETE
			Action.RETURN,	// [187] UnaryOperator = EXCLAMATION
			Action.RETURN,	// [188] UnaryOperator = MINUS
			Action.RETURN,	// [189] UnaryOperator = MINUS_MINUS
			Action.RETURN,	// [190] UnaryOperator = PLUS
			Action.RETURN,	// [191] UnaryOperator = PLUS_PLUS
			Action.RETURN,	// [192] UnaryOperator = TILDE
			Action.RETURN,	// [193] UnaryOperator = TYPEOF
			Action.RETURN,	// [194] UnaryOperator = VOID
			Action.RETURN,	// [195] MultiplicativeExpression = UnaryExpression
			new Action() {	// [196] MultiplicativeExpression = MultiplicativeExpression.l MultiplicativeOperator.o UnaryExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [197] MultiplicativeExpression_NoLBF = UnaryExpression_NoLBF
			new Action() {	// [198] MultiplicativeExpression_NoLBF = MultiplicativeExpression_NoLBF.l MultiplicativeOperator.o UnaryExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [199] MultiplicativeOperator = STAR
			Action.RETURN,	// [200] MultiplicativeOperator = FORWARD_SLASH
			Action.RETURN,	// [201] MultiplicativeOperator = PERCENT
			Action.RETURN,	// [202] AdditiveExpression = MultiplicativeExpression
			new Action() {	// [203] AdditiveExpression = AdditiveExpression.l AdditiveOperator.o MultiplicativeExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [204] AdditiveExpression_NoLBF = MultiplicativeExpression_NoLBF
			new Action() {	// [205] AdditiveExpression_NoLBF = AdditiveExpression_NoLBF.l AdditiveOperator.o MultiplicativeExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [206] AdditiveOperator = PLUS
			Action.RETURN,	// [207] AdditiveOperator = MINUS
			Action.RETURN,	// [208] ShiftExpression = AdditiveExpression
			new Action() {	// [209] ShiftExpression = ShiftExpression.l ShiftOperator.o AdditiveExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [210] ShiftExpression_NoLBF = AdditiveExpression_NoLBF
			new Action() {	// [211] ShiftExpression_NoLBF = ShiftExpression_NoLBF.l ShiftOperator.o AdditiveExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [212] ShiftOperator = LESS_LESS
			Action.RETURN,	// [213] ShiftOperator = GREATER_GREATER
			Action.RETURN,	// [214] ShiftOperator = GREATER_GREATER_GREATER
			Action.RETURN,	// [215] RelationalExpression = ShiftExpression
			new Action() {	// [216] RelationalExpression = RelationalExpression.l RelationalOperator.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [217] RelationalExpression_NoLBF = ShiftExpression_NoLBF
			new Action() {	// [218] RelationalExpression_NoLBF = RelationalExpression_NoLBF.l RelationalOperator.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [219] RelationalExpression_NoIn = ShiftExpression
			new Action() {	// [220] RelationalExpression_NoIn = RelationalExpression_NoIn.l RelationalOperator_NoIn.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [221] RelationalOperator_NoIn = LESS
			Action.RETURN,	// [222] RelationalOperator_NoIn = GREATER
			Action.RETURN,	// [223] RelationalOperator_NoIn = LESS_EQUAL
			Action.RETURN,	// [224] RelationalOperator_NoIn = GREATER_EQUAL
			Action.RETURN,	// [225] RelationalOperator_NoIn = INSTANCEOF
			Action.RETURN,	// [226] RelationalOperator = RelationalOperator_NoIn
			Action.RETURN,	// [227] RelationalOperator = IN
			Action.RETURN,	// [228] EqualityExpression = RelationalExpression
			new Action() {	// [229] EqualityExpression = EqualityExpression.l EqualityOperator.o RelationalExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [230] EqualityExpression_NoLBF = RelationalExpression_NoLBF
			new Action() {	// [231] EqualityExpression_NoLBF = EqualityExpression_NoLBF.l EqualityOperator.o RelationalExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [232] EqualityExpression_NoIn = RelationalExpression_NoIn
			new Action() {	// [233] EqualityExpression_NoIn = EqualityExpression_NoIn.l EqualityOperator.o RelationalExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [234] EqualityOperator = EQUAL_EQUAL
			Action.RETURN,	// [235] EqualityOperator = EXCLAMATION_EQUAL
			Action.RETURN,	// [236] EqualityOperator = EQUAL_EQUAL_EQUAL
			Action.RETURN,	// [237] EqualityOperator = EXCLAMATION_EQUAL_EQUAL
			new Action() {	// [238] BitwiseAndExpression = BitwiseAndExpression.l AMPERSAND.o EqualityExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [239] BitwiseAndExpression = EqualityExpression
			new Action() {	// [240] BitwiseAndExpression_NoLBF = BitwiseAndExpression_NoLBF.l AMPERSAND.o EqualityExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [241] BitwiseAndExpression_NoLBF = EqualityExpression_NoLBF
			new Action() {	// [242] BitwiseAndExpression_NoIn = BitwiseAndExpression_NoIn.l AMPERSAND.o EqualityExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [243] BitwiseAndExpression_NoIn = EqualityExpression_NoIn
			new Action() {	// [244] BitwiseXorExpression = BitwiseXorExpression.l CARET.o BitwiseAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [245] BitwiseXorExpression = BitwiseAndExpression
			new Action() {	// [246] BitwiseXorExpression_NoLBF = BitwiseXorExpression_NoLBF.l CARET.o BitwiseAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [247] BitwiseXorExpression_NoLBF = BitwiseAndExpression_NoLBF
			new Action() {	// [248] BitwiseXorExpression_NoIn = BitwiseXorExpression_NoIn.l CARET.o BitwiseAndExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [249] BitwiseXorExpression_NoIn = BitwiseAndExpression_NoIn
			new Action() {	// [250] BitwiseOrExpression = BitwiseOrExpression.l PIPE.o BitwiseXorExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [251] BitwiseOrExpression = BitwiseXorExpression
			new Action() {	// [252] BitwiseOrExpression_NoLBF = BitwiseOrExpression_NoLBF.l PIPE.o BitwiseXorExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [253] BitwiseOrExpression_NoLBF = BitwiseXorExpression_NoLBF
			new Action() {	// [254] BitwiseOrExpression_NoIn = BitwiseOrExpression_NoIn.l PIPE.o BitwiseXorExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [255] BitwiseOrExpression_NoIn = BitwiseXorExpression_NoIn
			new Action() {	// [256] LogicalAndExpression = LogicalAndExpression.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [257] LogicalAndExpression = BitwiseOrExpression
			new Action() {	// [258] LogicalAndExpression_NoLBF = LogicalAndExpression_NoLBF.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [259] LogicalAndExpression_NoLBF = BitwiseOrExpression_NoLBF
			new Action() {	// [260] LogicalAndExpression_NoIn = LogicalAndExpression_NoIn.l AMPERSAND_AMPERSAND.o BitwiseOrExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [261] LogicalAndExpression_NoIn = BitwiseOrExpression_NoIn
			new Action() {	// [262] LogicalOrExpression = LogicalOrExpression.l PIPE_PIPE.o LogicalAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [263] LogicalOrExpression = LogicalAndExpression
			new Action() {	// [264] LogicalOrExpression_NoLBF = LogicalOrExpression_NoLBF.l PIPE_PIPE.o LogicalAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [265] LogicalOrExpression_NoLBF = LogicalAndExpression_NoLBF
			new Action() {	// [266] LogicalOrExpression_NoIn = LogicalOrExpression_NoIn.l PIPE_PIPE.o LogicalAndExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [267] LogicalOrExpression_NoIn = LogicalAndExpression_NoIn
			Action.RETURN,	// [268] ConditionalExpression = LogicalOrExpression
			new Action() {	// [269] ConditionalExpression = LogicalOrExpression.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [270] ConditionalExpression_NoLBF = LogicalOrExpression_NoLBF
			new Action() {	// [271] ConditionalExpression_NoLBF = LogicalOrExpression_NoLBF.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [272] ConditionalExpression_NoIn = LogicalOrExpression_NoIn
			new Action() {	// [273] ConditionalExpression_NoIn = LogicalOrExpression_NoIn.l QUESTION AssignmentExpression_NoIn.t COLON AssignmentExpression_NoIn.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [274] AssignmentExpression = ConditionalExpression
			new Action() {	// [275] AssignmentExpression = LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [276] AssignmentExpression_NoLBF = ConditionalExpression_NoLBF
			new Action() {	// [277] AssignmentExpression_NoLBF = LeftHandSideExpression_NoLBF.l AssignmentOperator.o AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [278] AssignmentExpression_NoIn = ConditionalExpression_NoIn
			new Action() {	// [279] AssignmentExpression_NoIn = LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [280] AssignmentOperator = EQUAL
			Action.RETURN,	// [281] AssignmentOperator = STAR_EQUAL
			Action.RETURN,	// [282] AssignmentOperator = FORWARD_SLASH_EQUAL
			Action.RETURN,	// [283] AssignmentOperator = PERCENT_EQUAL
			Action.RETURN,	// [284] AssignmentOperator = PLUS_EQUAL
			Action.RETURN,	// [285] AssignmentOperator = MINUS_EQUAL
			Action.RETURN,	// [286] AssignmentOperator = LESS_LESS_EQUAL
			Action.RETURN,	// [287] AssignmentOperator = GREATER_GREATER_EQUAL
			Action.RETURN,	// [288] AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			Action.RETURN,	// [289] AssignmentOperator = AMPERSAND_EQUAL
			Action.RETURN,	// [290] AssignmentOperator = CARET_EQUAL
			Action.RETURN,	// [291] AssignmentOperator = PIPE_EQUAL
			new Action() {	// [292] Expression = Expression.l COMMA AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [293] Expression = AssignmentExpression
			new Action() {	// [294] Expression_NoLBF = Expression_NoLBF.l COMMA AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [295] Expression_NoLBF = AssignmentExpression_NoLBF
			new Action() {	// [296] Expression_NoIn = Expression_NoIn.l COMMA AssignmentExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [297] Expression_NoIn = AssignmentExpression_NoIn
			new Action() {	// [298] Literal = NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.NULL, n.value.toString(), n.getStart(), n.getEnd());
				}
			},
			new Action() {	// [299] Literal = TRUE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.TRUE, t.value.toString(), t.getStart(), t.getEnd());
				}
			},
			new Action() {	// [300] Literal = FALSE.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.FALSE, f.value.toString(), f.getStart(), f.getEnd());
				}
			},
			new Action() {	// [301] Literal = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());
				}
			},
			new Action() {	// [302] Literal = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [303] Literal = REGEX.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final String r = (String) _symbol_r.value;
					return new JSPrimitiveNode(JSNodeTypes.REGEX, r, _symbol_r.getStart(), _symbol_r.getEnd());
				}
			}
		};


		fScanner = new JSScanner();
		report = new JSEvents();
		
		recoveryStrategies = new IRecoveryStrategy[] {
			new IRecoveryStrategy() {
				public boolean recover(IParser parser, Symbol token, TokenStream in) throws IOException
				{
					boolean result = false;
	
					Symbol term = new Symbol(JSTokenType.SEMICOLON.getIndex(), token.getStart(), token.getStart() - 1, ";");
					Simulator sim = new Simulator();
	
					in.alloc(2);
					in.insert(term, token);
					in.rewind();
	
					if (sim.parse(in))
					{
						result = true;
	
						in.rewind();
	
						report.missingTokenInserted(term);
					}
	
					return result;
				}
			},
			new IRecoveryStrategy() {
				public boolean recover(IParser parser, Symbol token, TokenStream in) throws IOException
				{
					Symbol lastSymbol = getLastSymbol();
					int type = lastSymbol.getId();
					boolean result = false;
	
					if (type == JSTokenType.DOT.getIndex() || type == JSTokenType.NEW.getIndex())
					{
						Symbol term1 = new Symbol(JSTokenType.IDENTIFIER.getIndex(), token.getStart(), token.getStart() - 1, "");
						Symbol term2 = new Symbol(JSTokenType.SEMICOLON.getIndex(), token.getStart(), token.getStart() - 1, ";");
	
						Simulator sim = new Simulator();
	
						in.alloc(3);
						in.insert(token);
						in.insert(term2);
						in.insert(term1);
						in.rewind();
	
						if (sim.parse(in))
						{
							result = true;
							
							in.rewind();
							
							report.missingTokenInserted(term1);
							report.missingTokenInserted(term2);
						}
					}
	
					return result;
				}
			},
			new IRecoveryStrategy() {
				public boolean recover(IParser parser, Symbol token, TokenStream in) throws IOException
				{
					Symbol lastSymbol = getLastSymbol();
					boolean result = false;
					
					if (top >= 2)
					{
						Symbol symbol1 = _symbols[top - 2];
						Symbol symbol2 = _symbols[top - 1];
						                          
						if (lastSymbol.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
						{
							Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), token.getStart(), token.getStart() - 1, "");
							Simulator sim = new Simulator();
							
							in.alloc(2);
							in.insert(term, token);
							in.rewind();
			
							if (sim.parse(in))
							{
								result = true;
			
								in.rewind();
			
								report.missingTokenInserted(term);
							}
						}
					}
					
					return result;
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
