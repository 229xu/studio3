package com.aptana.editor.js.parsing;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import beaver.Action;
import beaver.Parser;
import beaver.ParsingTables;
import beaver.Scanner;
import beaver.Symbol;

import com.aptana.editor.js.parsing.ast.JSAssignmentNode;
import com.aptana.editor.js.parsing.ast.JSBinaryOperatorNode;
import com.aptana.editor.js.parsing.ast.JSFunctionNode;
import com.aptana.editor.js.parsing.ast.JSGetElementOperatorNode;
import com.aptana.editor.js.parsing.ast.JSGetPropertyOperatorNode;
import com.aptana.editor.js.parsing.ast.JSLabelStatementNode;
import com.aptana.editor.js.parsing.ast.JSNaryAndExpressionNode;
import com.aptana.editor.js.parsing.ast.JSNaryNode;
import com.aptana.editor.js.parsing.ast.JSNode;
import com.aptana.editor.js.parsing.ast.JSNodeTypes;
import com.aptana.editor.js.parsing.ast.JSPostUnaryOperatorNode;
import com.aptana.editor.js.parsing.ast.JSPrimitiveNode;
import com.aptana.editor.js.parsing.ast.JSUnaryOperatorNode;
import com.aptana.editor.js.parsing.lexer.JSTokens;
import com.aptana.parsing.IParseState;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.ast.ParseRootNode;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings("nls")
public class JSParser extends Parser implements IParser {

	// suppresses the parser error reporting and lets the custom error recovery mechanism handles it
	private static class JSEvents extends Events
	{

		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTu5DKMFcTsDydk0f84I49DY87Gn5we5WIneY8gHP2YA5L0m8984K44fLWG4AL9xw1" +
		"OiJuh5knYRrYneMBPy$wPkTcTJJQRpCwIyBqtkz#P$zRpdtFx9M52bB#S7#GJw78QoETIFx" +
		"f03r5JEecwqNbqFXtFOsaUdK1Dw0wQpRVGQ1f3O#aQtiPR#Kpkp1tv53wHSzZFpJYFst8hF" +
		"fOB#L5QGIjv1p$9Jz5QMiVFydFy7tw1SxaBdyDfz31LeIVuSNw2d#Pd8lmydM$b6JoJR#Ev" +
		"V1sFvZ5XYwfG9zCYhGdvAU2OFyWxI$BRyP#UTCHVbLyhq$zhBVvdyL6cHNmCfLC6#5znn9$" +
		"3kntwlyiHVnt#h4p$Py7$gJIDRg7fT2lDe7gHCFY$SCJVWBzswF$NZlZp#Tio$PzJpFy2g$" +
		"zyYIF#nlo3C$#vhoF#TFwvJF$d6$uhHgq5rOpoVu0Z$bRyM$dyf#PH$jz6jzCipCPjVAKJV" +
		"gqfxu$h$xYujZG2$n17$f$E$oJa$vrq5zrDdS5$bRFrHwCu$eylmv93mJ$AsVgZUUpxJpDf" +
		"2brD$Qas#1Svwlz6cZznVZuU$8iTyJVGgZWO$nU3VxcZzk#XLI#r$oUKsGuDmR$I4NztBJF" +
		"XzgzBzS2$pX7$I2qxKNvkWzrh6szsjlzezOhuAINCNn1p1rWVOmNmaRTqVkgjyzCgMarhT7" +
		"vQJnje8sssy4#bCwWnfBKCfvCjwthq3h05Eu0nuhYhLjzYvytq8pr08qZZosWeNqHvq3INv" +
		"a3JKgrPw3Kw3V5bj9pp7Tjv6hZCCM$upOt05RQ37w4hw38QJ3Tg3UWYke76KHhil906K4Uw" +
		"bgwZwsayjQ33g9TZEr9ihz6U97AQBM3sXDv3asGOMhWFNShDwGUw2ZsXj$u#dPFFTyB95t1" +
		"B6Lf#RuqPKHzjlyqfCtrCxUXHUypSddRGduwP$mRpCtPwc8azz2nVY1v#A3azp04E5erbzF" +
		"1DnbX#dhiM6yk$q8lWZ7FpIUP8HWldSbskJQ#2y#cAukIJZR7y3ZZZtB2IF6EBLYzVl5kLB" +
		"SwVkGz6rMdq0UtZcqkneD2mm1Vl9fLKFq$bo$bg7WQxVF5kJqdbd8QRnZLyEr#VlBaIdvDF" +
		"urMyWE#YJ$dEYk7aC#XNNefMXQTOWttnReP9u6ncS5xCFVXX2j1NODGvuzm6dNFosGRdOzX" +
		"lzb8x$fslfc$06US6c0JEympE4BNJQcWfwC$lDHyuuzpwR76sm$SSo73MSC9efrLJ$VSRXN" +
		"32E9i6KLlgGCFeSN36kUdPubnWiBRJ#S2pXVvb8k6kt07X$z3Bz3dDf##uE$q4pZYtEzj#j" +
		"iCvgHqpU$7qSGfjuLJUplLnYsv8Vt0lBk33k3yuuzpex7D6ljoOZ#33kGdby60UoVVp2bxB" +
		"c$WLVXkSSMvnZZYFvkEe3hV6JU43$eg$vr$vRqtJWbe6EEFStEnoQldS3hU1aoYVEr41dqw" +
		"D#IpkfcLfTRM6z1lVm3VoH9uCpZYtDLldX2aybVB1DXMXoORssJmFFFFuRhw7LyjdyYbLaK" +
		"$aOt36kQ7PuPIFv4FPBH$8#$AUl2lloDlobhmfk$WbVbMUuLty9hyZc$azsGJEEBSoMtv#9" +
		"1lv2rd0tyXCsI3hPPsibJMoMbRnF5afA#G1MIvBPPcM1yuuDp4xd5fD#LF#q0xL6kDst5nh" +
		"IQL$VFo64quHdFM#nAo$aOwc8usptX5q56sd0Nna#ApNaWwdO#XOEeusWJ6LNg2Tz1JjeKV" +
		"eJNgNFg7Tj9$#IPeU$TCpgTekIQgshKdLzc3osf$tb5SFFq$43$6x$26$JdluHLqFVvxaVd" +
		"Jrk7fSFQuULu#hfqBthuDj7ppO$7Brk7fSFQuUctfY$TjOzHW$4UzAvzA9j8Hgq24swvoQS" +
		"9stiVw#hsx4ROhTa2T6nTwYU#Yz4hVeK#onQeKLvDtzHXthvyfYbki$KrmAtAiLuBcCbjC#" +
		"EYiHotW3LwKXMgwkb2yeqKBt5WMu6X$2rJcTCpYJQt1DhiLPd8sCnogijwsVvuf#LXKrlgD" +
		"$LXNPfr#3$NVGIvLXAVUsOob$JAHvkMUbjEb7vVxj5rr3BQFEPvLYwRUsUlzreyxlbMBfNx" +
		"Oi$T0OCOTMoZXjOQVtkOvHfr#bM3hKremQQDGPL2cMZh1bwKAZpf9AiVG#MvP#OjHve58iN" +
		"MFBqZ#CEXihnTANOsdGSg9#xb$imsyvNd6isah#BbNiSkeCnVigfPr#jDEZMgfHvxjAiVHB" +
		"MwkvMUUNIh7qtmGi$QioBDNOlgLQrKgnD920fUcLOcaj6tjvjgfJnoPhjGGipKoWJli4wdH" +
		"9e4xV1EgCIg3Ev0Jgt6U$3bT9e4wz1Eeqi5z7Eoo1EeSRTUpDmCMbR8oHpmIR6cygK#EafD" +
		"kuCEasBhA$afNoEJDfcjv8bYQ#D6cQhaYQfk59qtHlqZGjIvgcJvEcwQUaQVepQPeaMPgqj" +
		"AHfihSIkcNTicvPj#p$IjbotswuwK5XhrlMBUkMTSl#FvRLVr9TyXCxDUv7gyrLOzKjdXhx" +
		"9zMbf5QDnLGyrOv6EjVOZxfYXug4kg5rBgABgJlre9xKYowXtlh$dJNQvtZiMeFGcaDeA0s" +
		"ZuSR$fHr9ex1$gVTUg3OTXvOUZpQVG1Df4at6BNyAtQpU3g8PRmUPQVp$t0ZhBEo4SsWkTa" +
		"Jp$mFF2#Tf5ekoADin$ugO$1NdVpER$hUrMBI8xdFCtwQI$MzTJl#ROgOUYRbwDEPcAqlOA" +
		"V#2IlR$dWJyNvn4$##lPFyNbTl$8iOpwQma#dzlWluVPkmJRGyGlzN$#BPKbl#TwNGw0wln" +
		"WLb$8lwNPSc1MN$AzhylRdBzSMvmoh##aldPqVXVxvZV4xV$oxR3AVy6H#tVoZ5$eIF#1GT" +
		"e$rbSxXN0ANzJZC3x8LwqXDUohfVS0SmHjv2MMcoRJyje4sscTRIIjj5gMW9DVWf0auPJzN" +
		"O8Kogb8UxKpXRWCYqm$Mu1heWTAy2ZOInx3TGPDyBE85MXgbID3g7gb4u#Ie6TJksmlqOlJ" +
		"IAdsGBcq#oXGdYidyEzrDZe2RtrcoU1ysoqSA7j6Q7H0uwPTM$ODdEZ937NjiLy3dM1hSwP" +
		"8qpwdQ9eBEizh8$bBCowwB6y36KgSYJtDKvz5SsfZ#Mi2kKiMhsInzdO65Kjy6oE$endGKN" +
		"wgTkKZDkx7KvzPEkZgE8ubwkrP5M5SPgzhNlQl88u6olEGZ1M56VHw35Rj#8upVxq9BK$iy" +
		"FVDJXXP8VxRo5jmGcZ0Dyc#3O69fzJvri8VmPX7rc3q1A42nHd0TRurKddN67CUSPJ0uFEl" +
		"14ZforkeONAqmFXPz5N0uy6jZRAoyZtm77U2xRM#BOwu9ojS1jOWFFyFJYzByQP#dwZJVNl" +
		"GiFdracuhKGu5s3qw5pp4MfbQ2yqsbR3B6c6KtqZV3NZcJpEHgLysNZMDawYPYnvdAmq5fP" +
		"WrQ9Y3oMHiobcXWVwDnZFGYdruvYJmcSz$NQYd$NqyqVqMI$3#DtNcbIBii2OWtQkexz5bk" +
		"fJ0ygbF6f8#NHeilGONZLsjLLM#xjwN3sk7bUFgyVLu#fnzRXwN3sk7bUFZPz8NsRyVlCLT" +
		"6M5rT5WjwPknDEBtP3NHiMoQAlkPR4oqmzcxw8jBMQvtgkQSO$Kdth$DgS74xAiAJNJ$vNH" +
		"q7fsYHOAjoAre$Pq8fr49zCfr85EfOxKYKwho3OirdFsnxThQLcMsj9GiJF8MPkwbhgzxrh" +
		"gMdgmpIWfzadCqk9QmjfA$2vLAUNKwO9MkZsQF4kTzAXhgMjfHUtb5MsfMyUjat0TMpEGia" +
		"lR6SCpfOchiNmhMIcQ2bnDhYPNqy6joIthbdNBkcN$PyhQEJaU3FQwPTsoRbctxFzZMPI9S" +
		"NwDcHh$e$#aEbRTugcnVr9TIcgpc4p5Kcrf9Es86uqty5JPJXJShuUjWi$na9DKk8l2suYo" +
		"vqRAv1zjOlOt9kflaCzfXy0Tm3d0nudgwNyRI81xYRWsKNqVJFq4MCVuUnnK$mZK6mZiHEJ" +
		"h3ko5#2l0aH6U#jDCzAqgRcTPWZgjb8v5HFx5AhnLsTiJ#MqGVmbvIonr5a8k9V9aHTBg$6" +
		"cYVwdIyQdI4OgKyRItwBWVyVr4tkFCU9Lw2ZkOcE9JUlw8rF7sBcb$WwhWN6Q6CzzJDYnN7" +
		"FrLlTaebs#6gK$vswPELuNZejDvQVnwdZtHyPGSYmyxIvRtxrOyokuwhyRMwyk2$09zkUNr" +
		"8Rf#bK4APrjiwwrmCjhe1DYo4laV8ZwMg2gRULKB45y1UHzbpa4PFN#VcPTQ4sa3aFOHodL" +
		"MQIXJusAYcXSHrQs7z25cUcPtbJzInNkg#3icrbohR1biOjegwBuEkZ#6ZbagxNU4rVZqWw" +
		"F1BE2daDlHDceCPcvJUfzMTHwE#DlW0Q90BUZ0lAlwB#AFWM#bqlSdmhS0rwcuPUm6Ze8S3" +
		"Sc071D9ppzFwTrbfoyYzLCrrFq6N5W36a02cKIvDIFvlYjCp6s6l2nbor25noBz923MeXIi" +
		"7Rb34CvMUSCj71x83eilmr1s4l0g5H#1#3pWACWoXDSZyHECypu8FuivZ7N8LntX3u1vaBu" +
		"8$moTuo5O7$EmhlbEXs0DoQiNxL$UKT7nm0wYQj1HxLJqow#gVtvJUV2Xcl8tzKsCdPCHdw" +
		"7oC8wgRLJbwnFLkX3vboFjBPNV1U7zAZyNURSI7QBMbC2v2AkrEgzpn9PyhALvQlodOOpdN" +
		"Oso6u3JWPk0MAC2Mu0F0hS1iUxgVu4cxtCWRCZ3#kL3sFULyNPiqd9GxZC8qW8OamqF0Vu1" +
		"B51sV86z1FNIi1u5SrKQT3HiROPhhO7T6s7h09Lt7i9gRK$36bptRSJL70cSZ$3hAlmtTC3" +
		"7G5UagNcPYVPhYFO9N41KFRp#c7b1NHZI2EFE1$IOwVws27iXJI4ORy7ca1QGmo0j8OT3i1" +
		"y5ZuHWFWGn7uB7G7g0Qnouke5Brt4S4Fj34EEo#ar0z7MmDyfWpmkWtu8OAq7iAq6CeuPOR" +
		"mAOSzM1GUoDmMbOEzOHPS6#kl2hEjeyYFKbY3vf#0JA0gjZx0NXM$0oedIiFy4ha8x#JiVw" +
		"5RmIVhJ7Veena8x#3Gv2tWo49o0y67cOBrcminviIiTO3#fpPYR2Bo0y5FbZa0STwJyWZda" +
		"Im9wUaOxmS0ZsRV#rsCzr$NgwxZlcJW1hJmRMek18vAz67iPC1jeZgCydh4yP64T1ZAtWFV" +
		"3XBQGzWpJCg#1eZC4cIFiEQOXdO1q8Zb7zjnlXfv3#7F1foBEM$dlEsfygxNarflL#NGAqx" +
		"CrUp6TVfv9rlFkAmZXpl159pzaK2TC9AktbI5gDpIhjRXCzwfpZLUZ3kahO3rBWbnTd70$M" +
		"LKP$Q1ZhZB6ZeGqPxPLwNqHdsYCcylpYTfObgAFspuntB3vy5GbhTP7tixKE$FrNFzz4wyb" +
		"i7XslNGQl1nF9Wx7YUL7vhUQHRq8nFRNZwydi60bxLqRd#OPQz1IrSzkosYHI9#CnLVViw7" +
		"JlR$7hUViKY$UpX4lj8$ZIH$4DBA#DTWJjeSP9oeXI#EVeYFvThygjKMWP3vanpc2PUqnCp" +
		"RNukHLZFH#2DIsrU$digp4sHjfifTjoDqZTQSb$nSffeh#NidkuYZUnbFzQjGNcLLeQpaqD" +
		"8tb#$Jo4CuHVdKlypyUsqs$XJ#bdOks9vV4njhwQcvIE1GgtMRWMgJ9jOjVDJLNbTg7CcDX" +
		"bIDzVgaIdUKP5nxsZ8k6KLYZV0O9rFXLxkryNx0Ufu0ZWVXVeZBR3dIg0CqRW58Gdc6K37H" +
		"7U5wtNtxAaFIbO#zDGrz$NZ0VEYUIbNMzf5$H7cgKjqdwovBqCmTd1tzJ2rJyIheLpalzUI" +
		"zwxEc9iRucafRw6nz6HkARM26sBQYE5lYdARknl0Qo$gTYF0zV37joV0ZT0nXT9iNPNzTd2" +
		"aQOfdyT5qbYLgzKQCbe$9qVo0cTQVC9U6PXYoTjXoNj9fVsbUD0VjRuqmy4mVxHz$ccnqXC" +
		"Hd0kCkO$stQjyRwcuBMjmLgiOzQvMvOTPqd0coi8v86id8kiZwTb#LNPl98rRMi8M7TbOUz" +
		"XIborriY#1u8wcMUfgrhgR4RVKrPHFQT#gV9ohSh1sU2prFPRwEGqHjzJtMBXprDhaLUsZp" +
		"wqSTMxnMdG4mcjkSK6RPfUUL$irXSfMxGW3I4BoZ$mYFnlXdo0xvKKyNmZzA5q4TyxG3w7V" +
		"yFpB#0SLaXH85GXkR587KWZ1ALOmSwMDu0mgdL7lJ3b3Eigfqa5EaPFb93bHsaixwIhdIs#" +
		"31#qSsXtQB$sDsA0Gxa1wMAuKd3e5Drp1YLQwXKI6o63noSqoHLcBqwl07laLiXTQtfVz4f" +
		"IRPB9C4kDlH0lM7C6vK71Eb156obMIBhMafjIGpD3ReRT2RuPsXTu8lOuSD8MCbsjbZDIL#" +
		"b9FygMXv4ckD90cqboQILCvN8wK8#HOEK6Eb#C4UvPWNWlMJRbUnierCbgkKvQDb1$b1$bU" +
		"lfDlvHlP8r$BL$AbV26ujyWRaDS5gqeewgzMotDHiQV3eQSigKz2SFQKnH2SUUK#2Ew44lv" +
		"Rph9G9kDvcwNEV0ZEnN8Nv4wvmqYR8xCDd64yRnNS3sIgJ0$NcHRwNiwMis3ZTw4zeQz3Nu" +
		"M#37qH#ZpqMUZJq2UXZqCVXJuC$OBSFytoeP$bF3bNUXXrkqCk3k5M5Wf9NoC5DmcvJ7hg$" +
		"Ie3vD8GJeRYbO62MxC4n8zdTS5DJd84zrDf98tnR26u4ybHWXkGj9BMWXr5EichCXSuIx36" +
		"2UxJShUXVuUo#WdZ#NZOYyUCvwCgzeZnV1XslHlwLd2R3NqJmXWF$Gxv1paQ1FDLga6o88T" +
		"AWMHBLKaL3lsj$DmRsgUqlIpFu$aV5TjkF1zIiGUDvpPvISMtw6n6Q6le7NasCiFa5NFauc" +
		"cC5IDa6IkbVIAZezGIayigaTYdo2U4keH3$rhoVnUqaFmb5qW$wODGBpCzzAk#2jDsObf76" +
		"eHfAUbl4VJInUI1CAr7#dg47pA4QGEPRtWPZB0fUbYpnCidjuP5VvUgPecNJmQH$XPV3pr0" +
		"#jiJcJOYl97qjvRfRxfYuzsMAn1U3bmEl8vI8JwQ0RpU41yaHOLrIREWBduBwX88vyy4paJ" +
		"zcQXlXdL9iw0kVWlg4WZdZuFDus3J3S0RWEE1uu4tGkTja8dGEn5bJKbJugTbAAU$mr1$#z" +
		"L2zD5gn5SZF05oEsGIP79OlBG5kjQWp4Meeyjv9SH3#hlfkngeYnVYewt8suhqhKZRYhIr2" +
		"Az5seN02v6s3U5jm4sGpGWNIRUmU24UGqOXFWhnKKROGzqHxmuzKu1JWBt2ueLuw6g4JV52" +
		"FCQxh#u5FcW8Kmyb8vLSOeX6DmDl1Yu2wjBJ48sc0gS2zNSYbIMz3V7G4E0GeFw6roBfOuY" +
		"7XWA70XS3TRdK40yD0mu3tWCiahw6U6WuS3Xm5d0MS3wmk2nHqiyG3rq5l0eu6pWRk01ebV" +
		"v8wmyS3HmDd0ES0nm0700S0nm3d0kS2xmCgFy#mLZWME0Tm3k0bmCl1ru3l0Pu9$1Eqlz6h" +
		"0V2D08u0dWNy2xWbORuQ1fm6d0US1vm870WokZlPjRVZtmty6wW$bvEEp8TTVJVLRyMU2rm" +
		"9N0byFnIvAR$0g94H1W=");

	private final Action[] actions;

	private JSScanner fScanner;

	@SuppressWarnings("unchecked")
	public JSParser() {
		super(PARSING_TABLES);
		fScanner = new JSScanner();
		report = new JSEvents();

		actions = new Action[] {
			new Action() {	// [0] Program = SourceElements.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					return new ParseRootNode(IJSParserConstants.LANGUAGE, p, _symbol_p.getStart(), _symbol_p.getEnd());
				}
			},
			new Action() {	// [1] SourceElements = SourceElements SourceElement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [2] SourceElements = SourceElement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [3] SourceElement = Statement
			new Action() {	// [4] FunctionDeclaration = FUNCTION.f IDENTIFIER.i FunctionParameters.p FunctionBody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSFunctionNode(new JSNode[] { new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd()), p, b }, f.getStart(), b.getEnd());
				}
			},
			new Action() {	// [5] FunctionExpression = FUNCTION.f FunctionParameters.p FunctionBody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSFunctionNode(new JSNode[] { new JSNode(), p, b }, f.getStart(), b.getEnd());
				}
			},
			Action.RETURN,	// [6] FunctionExpression = FunctionDeclaration
			new Action() {	// [7] FunctionParameters = LPAREN.l RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.PARAMETERS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [8] FunctionParameters = LPAREN.l FormalParameterList.p RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol r = _symbols[offset + 3];
					p.setLocation(l.getStart(), r.getEnd());return p;
				}
			},
			new Action() {	// [9] FormalParameterList = FormalParameterList.p COMMA IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					JSNode node = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());p.addChild(node);p.setLocation(p.getStart(), node.getEnd());return p;
				}
			},
			new Action() {	// [10] FormalParameterList = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode node = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNaryNode(JSNodeTypes.PARAMETERS, new JSNode[] { node }, node.getStart(), node.getEnd());
				}
			},
			new Action() {	// [11] FunctionBody = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [12] FunctionBody = LCURLY.l SourceElements.s RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, s, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [13] Statement = Block
			Action.RETURN,	// [14] Statement = FunctionDeclaration
			new Action() {	// [15] Statement = VAR.s VariableDeclarationList.l SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol e = _symbols[offset + 3];
					JSNode node = new JSNaryNode(JSNodeTypes.VAR, l, s.getStart(), e.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [16] Statement = Expression_NoLBF.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.setSemicolonIncluded(true); return e;
				}
			},
			Action.RETURN,	// [17] Statement = IfStatement
			Action.RETURN,	// [18] Statement = IterationStatement
			Action.RETURN,	// [19] Statement = ContinueStatement
			Action.RETURN,	// [20] Statement = BreakStatement
			Action.RETURN,	// [21] Statement = ReturnStatement
			Action.RETURN,	// [22] Statement = WithStatement
			Action.RETURN,	// [23] Statement = LabelledStatement
			Action.RETURN,	// [24] Statement = SwitchStatement
			Action.RETURN,	// [25] Statement = ThrowStatement
			Action.RETURN,	// [26] Statement = TryStatement
			new Action() {	// [27] Statement = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd(), true);
				}
			},
			new Action() {	// [28] Statement = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [29] Statement_NoIf = Block
			Action.RETURN,	// [30] Statement_NoIf = FunctionDeclaration
			new Action() {	// [31] Statement_NoIf = VAR.s VariableDeclarationList.l SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol e = _symbols[offset + 3];
					JSNode node = new JSNaryNode(JSNodeTypes.VAR, l, s.getStart(), e.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [32] Statement_NoIf = Expression_NoLBF.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.setSemicolonIncluded(true); return e;
				}
			},
			Action.RETURN,	// [33] Statement_NoIf = IfStatement_NoIf
			Action.RETURN,	// [34] Statement_NoIf = IterationStatement_NoIf
			Action.RETURN,	// [35] Statement_NoIf = ContinueStatement
			Action.RETURN,	// [36] Statement_NoIf = BreakStatement
			Action.RETURN,	// [37] Statement_NoIf = ReturnStatement
			Action.RETURN,	// [38] Statement_NoIf = WithStatement_NoIf
			Action.RETURN,	// [39] Statement_NoIf = LabelledStatement_NoIf
			Action.RETURN,	// [40] Statement_NoIf = SwitchStatement
			Action.RETURN,	// [41] Statement_NoIf = ThrowStatement
			Action.RETURN,	// [42] Statement_NoIf = TryStatement
			new Action() {	// [43] Statement_NoIf = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd());
				}
			},
			new Action() {	// [44] Statement_NoIf = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [45] Block = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [46] Block = LCURLY.l StatementList.a RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.STATEMENTS, a, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [47] StatementList = StatementList Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [48] StatementList = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [49] VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [50] VariableDeclarationList = VariableDeclaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [51] VariableDeclarationList_NoIn = VariableDeclarationList_NoIn COMMA VariableDeclaration_NoIn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [52] VariableDeclarationList_NoIn = VariableDeclaration_NoIn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [53] VariableDeclaration = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, new JSNode() }, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [54] VariableDeclaration = IDENTIFIER.i EQUAL AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, e }, _symbol_i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [55] VariableDeclaration_NoIn = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, new JSNode() }, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [56] VariableDeclaration_NoIn = IDENTIFIER.i EQUAL AssignmentExpression_NoIn.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.DECLARATION, new JSNode[] { id, e }, _symbol_i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [57] IfStatement = IF.i LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, sn, s }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [58] IfStatement = IF.i LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, s, new JSNode() }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [59] IfStatement_NoIf = IF.i LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.IF, new JSNode[] { e, sn, s }, i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [60] IterationStatement = DO.d Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 7];
					JSNode node = new JSNode(JSNodeTypes.DO, new JSNode[] { s, e }, d.getStart(), r.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [61] IterationStatement = WHILE.w LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WHILE, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [62] IterationStatement = FOR.f LPAREN SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 6];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [63] IterationStatement = FOR.f LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 5];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [64] IterationStatement = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [65] IterationStatement = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [66] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [67] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [68] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [69] IterationStatement = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [70] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [71] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [72] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [73] IterationStatement = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 8];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [74] IterationStatement = FOR.f LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { i, o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [75] IterationStatement = FOR.f LPAREN VAR.v VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, new JSNode[] { i }, v.getStart(), i.getEnd()), o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [76] IterationStatement_NoIf = DO.d Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 7];
					JSNode node = new JSNode(JSNodeTypes.DO, new JSNode[] { s, e }, d.getStart(), r.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [77] IterationStatement_NoIf = WHILE.w LPAREN Expression.e RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WHILE, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [78] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 6];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [79] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 5];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [80] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [81] IterationStatement_NoIf = FOR.f LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 4];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNode(), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [82] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [83] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [84] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [85] IterationStatement_NoIf = FOR.f LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { i, c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [86] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [87] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_a = _symbols[offset + 7];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), new JSNode(), a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [88] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, new JSNode(), s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [89] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_a = _symbols[offset + 8];
					final JSNode a = (JSNode) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, i, v.getStart(), i[i.length - 1].getEnd()), c, a, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [90] IterationStatement_NoIf = FOR.f LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { i, o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [91] IterationStatement_NoIf = FOR.f LPAREN VAR.v VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.FOR_IN, new JSNode[] { new JSNaryNode(JSNodeTypes.VAR, new JSNode[] {i }, v.getStart(), i.getEnd()), o, s }, f.getStart(), s.getEnd());
				}
			},
			new Action() {	// [92] ContinueStatement = CONTINUE.c SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, c.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [93] ContinueStatement = CONTINUE.c IDENTIFIER.i SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, i, c.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [94] BreakStatement = BREAK.b SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, b.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [95] BreakStatement = BREAK.b IDENTIFIER.i SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, i, b.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [96] ReturnStatement = RETURN.r SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.RETURN, new JSNode(), r.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [97] ReturnStatement = RETURN.r Expression.e SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.RETURN, e, r.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [98] WithStatement = WITH.w LPAREN Expression.e RPAREN Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WITH, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [99] WithStatement_NoIf = WITH.w LPAREN Expression.e RPAREN Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					return new JSNode(JSNodeTypes.WITH, new JSNode[] { e, s }, w.getStart(), s.getEnd());
				}
			},
			new Action() {	// [100] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [101] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol r = _symbols[offset + 7];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, c, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [102] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY DefaultClause.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol r = _symbols[offset + 7];
					return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, new JSNode[] { d }, s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [103] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY DefaultClause.d CaseClauses.c RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol r = _symbols[offset + 8];
					
			List<JSNode> children = new ArrayList<JSNode>();
			children.add(d);
			for (JSNode statement : c) {
				children.add(statement);
			}
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [104] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c DefaultClause.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ArrayList _list_c = (ArrayList) _symbol_c.value;
					final JSNode[] c = _list_c == null ? new JSNode[0] : (JSNode[]) _list_c.toArray(new JSNode[_list_c.size()]);
					final Symbol _symbol_d = _symbols[offset + 7];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol r = _symbols[offset + 8];
					
			List<JSNode> children = new ArrayList<JSNode>();
			for (JSNode statement : c) {
				children.add(statement);
			}
			children.add(d);
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [105] SwitchStatement = SWITCH.s LPAREN Expression.e RPAREN LCURLY CaseClauses.c1 DefaultClause.d CaseClauses.c2 RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_c1 = _symbols[offset + 6];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSNode[] c1 = _list_c1 == null ? new JSNode[0] : (JSNode[]) _list_c1.toArray(new JSNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 7];
					final JSNode d = (JSNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 8];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSNode[] c2 = _list_c2 == null ? new JSNode[0] : (JSNode[]) _list_c2.toArray(new JSNode[_list_c2.size()]);
					final Symbol r = _symbols[offset + 9];
					
			List<JSNode> children = new ArrayList<JSNode>();
			for (JSNode statement : c1) {
				children.add(statement);
			}
			children.add(d);
			for (JSNode statement : c2) {
				children.add(statement);
			}
			return new JSNaryAndExpressionNode(JSNodeTypes.SWITCH, e, children.toArray(new JSNode[children.size()]), s.getStart(), r.getEnd());
				}
			},
			new Action() {	// [106] CaseClauses = CaseClauses CaseClause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [107] CaseClauses = CaseClause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [108] CaseClause = CASE.c Expression.e COLON.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryAndExpressionNode(JSNodeTypes.CASE, e, c.getStart(), r.getEnd());
				}
			},
			new Action() {	// [109] CaseClause = CASE.c Expression.e COLON StatementList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					return new JSNaryAndExpressionNode(JSNodeTypes.CASE, e, s, c.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [110] DefaultClause = DEFAULT.d COLON.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.DEFAULT, d.getStart(), c.getEnd());
				}
			},
			new Action() {	// [111] DefaultClause = DEFAULT.d COLON StatementList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					return new JSNaryNode(JSNodeTypes.DEFAULT, s, d.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [112] LabelledStatement = IDENTIFIER.i COLON Statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.LABELLED, new JSNode[] { id, s }, _symbol_i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [113] LabelledStatement_NoIf = IDENTIFIER.i COLON Statement_NoIf.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.LABELLED, new JSNode[] { id, s }, _symbol_i.getStart(), s.getEnd());
				}
			},
			new Action() {	// [114] ThrowStatement = THROW.t Expression.e SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 3];
					JSNode node = new JSUnaryOperatorNode(JSNodeTypes.THROW, e, t.getStart(), s.getEnd());node.setSemicolonIncluded(true);return node;
				}
			},
			new Action() {	// [115] TryStatement = TRY.t Block.b Catch.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSNode c = (JSNode) _symbol_c.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, c, new JSNode() }, t.getStart(), c.getEnd());
				}
			},
			new Action() {	// [116] TryStatement = TRY.t Block.b Finally.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, new JSNode(), f }, t.getStart(), f.getEnd());
				}
			},
			new Action() {	// [117] TryStatement = TRY.t Block.b Catch.c Finally.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSNode c = (JSNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.TRY, new JSNode[] { b, c, f }, t.getStart(), f.getEnd());
				}
			},
			new Action() {	// [118] Catch = CATCH.c LPAREN IDENTIFIER.i RPAREN Block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSNode b = (JSNode) _symbol_b.value;
					JSNode id = new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());return new JSNode(JSNodeTypes.CATCH, new JSNode[] { id, b }, c.getStart(), b.getEnd());
				}
			},
			new Action() {	// [119] Finally = FINALLY.f Block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSNode b = (JSNode) _symbol_b.value;
					return new JSNode(JSNodeTypes.FINALLY, new JSNode[] { b }, f.getStart(), b.getEnd());
				}
			},
			Action.RETURN,	// [120] PrimaryExpression = PrimaryExpression_NoLBF
			Action.RETURN,	// [121] PrimaryExpression = ObjectLiteral
			new Action() {	// [122] PrimaryExpression_NoLBF = THIS.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.THIS, t.value.toString(), t.getStart(), t.getEnd());
				}
			},
			new Action() {	// [123] PrimaryExpression_NoLBF = IDENTIFIER.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, t, _symbol_t.getStart(), _symbol_t.getEnd());
				}
			},
			Action.RETURN,	// [124] PrimaryExpression_NoLBF = Literal
			Action.RETURN,	// [125] PrimaryExpression_NoLBF = ArrayLiteral
			new Action() {	// [126] PrimaryExpression_NoLBF = LPAREN.l Expression.e RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSUnaryOperatorNode(JSNodeTypes.GROUP, e, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [127] ArrayLiteral = LBRACKET.l RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [128] ArrayLiteral = LBRACKET.l Elision.e RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [129] ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [130] ArrayLiteral = LBRACKET.l ElementList.e COMMA RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e, new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0) }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [131] ArrayLiteral = LBRACKET.l ElementList.e COMMA Elision.n RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					return new JSNaryNode(JSNodeTypes.ARRAY_LITERAL, new JSNode[] { e, n }, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [132] ElementList = AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNaryNode(JSNodeTypes.ELEMENTS, new JSNode[] { e }, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [133] ElementList = Elision.n AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNaryNode(JSNodeTypes.ELEMENTS, new JSNode[] { n, e }, n.getStart(), e.getEnd());
				}
			},
			new Action() {	// [134] ElementList = ElementList.l COMMA AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					l.addChild(e);l.setLocation(l.getStart(), e.getEnd());return l;
				}
			},
			new Action() {	// [135] ElementList = ElementList.l COMMA Elision.n AssignmentExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					l.addChild(n);l.addChild(e);l.setLocation(l.getStart(), e.getEnd());return l;
				}
			},
			new Action() {	// [136] Elision = Elision.e COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					e.addChild(new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0));return e;
				}
			},
			new Action() {	// [137] Elision = COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					return new JSNaryNode(JSNodeTypes.ELISION, new JSNode[] { new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0), new JSPrimitiveNode(JSNodeTypes.NULL, "null", 0, 0) }, 0, 0);
				}
			},
			new Action() {	// [138] ObjectLiteral = LCURLY.l RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.OBJECT_LITERAL, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [139] ObjectLiteral = LCURLY.l PropertyNameAndValueList.p RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.OBJECT_LITERAL, p, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [140] PropertyNameAndValueList = PropertyNameAndValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [141] PropertyNameAndValueList = PropertyNameAndValueList COMMA PropertyNameAndValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [142] PropertyNameAndValue = PropertyName.n COLON AssignmentExpression.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					return new JSNode(JSNodeTypes.NAME_VALUE_PAIR, new JSNode[] { n, v }, n.getStart(), v.getEnd());
				}
			},
			new Action() {	// [143] PropertyName = IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, i, _symbol_i.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [144] PropertyName = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [145] PropertyName = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());
				}
			},
			Action.RETURN,	// [146] MemberExpression = PrimaryExpression
			Action.RETURN,	// [147] MemberExpression = FunctionExpression
			new Action() {	// [148] MemberExpression = MemberExpression.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [149] MemberExpression = MemberExpression.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [150] MemberExpression = NEW.l MemberExpression.e Arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final JSNode a = (JSNode) _symbol_a.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, a }, l.getStart(), a.getEnd());
				}
			},
			Action.RETURN,	// [151] MemberExpression_NoLBF = PrimaryExpression_NoLBF
			new Action() {	// [152] MemberExpression_NoLBF = MemberExpression_NoLBF.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [153] MemberExpression_NoLBF = MemberExpression_NoLBF.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [154] MemberExpression_NoLBF = NEW.l MemberExpression.e Arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final JSNode a = (JSNode) _symbol_a.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, a }, l.getStart(), a.getEnd());
				}
			},
			Action.RETURN,	// [155] NewExpression = MemberExpression
			new Action() {	// [156] NewExpression = NEW.l NewExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, new JSNode() }, l.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [157] NewExpression_NoLBF = MemberExpression_NoLBF
			new Action() {	// [158] NewExpression_NoLBF = NEW.l NewExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSNode(JSNodeTypes.CONSTRUCT, new JSNode[] { e, new JSNode() }, l.getStart(), e.getEnd());
				}
			},
			new Action() {	// [159] CallExpression = MemberExpression.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [160] CallExpression = CallExpression.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [161] CallExpression = CallExpression.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [162] CallExpression = CallExpression.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [163] CallExpression_NoLBF = MemberExpression_NoLBF.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [164] CallExpression_NoLBF = CallExpression_NoLBF.l Arguments.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNode(JSNodeTypes.INVOKE, new JSNode[] {l, r}, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [165] CallExpression_NoLBF = CallExpression_NoLBF.l LBRACKET Expression.r RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSGetElementOperatorNode(l, r);
				}
			},
			new Action() {	// [166] CallExpression_NoLBF = CallExpression_NoLBF.l DOT IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new JSGetPropertyOperatorNode(l, new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, r, _symbol_r.getStart(), _symbol_r.getEnd()));
				}
			},
			new Action() {	// [167] Arguments = LPAREN.l RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					return new JSNaryNode(JSNodeTypes.ARGUMENTS, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [168] Arguments = LPAREN.l ArgumentList.a RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					final Symbol r = _symbols[offset + 3];
					return new JSNaryNode(JSNodeTypes.ARGUMENTS, a, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [169] ArgumentList = ArgumentList COMMA AssignmentExpression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [170] ArgumentList = AssignmentExpression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [171] LeftHandSideExpression = NewExpression
			Action.RETURN,	// [172] LeftHandSideExpression = CallExpression
			Action.RETURN,	// [173] LeftHandSideExpression_NoLBF = NewExpression_NoLBF
			Action.RETURN,	// [174] LeftHandSideExpression_NoLBF = CallExpression_NoLBF
			Action.RETURN,	// [175] PostfixExpression = LeftHandSideExpression
			new Action() {	// [176] PostfixExpression = LeftHandSideExpression.e PostfixOperator.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					return new JSPostUnaryOperatorNode(e, o, e.getStart(), _symbol_o.getEnd());
				}
			},
			Action.RETURN,	// [177] PostfixExpression_NoLBF = LeftHandSideExpression_NoLBF
			new Action() {	// [178] PostfixExpression_NoLBF = LeftHandSideExpression_NoLBF.e PostfixOperator.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					return new JSPostUnaryOperatorNode(e, o, e.getStart(),  _symbol_o.getEnd());
				}
			},
			Action.RETURN,	// [179] PostfixOperator = PLUS_PLUS
			Action.RETURN,	// [180] PostfixOperator = MINUS_MINUS
			Action.RETURN,	// [181] UnaryExpression = PostfixExpression
			new Action() {	// [182] UnaryExpression = UnaryOperator.o UnaryExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSUnaryOperatorNode(o, e, _symbol_o.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [183] UnaryExpression_NoLBF = PostfixExpression_NoLBF
			new Action() {	// [184] UnaryExpression_NoLBF = UnaryOperator.o UnaryExpression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					return new JSUnaryOperatorNode(o, e, _symbol_o.getStart(), e.getEnd());
				}
			},
			Action.RETURN,	// [185] UnaryOperator = DELETE
			Action.RETURN,	// [186] UnaryOperator = EXCLAMATION
			Action.RETURN,	// [187] UnaryOperator = MINUS
			Action.RETURN,	// [188] UnaryOperator = MINUS_MINUS
			Action.RETURN,	// [189] UnaryOperator = PLUS
			Action.RETURN,	// [190] UnaryOperator = PLUS_PLUS
			Action.RETURN,	// [191] UnaryOperator = TILDE
			Action.RETURN,	// [192] UnaryOperator = TYPEOF
			Action.RETURN,	// [193] UnaryOperator = VOID
			Action.RETURN,	// [194] MultiplicativeExpression = UnaryExpression
			new Action() {	// [195] MultiplicativeExpression = MultiplicativeExpression.l MultiplicativeOperator.o UnaryExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [196] MultiplicativeExpression_NoLBF = UnaryExpression_NoLBF
			new Action() {	// [197] MultiplicativeExpression_NoLBF = MultiplicativeExpression_NoLBF.l MultiplicativeOperator.o UnaryExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [198] MultiplicativeOperator = STAR
			Action.RETURN,	// [199] MultiplicativeOperator = FORWARD_SLASH
			Action.RETURN,	// [200] MultiplicativeOperator = PERCENT
			Action.RETURN,	// [201] AdditiveExpression = MultiplicativeExpression
			new Action() {	// [202] AdditiveExpression = AdditiveExpression.l AdditiveOperator.o MultiplicativeExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [203] AdditiveExpression_NoLBF = MultiplicativeExpression_NoLBF
			new Action() {	// [204] AdditiveExpression_NoLBF = AdditiveExpression_NoLBF.l AdditiveOperator.o MultiplicativeExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [205] AdditiveOperator = PLUS
			Action.RETURN,	// [206] AdditiveOperator = MINUS
			Action.RETURN,	// [207] ShiftExpression = AdditiveExpression
			new Action() {	// [208] ShiftExpression = ShiftExpression.l ShiftOperator.o AdditiveExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [209] ShiftExpression_NoLBF = AdditiveExpression_NoLBF
			new Action() {	// [210] ShiftExpression_NoLBF = ShiftExpression_NoLBF.l ShiftOperator.o AdditiveExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [211] ShiftOperator = LESS_LESS
			Action.RETURN,	// [212] ShiftOperator = GREATER_GREATER
			Action.RETURN,	// [213] ShiftOperator = GREATER_GREATER_GREATER
			Action.RETURN,	// [214] RelationalExpression = ShiftExpression
			new Action() {	// [215] RelationalExpression = RelationalExpression.l RelationalOperator.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [216] RelationalExpression_NoLBF = ShiftExpression_NoLBF
			new Action() {	// [217] RelationalExpression_NoLBF = RelationalExpression_NoLBF.l RelationalOperator.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [218] RelationalExpression_NoIn = ShiftExpression
			new Action() {	// [219] RelationalExpression_NoIn = RelationalExpression_NoIn.l RelationalOperator_NoIn.o ShiftExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [220] RelationalOperator_NoIn = LESS
			Action.RETURN,	// [221] RelationalOperator_NoIn = GREATER
			Action.RETURN,	// [222] RelationalOperator_NoIn = LESS_EQUAL
			Action.RETURN,	// [223] RelationalOperator_NoIn = GREATER_EQUAL
			Action.RETURN,	// [224] RelationalOperator_NoIn = INSTANCEOF
			Action.RETURN,	// [225] RelationalOperator = RelationalOperator_NoIn
			Action.RETURN,	// [226] RelationalOperator = IN
			Action.RETURN,	// [227] EqualityExpression = RelationalExpression
			new Action() {	// [228] EqualityExpression = EqualityExpression.l EqualityOperator.o RelationalExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [229] EqualityExpression_NoLBF = RelationalExpression_NoLBF
			new Action() {	// [230] EqualityExpression_NoLBF = EqualityExpression_NoLBF.l EqualityOperator.o RelationalExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [231] EqualityExpression_NoIn = RelationalExpression_NoIn
			new Action() {	// [232] EqualityExpression_NoIn = EqualityExpression_NoIn.l EqualityOperator.o RelationalExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o, r);
				}
			},
			Action.RETURN,	// [233] EqualityOperator = EQUAL_EQUAL
			Action.RETURN,	// [234] EqualityOperator = EXCLAMATION_EQUAL
			Action.RETURN,	// [235] EqualityOperator = EQUAL_EQUAL_EQUAL
			Action.RETURN,	// [236] EqualityOperator = EXCLAMATION_EQUAL_EQUAL
			new Action() {	// [237] BitwiseAndExpression = BitwiseAndExpression.l AMPERSAND.o EqualityExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [238] BitwiseAndExpression = EqualityExpression
			new Action() {	// [239] BitwiseAndExpression_NoLBF = BitwiseAndExpression_NoLBF.l AMPERSAND.o EqualityExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [240] BitwiseAndExpression_NoLBF = EqualityExpression_NoLBF
			new Action() {	// [241] BitwiseAndExpression_NoIn = BitwiseAndExpression_NoIn.l AMPERSAND.o EqualityExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [242] BitwiseAndExpression_NoIn = EqualityExpression_NoIn
			new Action() {	// [243] BitwiseXorExpression = BitwiseXorExpression.l CARET.o BitwiseAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [244] BitwiseXorExpression = BitwiseAndExpression
			new Action() {	// [245] BitwiseXorExpression_NoLBF = BitwiseXorExpression_NoLBF.l CARET.o BitwiseAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [246] BitwiseXorExpression_NoLBF = BitwiseAndExpression_NoLBF
			new Action() {	// [247] BitwiseXorExpression_NoIn = BitwiseXorExpression_NoIn.l CARET.o BitwiseAndExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [248] BitwiseXorExpression_NoIn = BitwiseAndExpression_NoIn
			new Action() {	// [249] BitwiseOrExpression = BitwiseOrExpression.l PIPE.o BitwiseXorExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [250] BitwiseOrExpression = BitwiseXorExpression
			new Action() {	// [251] BitwiseOrExpression_NoLBF = BitwiseOrExpression_NoLBF.l PIPE.o BitwiseXorExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [252] BitwiseOrExpression_NoLBF = BitwiseXorExpression_NoLBF
			new Action() {	// [253] BitwiseOrExpression_NoIn = BitwiseOrExpression_NoIn.l PIPE.o BitwiseXorExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [254] BitwiseOrExpression_NoIn = BitwiseXorExpression_NoIn
			new Action() {	// [255] LogicalAndExpression = LogicalAndExpression.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [256] LogicalAndExpression = BitwiseOrExpression
			new Action() {	// [257] LogicalAndExpression_NoLBF = LogicalAndExpression_NoLBF.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [258] LogicalAndExpression_NoLBF = BitwiseOrExpression_NoLBF
			new Action() {	// [259] LogicalAndExpression_NoIn = LogicalAndExpression_NoIn.l AMPERSAND_AMPERSAND.o BitwiseOrExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [260] LogicalAndExpression_NoIn = BitwiseOrExpression_NoIn
			new Action() {	// [261] LogicalOrExpression = LogicalOrExpression.l PIPE_PIPE.o LogicalAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [262] LogicalOrExpression = LogicalAndExpression
			new Action() {	// [263] LogicalOrExpression_NoLBF = LogicalOrExpression_NoLBF.l PIPE_PIPE.o LogicalAndExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [264] LogicalOrExpression_NoLBF = LogicalAndExpression_NoLBF
			new Action() {	// [265] LogicalOrExpression_NoIn = LogicalOrExpression_NoIn.l PIPE_PIPE.o LogicalAndExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSBinaryOperatorNode(l, o.value.toString(), r);
				}
			},
			Action.RETURN,	// [266] LogicalOrExpression_NoIn = LogicalAndExpression_NoIn
			Action.RETURN,	// [267] ConditionalExpression = LogicalOrExpression
			new Action() {	// [268] ConditionalExpression = LogicalOrExpression.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [269] ConditionalExpression_NoLBF = LogicalOrExpression_NoLBF
			new Action() {	// [270] ConditionalExpression_NoLBF = LogicalOrExpression_NoLBF.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [271] ConditionalExpression_NoIn = LogicalOrExpression_NoIn
			new Action() {	// [272] ConditionalExpression_NoIn = LogicalOrExpression_NoIn.l QUESTION AssignmentExpression_NoIn.t COLON AssignmentExpression_NoIn.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					return new JSNode(JSNodeTypes.CONDITIONAL, new JSNode[] { l, t, f }, l.getStart(), f.getEnd());
				}
			},
			Action.RETURN,	// [273] AssignmentExpression = ConditionalExpression
			new Action() {	// [274] AssignmentExpression = LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [275] AssignmentExpression_NoLBF = ConditionalExpression_NoLBF
			new Action() {	// [276] AssignmentExpression_NoLBF = LeftHandSideExpression_NoLBF.l AssignmentOperator.o AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [277] AssignmentExpression_NoIn = ConditionalExpression_NoIn
			new Action() {	// [278] AssignmentExpression_NoIn = LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_o = _symbols[offset + 2];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSAssignmentNode(l, o, r);
				}
			},
			Action.RETURN,	// [279] AssignmentOperator = EQUAL
			Action.RETURN,	// [280] AssignmentOperator = STAR_EQUAL
			Action.RETURN,	// [281] AssignmentOperator = FORWARD_SLASH_EQUAL
			Action.RETURN,	// [282] AssignmentOperator = PERCENT_EQUAL
			Action.RETURN,	// [283] AssignmentOperator = PLUS_EQUAL
			Action.RETURN,	// [284] AssignmentOperator = MINUS_EQUAL
			Action.RETURN,	// [285] AssignmentOperator = LESS_LESS_EQUAL
			Action.RETURN,	// [286] AssignmentOperator = GREATER_GREATER_EQUAL
			Action.RETURN,	// [287] AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			Action.RETURN,	// [288] AssignmentOperator = AMPERSAND_EQUAL
			Action.RETURN,	// [289] AssignmentOperator = CARET_EQUAL
			Action.RETURN,	// [290] AssignmentOperator = PIPE_EQUAL
			new Action() {	// [291] Expression = Expression.l COMMA AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [292] Expression = AssignmentExpression
			new Action() {	// [293] Expression_NoLBF = Expression_NoLBF.l COMMA AssignmentExpression.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [294] Expression_NoLBF = AssignmentExpression_NoLBF
			new Action() {	// [295] Expression_NoIn = Expression_NoIn.l COMMA AssignmentExpression_NoIn.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					return new JSNaryNode(JSNodeTypes.COMMA, new JSNode[] { l, r }, l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [296] Expression_NoIn = AssignmentExpression_NoIn
			new Action() {	// [297] Literal = NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.NULL, n.value.toString(), n.getStart(), n.getEnd());
				}
			},
			new Action() {	// [298] Literal = TRUE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.TRUE, t.value.toString(), t.getStart(), t.getEnd());
				}
			},
			new Action() {	// [299] Literal = FALSE.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f = _symbols[offset + 1];
					return new JSPrimitiveNode(JSNodeTypes.FALSE, f.value.toString(), f.getStart(), f.getEnd());
				}
			},
			new Action() {	// [300] Literal = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());
				}
			},
			new Action() {	// [301] Literal = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [302] Literal = REGEX.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final String r = (String) _symbol_r.value;
					return new JSPrimitiveNode(JSNodeTypes.REGEX, r, _symbol_r.getStart(), _symbol_r.getEnd());
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}

	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		int start = 0;
		for (int i = 0; i < _symbols.length; ++i)
		{
			if (_symbols[i] == null && i > 0)
			{
				start = _symbols[i - 1].getEnd();
				break;
			}
		}
		Symbol term = new Symbol(JSTokens.SEMICOLON, start, token.getStart(), ";");

		Simulator sim = new Simulator();
		in.alloc(2);
		in.insert(term, token); // insert expected terminal before unexpected one
		in.rewind();
		if (sim.parse(in))
		{
			in.rewind();
			report.missingTokenInserted(term);
			return;
		}
		super.recoverFromError(token, in);
	}

	@Override
	public IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		fScanner.setSource(new String(parseState.getSource()));
		IParseNode result = (IParseNode) parse(fScanner);
		parseState.setParseResult(result);
		return result;
	}
}
