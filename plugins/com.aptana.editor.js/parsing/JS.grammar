%package "com.aptana.editor.js.parsing";
%class "JSParser";
%import "com.aptana.editor.js.parsing.ast.*";
%import "com.aptana.parsing.ast.ParseRootNode";

%terminals FUNCTION, IDENTIFIER, STRING, NUMBER, NULL, TRUE, FALSE, REGEX;
%terminals LCURLY, RCURLY, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, COLON, SEMICOLON, EQUAL, DOT, QUESTION;
%terminals IF, ELSE, DO, WHILE, FOR, IN, CONTINUE, BREAK, RETURN, WITH, SWITCH, CASE, DEFAULT, THROW, TRY, CATCH, FINALLY;
%terminals VAR, THIS, NEW, DELETE, PLUS_PLUS, MINUS_MINUS, PLUS, MINUS, EXCLAMATION, TILDE, TYPEOF, VOID, AMPERSAND, CARET, PIPE, AMPERSAND_AMPERSAND, PIPE_PIPE;
%terminals STAR, FORWARD_SLASH, PERCENT, LESS_LESS, GREATER_GREATER, GREATER_GREATER_GREATER;
%terminals LESS, GREATER, LESS_EQUAL, GREATER_EQUAL, INSTANCEOF, IN, EQUAL_EQUAL, EXCLAMATION_EQUAL, EQUAL_EQUAL_EQUAL, EXCLAMATION_EQUAL_EQUAL;
%terminals EQUAL, STAR_EQUAL, FORWARD_SLASH_EQUAL, PERCENT_EQUAL, PLUS_EQUAL, MINUS_EQUAL, LESS_LESS_EQUAL, GREATER_GREATER_EQUAL, GREATER_GREATER_GREATER_EQUAL, AMPERSAND_EQUAL, CARET_EQUAL, PIPE_EQUAL;

%typeof NUMBER, STRING, REGEX, IDENTIFIER = "String";
%typeof AssignmentOperator, AdditiveOperator, MultiplicativeOperator, UnaryOperator, RelationalOperator, RelationalOperator_NoIn, ShiftOperator, EqualityOperator = "String";
%typeof AssignmentExpression, AssignmentExpression_NoIn, LeftHandSideExpression, LeftHandSideExpression_NoLBF = "JSNode";
%typeof AdditiveExpression, AdditiveExpression_NoLBF, MultiplicativeExpression, RelationalExpression, RelationalExpression_NoIn, RelationalExpression_NoLBF = "JSNode";
%typeof ShiftExpression, ShiftExpression_NoLBF, EqualityExpression, EqualityExpression_NoIn, EqualityExpression_NoLBF = "JSNode";

%goal Program;

Program
	=	SourceElements.p {:return new ParseRootNode(p, _symbol_p.getStart(), _symbol_p.getEnd());:}
	;

SourceElements
	=	SourceElements SourceElement
	|	SourceElement
	;

SourceElement
	=	FunctionDeclaration
	|	Statement
	;

FunctionDeclaration
	=	FUNCTION IDENTIFIER FunctionParameters FunctionBody
	;

FunctionExpression
	=	FUNCTION FunctionParameters FunctionBody
	|	FunctionDeclaration
	;

FunctionParameters
	=	LPAREN RPAREN
	|	LPAREN FormalParameterList RPAREN
	;

FormalParameterList
	=	FormalParameterList COMMA IDENTIFIER
	|	IDENTIFIER
	;

FunctionBody
	=	LCURLY RCURLY
	|	LCURLY SourceElements RCURLY
	;

Statement
	=	Block
	|	VAR VariableDeclarationList SEMICOLON
	|	Expression_NoLBF.e SEMICOLON {:((JSNode) e).setSemicolonIncluded(true); return e;:}
	|	IfStatement
	|	IterationStatement
	|	ContinueStatement
	|	BreakStatement
	|	ReturnStatement
	|	WithStatement
	|	LabelledStatement
	|	SwitchStatement
	|	ThrowStatement
	|	TryStatement
	|	SEMICOLON.s {:return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd(), true);:}
	|	error.e {:return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());:}
	;

Statement_NoIf
	=	Block
	|	VAR VariableDeclarationList SEMICOLON
	|	Expression_NoLBF.e SEMICOLON {:((JSNode) e).setSemicolonIncluded(true); return e;:}
	|	IfStatement_NoIf
	|	IterationStatement_NoIf
	|	ContinueStatement
	|	BreakStatement
	|	ReturnStatement
	|	WithStatement_NoIf
	|	LabelledStatement_NoIf
	|	SwitchStatement
	|	ThrowStatement
	|	TryStatement
	|	SEMICOLON.s {:return new JSNode(JSNodeTypes.EMPTY, s.getStart(), s.getEnd());:}
	|	error.e {:return new JSNode(JSNodeTypes.ERROR, e.getStart(), e.getEnd());:}
	;

Block
	=	LCURLY.l RCURLY.r {:return new JSNaryNode(JSNodeTypes.STATEMENT, l.getStart(), r.getEnd());:}
	|	LCURLY StatementList RCURLY
	;

StatementList
	=	StatementList Statement
	|	Statement
	;

VariableDeclarationList
	=	VariableDeclarationList COMMA VariableDeclaration
	|	VariableDeclaration
	;

VariableDeclarationList_NoIn
	=	VariableDeclarationList_NoIn COMMA VariableDeclaration_NoIn
	|	VariableDeclaration_NoIn
	;

VariableDeclaration
	=	IDENTIFIER
	|	IDENTIFIER EQUAL AssignmentExpression
	;

VariableDeclaration_NoIn
	=	IDENTIFIER
	|	IDENTIFIER EQUAL AssignmentExpression_NoIn
	;

IfStatement
	=	IF LPAREN Expression RPAREN Statement_NoIf ELSE Statement
	|	IF LPAREN Expression RPAREN Statement
	;

IfStatement_NoIf
	=	IF LPAREN Expression RPAREN Statement_NoIf ELSE Statement_NoIf
	;

IterationStatement
	=	DO Statement WHILE LPAREN Expression RPAREN SEMICOLON
	|	WHILE LPAREN Expression RPAREN Statement
	|	FOR LPAREN SEMICOLON SEMICOLON RPAREN Statement
	|	FOR LPAREN SEMICOLON SEMICOLON Expression RPAREN Statement
	|	FOR LPAREN SEMICOLON Expression SEMICOLON RPAREN Statement
	|	FOR LPAREN SEMICOLON Expression SEMICOLON Expression RPAREN Statement
	|	FOR LPAREN Expression_NoIn SEMICOLON SEMICOLON RPAREN Statement
	|	FOR LPAREN Expression_NoIn SEMICOLON SEMICOLON Expression RPAREN Statement
	|	FOR LPAREN Expression_NoIn SEMICOLON Expression SEMICOLON RPAREN Statement
	|	FOR LPAREN Expression_NoIn SEMICOLON Expression SEMICOLON Expression RPAREN Statement
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON SEMICOLON RPAREN Statement
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON SEMICOLON Expression RPAREN Statement
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON Expression SEMICOLON RPAREN Statement
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON Expression SEMICOLON Expression RPAREN Statement
	|	FOR LPAREN LeftHandSideExpression IN Expression RPAREN Statement
	|	FOR LPAREN VAR VariableDeclaration_NoIn IN Expression RPAREN Statement
	;

IterationStatement_NoIf
	=	DO Statement WHILE LPAREN Expression RPAREN SEMICOLON
	|	WHILE LPAREN Expression RPAREN Statement_NoIf
	|	FOR LPAREN SEMICOLON SEMICOLON RPAREN Statement_NoIf
	|	FOR LPAREN SEMICOLON SEMICOLON Expression RPAREN Statement_NoIf
	|	FOR LPAREN SEMICOLON Expression SEMICOLON RPAREN Statement_NoIf
	|	FOR LPAREN SEMICOLON Expression SEMICOLON Expression RPAREN Statement_NoIf
	|	FOR LPAREN Expression_NoIn SEMICOLON SEMICOLON RPAREN Statement_NoIf
	|	FOR LPAREN Expression_NoIn SEMICOLON SEMICOLON Expression RPAREN Statement_NoIf
	|	FOR LPAREN Expression_NoIn SEMICOLON Expression SEMICOLON RPAREN Statement_NoIf
	|	FOR LPAREN Expression_NoIn SEMICOLON Expression SEMICOLON Expression RPAREN Statement_NoIf
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON SEMICOLON RPAREN Statement_NoIf
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON SEMICOLON Expression RPAREN Statement_NoIf
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON Expression SEMICOLON RPAREN Statement_NoIf
	|	FOR LPAREN VAR VariableDeclarationList_NoIn SEMICOLON Expression SEMICOLON Expression RPAREN Statement_NoIf
	|	FOR LPAREN LeftHandSideExpression IN Expression RPAREN Statement_NoIf
	|	FOR LPAREN VAR VariableDeclaration_NoIn IN Expression RPAREN Statement_NoIf
	;

ContinueStatement
	=	CONTINUE.c SEMICOLON.s {:
			JSLabelStatementNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, c.getStart(), s.getEnd());
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	CONTINUE.c IDENTIFIER.i SEMICOLON.s {:
			JSLabelStatementNode node = new JSLabelStatementNode(JSNodeTypes.CONTINUE, i, c.getStart(), s.getEnd());
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

BreakStatement
	=	BREAK.b SEMICOLON.s {:
			JSLabelStatementNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, b.getStart(), s.getEnd());
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	BREAK.b IDENTIFIER.i SEMICOLON.s {:
			JSLabelStatementNode node = new JSLabelStatementNode(JSNodeTypes.BREAK, i, b.getStart(), s.getEnd());
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

ReturnStatement
	=	RETURN SEMICOLON
	|	RETURN Expression SEMICOLON
	;

WithStatement
	=	WITH LPAREN Expression RPAREN Statement
	;

WithStatement_NoIf
	=	WITH LPAREN Expression RPAREN Statement_NoIf
	;

SwitchStatement
	=	SWITCH LPAREN Expression RPAREN CaseBlock
	;

CaseBlock
	=	LCURLY RCURLY
	|	LCURLY CaseClauses RCURLY
	|	LCURLY DefaultClause RCURLY
	|	LCURLY DefaultClause CaseClauses RCURLY
	|	LCURLY CaseClauses DefaultClause RCURLY
	|	LCURLY CaseClauses DefaultClause CaseClauses RCURLY
	;

CaseClauses
	=	CaseClauses CaseClause
	|	CaseClause
	;

CaseClause
	=	CASE Expression COLON
	|	CASE Expression COLON StatementList
	;

DefaultClause
	=	DEFAULT COLON
	|	DEFAULT COLON StatementList
	;

LabelledStatement
	=	IDENTIFIER COLON Statement
	;

LabelledStatement_NoIf
	=	IDENTIFIER COLON Statement_NoIf
	;

ThrowStatement
	=	THROW Expression SEMICOLON
	;

TryStatement
	=	TRY Block Catch
	|	TRY Block Finally
	|	TRY Block Catch Finally
	;

Catch
	=	CATCH LPAREN IDENTIFIER RPAREN Block
	;

Finally
	=	FINALLY Block
	;

PrimaryExpression
	=	PrimaryExpression_NoLBF
	|	ObjectLiteral
	;

PrimaryExpression_NoLBF
	=	THIS.t {:return new JSPrimitiveNode(JSNodeTypes.THIS, t.value.toString(), t.getStart(), t.getEnd());:}
	|	IDENTIFIER.t {:return new JSPrimitiveNode(JSNodeTypes.IDENTIFIER, t, _symbol_t.getStart(), _symbol_t.getEnd());:}
	|	Literal
	|	ArrayLiteral
	|	LPAREN Expression RPAREN
	;

ArrayLiteral
	=	LBRACKET RBRACKET
	|	LBRACKET Elision RBRACKET
	|	LBRACKET ElementList RBRACKET
	|	LBRACKET ElementList COMMA RBRACKET
	|	LBRACKET ElementList COMMA Elision RBRACKET
	;

ElementList
	=	AssignmentExpression
	|	Elision AssignmentExpression
	|	ElementList COMMA AssignmentExpression
	|	ElementList COMMA Elision AssignmentExpression
	;

Elision
	=	Elision COMMA
	|	COMMA
	;

ObjectLiteral
	=	LCURLY RCURLY
	|	LCURLY PropertyNameAndValueList RCURLY
	;

PropertyNameAndValueList
	=	PropertyName COLON AssignmentExpression
	|	PropertyNameAndValueList COMMA PropertyName COLON AssignmentExpression
	;

PropertyName
	=	IDENTIFIER
	|	STRING
	|	NUMBER
	;

MemberExpression
	=	PrimaryExpression
	|	FunctionExpression
	|	MemberExpression LBRACKET Expression RBRACKET
	|	MemberExpression DOT IDENTIFIER
	|	NEW MemberExpression Arguments
	;

MemberExpression_NoLBF
	=	PrimaryExpression_NoLBF
	|	MemberExpression_NoLBF LBRACKET Expression RBRACKET
	|	MemberExpression_NoLBF DOT IDENTIFIER
	|	NEW MemberExpression Arguments
	;

NewExpression
	=	MemberExpression
	|	NEW NewExpression
	;

NewExpression_NoLBF
	=	MemberExpression_NoLBF
	|	NEW NewExpression
	;

CallExpression
	=	MemberExpression Arguments
	|	CallExpression Arguments
	|	CallExpression LBRACKET Expression RBRACKET
	|	CallExpression DOT IDENTIFIER
	;

CallExpression_NoLBF
	=	MemberExpression_NoLBF Arguments
	|	CallExpression_NoLBF Arguments
	|	CallExpression_NoLBF LBRACKET Expression RBRACKET
	|	CallExpression_NoLBF DOT IDENTIFIER
	;

Arguments
	=	LPAREN RPAREN
	|	LPAREN ArgumentList RPAREN
	;

ArgumentList
	=	ArgumentList COMMA AssignmentExpression
	|	AssignmentExpression
	;

LeftHandSideExpression
	=	NewExpression
	|	CallExpression
	;

LeftHandSideExpression_NoLBF
	=	NewExpression_NoLBF
	|	CallExpression_NoLBF
	;

PostfixExpression
	=	LeftHandSideExpression
	|	LeftHandSideExpression PostfixOperator
	;

PostfixExpression_NoLBF
	=	LeftHandSideExpression_NoLBF
	|	LeftHandSideExpression_NoLBF PostfixOperator
	;

PostfixOperator
	=	PLUS_PLUS
	|	MINUS_MINUS
	;

UnaryExpression
	=	PostfixExpression
	|	UnaryOperator UnaryExpression
	;

UnaryExpression_NoLBF
	=	PostfixExpression_NoLBF
	|	UnaryOperator UnaryExpression
	;

UnaryOperator
	=	DELETE
	|	EXCLAMATION
	|	MINUS
	|	MINUS_MINUS
	|	PLUS
	|	PLUS_PLUS
	|	TILDE
	|	TYPEOF
	|	VOID
	;

MultiplicativeExpression
	=	UnaryExpression.e {:return e;:}
	|	MultiplicativeExpression MultiplicativeOperator UnaryExpression
	;

MultiplicativeExpression_NoLBF
	=	UnaryExpression_NoLBF
	|	MultiplicativeExpression_NoLBF MultiplicativeOperator UnaryExpression
	;

MultiplicativeOperator
	=	STAR
	|	FORWARD_SLASH
	|	PERCENT
	;

AdditiveExpression
	=	MultiplicativeExpression.e {:return e;:}
	|	AdditiveExpression.l AdditiveOperator.o MultiplicativeExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

AdditiveExpression_NoLBF
	=	MultiplicativeExpression_NoLBF
	|	AdditiveExpression_NoLBF.l AdditiveOperator.o MultiplicativeExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

AdditiveOperator
	=	PLUS
	|	MINUS
	;

ShiftExpression
	=	AdditiveExpression.e {:return e;:}
	|	ShiftExpression.l ShiftOperator.o AdditiveExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

ShiftExpression_NoLBF
	=	AdditiveExpression_NoLBF
	|	ShiftExpression_NoLBF.l ShiftOperator.o AdditiveExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

ShiftOperator
	=	LESS_LESS
	|	GREATER_GREATER
	|	GREATER_GREATER_GREATER
	;

RelationalExpression
	=	ShiftExpression.e {:return e;:}
	|	RelationalExpression.l RelationalOperator.o ShiftExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

RelationalExpression_NoLBF
	=	ShiftExpression_NoLBF
	|	RelationalExpression_NoLBF.l RelationalOperator.o ShiftExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

RelationalExpression_NoIn
	=	ShiftExpression
	|	RelationalExpression_NoIn.l RelationalOperator_NoIn.o ShiftExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

RelationalOperator_NoIn
	=	LESS
	|	GREATER
	|	LESS_EQUAL
	|	GREATER_EQUAL
	|	INSTANCEOF
	;

RelationalOperator
	=	RelationalOperator_NoIn
	|	IN
	;

EqualityExpression
	=	RelationalExpression.e {:return e;:}
	|	EqualityExpression.l EqualityOperator.o RelationalExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

EqualityExpression_NoLBF
	=	RelationalExpression_NoLBF
	|	EqualityExpression_NoLBF.l EqualityOperator.o RelationalExpression.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

EqualityExpression_NoIn
	=	RelationalExpression_NoIn
	|	EqualityExpression_NoIn.l EqualityOperator.o RelationalExpression_NoIn.r {:return new JSBinaryOperatorNode(l, o, r);:}
	;

EqualityOperator
	=	EQUAL_EQUAL
	|	EXCLAMATION_EQUAL
	|	EQUAL_EQUAL_EQUAL
	|	EXCLAMATION_EQUAL_EQUAL
	;

BitwiseAndExpression
	=	BitwiseAndExpression AMPERSAND EqualityExpression
	|	EqualityExpression.e {:return e;:}
	;

BitwiseAndExpression_NoLBF
	=	BitwiseAndExpression_NoLBF AMPERSAND EqualityExpression
	|	EqualityExpression_NoLBF
	;

BitwiseAndExpression_NoIn
	=	BitwiseAndExpression_NoIn AMPERSAND EqualityExpression_NoIn
	|	EqualityExpression_NoIn
	;

BitwiseXorExpression
	=	BitwiseXorExpression CARET BitwiseAndExpression
	|	BitwiseAndExpression.e {:return e;:}
	;

BitwiseXorExpression_NoLBF
	=	BitwiseXorExpression_NoLBF CARET BitwiseAndExpression
	|	BitwiseAndExpression_NoLBF
	;

BitwiseXorExpression_NoIn
	=	BitwiseXorExpression_NoIn CARET BitwiseAndExpression_NoIn
	|	BitwiseAndExpression_NoIn
	;

BitwiseOrExpression
	=	BitwiseOrExpression PIPE BitwiseXorExpression
	|	BitwiseXorExpression.e {:return e;:}
	;

BitwiseOrExpression_NoLBF
	=	BitwiseOrExpression_NoLBF PIPE BitwiseXorExpression
	|	BitwiseXorExpression_NoLBF
	;

BitwiseOrExpression_NoIn
	=	BitwiseOrExpression_NoIn PIPE BitwiseXorExpression_NoIn
	|	BitwiseXorExpression_NoIn
	;

LogicalAndExpression
	=	LogicalAndExpression AMPERSAND_AMPERSAND BitwiseOrExpression
	|	BitwiseOrExpression.e {:return e;:}
	;

LogicalAndExpression_NoLBF
	=	LogicalAndExpression_NoLBF AMPERSAND_AMPERSAND BitwiseOrExpression
	|	BitwiseOrExpression_NoLBF
	;

LogicalAndExpression_NoIn
	=	LogicalAndExpression_NoIn AMPERSAND_AMPERSAND BitwiseOrExpression_NoIn
	|	BitwiseOrExpression_NoIn
	;

LogicalOrExpression
	=	LogicalOrExpression PIPE_PIPE LogicalAndExpression
	|	LogicalAndExpression.e {:return e;:}
	;

LogicalOrExpression_NoLBF
	=	LogicalOrExpression_NoLBF PIPE_PIPE LogicalAndExpression
	|	LogicalAndExpression_NoLBF
	;

LogicalOrExpression_NoIn
	=	LogicalOrExpression_NoIn PIPE_PIPE LogicalAndExpression_NoIn
	|	LogicalAndExpression_NoIn
	;

ConditionalExpression
	=	LogicalOrExpression
	|	LogicalOrExpression QUESTION AssignmentExpression COLON AssignmentExpression
	;

ConditionalExpression_NoLBF
	=	LogicalOrExpression_NoLBF
	|	LogicalOrExpression_NoLBF QUESTION AssignmentExpression COLON AssignmentExpression
	;

ConditionalExpression_NoIn
	=	LogicalOrExpression_NoIn
	|	LogicalOrExpression_NoIn QUESTION AssignmentExpression_NoIn COLON AssignmentExpression_NoIn
	;

AssignmentExpression
	=	ConditionalExpression
	|	LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression.r {:return new JSAssignmentNode(l, o, r);:}
	;

AssignmentExpression_NoLBF
	=	ConditionalExpression_NoLBF
	|	LeftHandSideExpression_NoLBF.l AssignmentOperator.o AssignmentExpression.r {:return new JSAssignmentNode(l, o, r);:}
	;

AssignmentExpression_NoIn
	=	ConditionalExpression_NoIn
	|	LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression_NoIn.r {:return new JSAssignmentNode(l, o, r);:}
	;

AssignmentOperator
	=	EQUAL
	|	STAR_EQUAL
	|	FORWARD_SLASH_EQUAL
	|	PERCENT_EQUAL
	|	PLUS_EQUAL
	|	MINUS_EQUAL
	|	LESS_LESS_EQUAL
	|	GREATER_GREATER_EQUAL
	|	GREATER_GREATER_GREATER_EQUAL
	|	AMPERSAND_EQUAL
	|	CARET_EQUAL
	|	PIPE_EQUAL
	;

Expression
	=	Expression COMMA AssignmentExpression
	|	AssignmentExpression
	;

Expression_NoLBF
	=	Expression_NoLBF COMMA AssignmentExpression
	|	AssignmentExpression_NoLBF
	;

Expression_NoIn
	=	Expression_NoIn COMMA AssignmentExpression_NoIn
	|	AssignmentExpression_NoIn
	;

Literal
	=	NULL.n {:return new JSPrimitiveNode(JSNodeTypes.NULL, n.value.toString(), n.getStart(), n.getEnd());:}
	|	TRUE.t {:return new JSPrimitiveNode(JSNodeTypes.TRUE, t.value.toString(), t.getStart(), t.getEnd());:}
	|	FALSE.f {:return new JSPrimitiveNode(JSNodeTypes.FALSE, f.value.toString(), f.getStart(), f.getEnd());:}
	|	NUMBER.n {:return new JSPrimitiveNode(JSNodeTypes.NUMBER, n, _symbol_n.getStart(), _symbol_n.getEnd());:}
	|	STRING.s {:return new JSPrimitiveNode(JSNodeTypes.STRING, s, _symbol_s.getStart(), _symbol_s.getEnd());:}
	|	REGEX.r {:return new JSPrimitiveNode(JSNodeTypes.REGEX, r, _symbol_r.getStart(), _symbol_r.getEnd());:}
	;
