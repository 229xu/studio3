%package "com.aptana.editor.js.parsing";

%class "JSParser";

%import "java.io.ByteArrayInputStream";
%import "java.io.IOException";
%import "java.util.ArrayList";
%import "java.util.List";

%import "com.aptana.editor.js.parsing.ast.*";
%import "com.aptana.editor.js.parsing.lexer.JSTokenType";
%import "com.aptana.editor.js.sdoc.model.DocumentationBlock";
%import "com.aptana.editor.js.sdoc.parsing.SDocParser";
%import "com.aptana.editor.js.vsdoc.parsing.VSDocReader";
%import "com.aptana.parsing.IParseState";
%import "com.aptana.parsing.IParser";
%import "com.aptana.parsing.IRecoveryStrategy";
%import "com.aptana.parsing.ast.IParseNode";

%implements "IParser";

%embed {:
	// suppress parser error reporting and let the custom error recovery mechanism handle it
	private static class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}
	
	private final IRecoveryStrategy[] recoveryStrategies;
	private JSScanner fScanner;
	
	/**
	 * attachPostDocumentationBlocks
	 * 
	 * @param root
	 * @param source
	 */
	private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
	{
		// process each post-documentation block
		for (DocumentationBlock block : this.parsePostDocumentationBlocks())
		{
			int index = block.getStart() - 1;
			
			while (index >= 0 && Character.isWhitespace(source.charAt(index)))
			{
				index--;
			}
			
			IParseNode node = root.getNodeAtOffset(index);
			
			if (node instanceof JSNode)
			{
				switch (node.getNodeType())
				{
					case JSNodeTypes.STATEMENTS:
						IParseNode parent = node.getParent();
						
						if (parent.getNodeType() == JSNodeTypes.FUNCTION)
						{
							((JSNode) parent).setDocumentation(block);
						}
						break;
						
					default:
						((JSNode) node).setDocumentation(block);
						break;
				}
			}
		}
	}

	/**
	 * attachPreDocumentationBlocks
	 * 
	 * @param root
	 * @param source
	 */
	private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
	{
		// process each pre-documentation block
		for (DocumentationBlock block : this.parsePreDocumentationBlocks())
		{
			int index = block.getEnd() + 1;
			
			while (index < source.length() && Character.isWhitespace(source.charAt(index)))
			{
				index++;
			}
			
			IParseNode node = root.getNodeAtOffset(index);
			
			if (node instanceof JSNode)
			{
				switch (node.getNodeType())
				{
					case JSNodeTypes.VAR:
						// associate documentation with first declared variable's value
						JSVarNode varNode = (JSVarNode) node;
						((JSNode) varNode.getFirstChild().getLastChild()).setDocumentation(block);
						break;
						
					default:
						((JSNode) node).setDocumentation(block);
						break;
				}
			}
		}
	}
	
	/**
	 * buildVSDocXML
	 *
	 * @param lines
	 * @return
	 */
	private String buildVSDocXML(List<Symbol> lines)
	{
		StringBuffer buffer = new StringBuffer();
		buffer.append("<docs>\n");
		
		for (Symbol line : lines)
		{
			String text = (String) line.value;
			
			buffer.append(text.substring(3));
			buffer.append("\n");
		}
		
		buffer.append("</docs>");
		
		return buffer.toString();
	}
	
	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (this.top != -1)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		// grab source
		String source = new String(parseState.getSource());
		
		// send source to the scanner
		fScanner.setSource(source);
		
		// parse
		IParseNode result = (IParseNode) parse(fScanner);
		
		// store results in the parse state
		parseState.setParseResult(result);
		
		// TODO: We probably don't need documentation nodes in all cases. For
		// example, the outline view probably doesn't rely on them. We should
		// include a flag (maybe in the parseState) that makes this step
		// optional.
		
		// attach documentation
		if (result instanceof JSParseRootNode)
		{
			JSParseRootNode root = (JSParseRootNode) result;
			
			attachPreDocumentationBlocks(root, source);
			attachPostDocumentationBlocks(root, source);
		}
		
		return result;
	}
	
	/**
	 * parsePostDocumentationBlocks
	 * 
	 * @return
	 */
	protected List<DocumentationBlock> parsePostDocumentationBlocks()
	{
		VSDocReader parser = new VSDocReader();
		List<DocumentationBlock> blocks = new ArrayList<DocumentationBlock>();
		
		for (Symbol doc : fScanner.getVSDocComments())
		{
			ByteArrayInputStream input = null;
			
			try
			{
				List<Symbol> lines = (List<Symbol>) doc.value;
				String source = this.buildVSDocXML(lines);
				
				input = new ByteArrayInputStream(source.getBytes());
				
				parser.loadXML(input);
				
				DocumentationBlock result = parser.getBlock(); 
				
				if (result != null)
				{
					if (lines.size() > 0)
					{
						result.setRange(lines.get(0).getStart(), lines.get(lines.size() - 1).getEnd());
					}
					
					blocks.add(result);
				}
			}
			catch (java.lang.Exception e)
			{
			}
			finally
			{
				try
				{
					if (input != null)
					{
						input.close();
					}
				}
				catch (IOException e)
				{
				}
			}
		}
		
		return blocks;
	}
	
	/**
	 * parsePreDocumentationBlocks
	 * 
	 * @return
	 */
	protected List<DocumentationBlock> parsePreDocumentationBlocks()
	{
		SDocParser parser = new SDocParser();
		List<DocumentationBlock> blocks = new ArrayList<DocumentationBlock>();
		
		for (Symbol doc : fScanner.getSDocComments())
		{
			try
			{
				Object result = parser.parse((String) doc.value, doc.getStart());
				
				if (result instanceof DocumentationBlock)
				{
					blocks.add((DocumentationBlock) result);
				}
			}
			catch (java.lang.Exception e)
			{
			}
		}
		
		return blocks;
	}
	
	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, token, in))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}
:};

%init {:
		fScanner = new JSScanner();
		report = new JSEvents();
		
		recoveryStrategies = new IRecoveryStrategy[] {
			new IRecoveryStrategy() {
				public boolean recover(IParser parser, Symbol token, TokenStream in) throws IOException
				{
					boolean result = false;
	
					Symbol term = new Symbol(JSTokenType.SEMICOLON.getIndex(), token.getStart(), token.getStart() - 1, ";");
					Simulator sim = new Simulator();
	
					in.alloc(2);
					in.insert(term, token);
					in.rewind();
	
					if (sim.parse(in))
					{
						result = true;
	
						in.rewind();
	
						report.missingTokenInserted(term);
					}
	
					return result;
				}
			},
			new IRecoveryStrategy() {
				public boolean recover(IParser parser, Symbol token, TokenStream in) throws IOException
				{
					Symbol lastSymbol = getLastSymbol();
					int type = lastSymbol.getId();
					boolean result = false;
	
					if (type == JSTokenType.DOT.getIndex() || type == JSTokenType.NEW.getIndex())
					{
						Symbol term1 = new Symbol(JSTokenType.IDENTIFIER.getIndex(), token.getStart(), token.getStart() - 1, "");
						Symbol term2 = new Symbol(JSTokenType.SEMICOLON.getIndex(), token.getStart(), token.getStart() - 1, ";");
	
						Simulator sim = new Simulator();
	
						in.alloc(3);
						in.insert(token);
						in.insert(term2);
						in.insert(term1);
						in.rewind();
	
						if (sim.parse(in))
						{
							result = true;
							
							in.rewind();
							
							report.missingTokenInserted(term1);
							report.missingTokenInserted(term2);
						}
					}
	
					return result;
				}
			},
			new IRecoveryStrategy() {
				public boolean recover(IParser parser, Symbol token, TokenStream in) throws IOException
				{
					Symbol lastSymbol = getLastSymbol();
					boolean result = false;
					
					if (top >= 2)
					{
						Symbol symbol1 = _symbols[top - 2];
						Symbol symbol2 = _symbols[top - 1];
						                          
						if (lastSymbol.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
						{
							Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), token.getStart(), token.getStart() - 1, "");
							Simulator sim = new Simulator();
							
							in.alloc(2);
							in.insert(term, token);
							in.rewind();
			
							if (sim.parse(in))
							{
								result = true;
			
								in.rewind();
			
								report.missingTokenInserted(term);
							}
						}
					}
					
					return result;
				}
			}
		};
:};

%terminals FUNCTION, IDENTIFIER, STRING, NUMBER, NULL, TRUE, FALSE, REGEX;
%terminals LCURLY, RCURLY, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, COLON, SEMICOLON, EQUAL, DOT, QUESTION;
%terminals IF, ELSE, DO, WHILE, FOR, IN, CONTINUE, BREAK, RETURN, WITH, SWITCH, CASE, DEFAULT, THROW, TRY, CATCH, FINALLY;
%terminals VAR, THIS, NEW, DELETE, PLUS_PLUS, MINUS_MINUS, PLUS, MINUS, EXCLAMATION, TILDE, TYPEOF, VOID, AMPERSAND, CARET, PIPE, AMPERSAND_AMPERSAND, PIPE_PIPE;
%terminals STAR, FORWARD_SLASH, PERCENT, LESS_LESS, GREATER_GREATER, GREATER_GREATER_GREATER;
%terminals LESS, GREATER, LESS_EQUAL, GREATER_EQUAL, INSTANCEOF, IN, EQUAL_EQUAL, EXCLAMATION_EQUAL, EQUAL_EQUAL_EQUAL, EXCLAMATION_EQUAL_EQUAL;
%terminals EQUAL, STAR_EQUAL, FORWARD_SLASH_EQUAL, PERCENT_EQUAL, PLUS_EQUAL, MINUS_EQUAL, LESS_LESS_EQUAL, GREATER_GREATER_EQUAL, GREATER_GREATER_GREATER_EQUAL, AMPERSAND_EQUAL, CARET_EQUAL, PIPE_EQUAL;

%typeof UnaryOperator, PostfixOperator = "String";
%typeof AssignmentExpression, AssignmentExpression_NoIn, LeftHandSideExpression, LeftHandSideExpression_NoLBF, UnaryExpression = "JSNode";
%typeof AdditiveExpression, AdditiveExpression_NoLBF, MultiplicativeExpression, MultiplicativeExpression_NoLBF, RelationalExpression, RelationalExpression_NoIn, RelationalExpression_NoLBF = "JSNode";
%typeof ShiftExpression, ShiftExpression_NoLBF, EqualityExpression, EqualityExpression_NoIn, EqualityExpression_NoLBF = "JSNode";
%typeof LogicalAndExpression, LogicalAndExpression_NoIn, LogicalAndExpression_NoLBF, LogicalOrExpression, LogicalOrExpression_NoIn, LogicalOrExpression_NoLBF = "JSNode";
%typeof BitwiseOrExpression, BitwiseOrExpression_NoIn, BitwiseOrExpression_NoLBF, BitwiseXorExpression, BitwiseXorExpression_NoIn, BitwiseXorExpression_NoLBF, BitwiseAndExpression, BitwiseAndExpression_NoIn, BitwiseAndExpression_NoLBF = "JSNode";
%typeof MemberExpression, MemberExpression_NoLBF, NewExpression, CallExpression, CallExpression_NoLBF, Expression, Expression_NoIn, Expression_NoLBF, Statement, Statement_NoIf, Arguments, Block, Catch, Finally = "JSNode";
%typeof VariableDeclaration, VariableDeclaration_NoIn, PropertyName, PropertyNameAndValue, Elision, ElementList, FormalParameterList, FunctionParameters, FunctionBody, SourceElement = "JSNode";
%typeof CaseClause, DefaultClause = "JSNode";

%goal Program;

Program
	=	SourceElements.p
		{:
			return new JSParseRootNode(p);
		:}
	|	{:
			return new JSParseRootNode();
		:}
	;

SourceElements
	=	SourceElements SourceElement
	|	SourceElement
	;

SourceElement
	=	Statement
	;

FunctionDeclaration
	=	FUNCTION IDENTIFIER.ident FunctionParameters.params FunctionBody.body
		{:
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
		:}
	;

FunctionExpression
	=	FUNCTION FunctionParameters.params FunctionBody.body
		{:
			return new JSFunctionNode(
				new JSNode(),
				params,
				body
			);
		:}
	|	FunctionDeclaration
	;

FunctionParameters
	=	LPAREN RPAREN
		{:
			return new JSParametersNode();
		:}
	|	LPAREN FormalParameterList.params RPAREN
		{:
			return params;
		:}
	;

FormalParameterList
	=	FormalParameterList.list COMMA IDENTIFIER.ident
		{:
			JSNode identifier = new JSIdentifierNode(ident);
			
			// add identifier to existing list
			list.addChild(identifier);
			
			return list;
		:}
	|	IDENTIFIER.ident
		{:
			JSNode identifier = new JSIdentifierNode(ident);
			
			return new JSParametersNode(identifier);
		:}
	;

FunctionBody
	=	LCURLY RCURLY
		{:
			return new JSStatementsNode();
		:}
	|	LCURLY SourceElements.s RCURLY
		{:
			return new JSStatementsNode(s);
		:}
	;

Statement
	=	Block
	|	FunctionDeclaration
	|	VAR VariableDeclarationList.l SEMICOLON
		{:
			JSNode node = new JSVarNode(l);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	Expression_NoLBF.e SEMICOLON
		{:
			e.setSemicolonIncluded(true);
			return e;
		:}
	|	IfStatement
	|	IterationStatement
	|	ContinueStatement
	|	BreakStatement
	|	ReturnStatement
	|	WithStatement
	|	LabelledStatement
	|	SwitchStatement
	|	ThrowStatement
	|	TryStatement
	|	SEMICOLON
		{:
			JSNode node = new JSEmptyNode();
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	error
		{:
			return new JSErrorNode();
		:}
	;

Statement_NoIf
	=	Block
	|	FunctionDeclaration
	|	VAR VariableDeclarationList.l SEMICOLON
		{:
			JSNode node = new JSVarNode(l);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	Expression_NoLBF.e SEMICOLON
		{:
			e.setSemicolonIncluded(true);
			return e;
		:}
	|	IfStatement_NoIf
	|	IterationStatement_NoIf
	|	ContinueStatement
	|	BreakStatement
	|	ReturnStatement
	|	WithStatement_NoIf
	|	LabelledStatement_NoIf
	|	SwitchStatement
	|	ThrowStatement
	|	TryStatement
	|	SEMICOLON
		{:
			return new JSEmptyNode();
		:}
	|	error
		{:
			return new JSErrorNode();
		:}
	;

Block
	=	LCURLY RCURLY
		{:
			return new JSStatementsNode();
		:}
	|	LCURLY StatementList.a RCURLY
		{:
			return new JSStatementsNode(a);
		:}
	;

StatementList
	=	StatementList Statement
	|	Statement
	;

VariableDeclarationList
	=	VariableDeclarationList COMMA VariableDeclaration
	|	VariableDeclaration
	;

VariableDeclarationList_NoIn
	=	VariableDeclarationList_NoIn COMMA VariableDeclaration_NoIn
	|	VariableDeclaration_NoIn
	;

VariableDeclaration
	=	IDENTIFIER.i
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), new JSNode());
		:}
	|	IDENTIFIER.i EQUAL AssignmentExpression.expression
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), expression);
		:}
	;

VariableDeclaration_NoIn
	=	IDENTIFIER.i
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), new JSNode());
		:}
	|	IDENTIFIER.i EQUAL AssignmentExpression_NoIn.expression
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), expression);
		:}
	;

IfStatement
	=	IF LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement.s
		{:
			return new JSIfNode(e, sn, s);
		:}
	|	IF LPAREN Expression.e RPAREN Statement.s
		{:
			return new JSIfNode(e, s, new JSNode());
		:}
	;

IfStatement_NoIf
	=	IF LPAREN Expression.e RPAREN Statement_NoIf.sn ELSE Statement_NoIf.s
		{:
			return new JSIfNode(e, sn, s);
		:}
	;

IterationStatement
	=	DO Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON
		{:
			JSNode node = new JSDoNode(s, e);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	WHILE LPAREN Expression.e RPAREN Statement.s
		{:
			return new JSWhileNode(e, s);
		:}
	|	FOR LPAREN SEMICOLON SEMICOLON RPAREN Statement.s
		{:
			return new JSForNode(new JSNode(), new JSNode(), new JSNode(), s);
		:}
	|	FOR LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
		{:
			return new JSForNode(new JSNode(), new JSNode(), a, s);
		:}
	|	FOR LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
		{:
			return new JSForNode(new JSNode(), c, new JSNode(), s);
		:}
	|	FOR LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
		{:
			return new JSForNode(new JSNode(), c, a, s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
		{:
			return new JSForNode(i, new JSNode(), new JSNode(), s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
		{:
			return new JSForNode(i, new JSNode(), a, s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
		{:
			return new JSForNode(i, c, new JSNode(), s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
		{:
			return new JSForNode(i, c, a, s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement.s
		{:
			return new JSForNode(new JSVarNode(i), new JSNode(), new JSNode(), s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement.s
		{:
			return new JSForNode(new JSVarNode(i), new JSNode(), a, s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement.s
		{:
			return new JSForNode(new JSVarNode(i), c, new JSNode(), s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement.s
		{:
			return new JSForNode(new JSVarNode(i), c, a, s);
		:}
	|	FOR LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement.s
		{:
			return new JSForInNode(i, o, s);
		:}
	|	FOR LPAREN VAR VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement.s
		{:
			return new JSForInNode(new JSVarNode(i), o, s);
		:}
	;

IterationStatement_NoIf
	=	DO Statement.s WHILE LPAREN Expression.e RPAREN SEMICOLON
		{:
			JSNode node = new JSDoNode(s, e);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	WHILE LPAREN Expression.e RPAREN Statement_NoIf.s
		{:
			return new JSWhileNode(e, s);
		:}
	|	FOR LPAREN SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSNode(), new JSNode(), new JSNode(), s);
		:}
	|	FOR LPAREN SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSNode(), new JSNode(), a, s);
		:}
	|	FOR LPAREN SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSNode(), c, new JSNode(), s);
		:}
	|	FOR LPAREN SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSNode(), c, a, s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
		{:
			return new JSForNode(i, new JSNode(), new JSNode(), s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
		{:
			return new JSForNode(i, new JSNode(), a, s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
		{:
			return new JSForNode(i, c, new JSNode(), s);
		:}
	|	FOR LPAREN Expression_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
		{:
			return new JSForNode(i, c, a, s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSVarNode(i), new JSNode(), new JSNode(), s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON SEMICOLON Expression.a RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSVarNode(i), new JSNode(), a, s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSVarNode(i), c, new JSNode(), s);
		:}
	|	FOR LPAREN VAR VariableDeclarationList_NoIn.i SEMICOLON Expression.c SEMICOLON Expression.a RPAREN Statement_NoIf.s
		{:
			return new JSForNode(new JSVarNode(i), c, a, s);
		:}
	|	FOR LPAREN LeftHandSideExpression.i IN Expression.o RPAREN Statement_NoIf.s
		{:
			return new JSForInNode(i, o, s);
		:}
	|	FOR LPAREN VAR VariableDeclaration_NoIn.i IN Expression.o RPAREN Statement_NoIf.s
		{:
			return new JSForInNode(new JSVarNode(i), o, s);
		:}
	;

ContinueStatement
	=	CONTINUE SEMICOLON
		{:
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	CONTINUE IDENTIFIER.i SEMICOLON
		{:
			JSNode node = new JSContinueNode((String) i.value);
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

BreakStatement
	=	BREAK SEMICOLON
		{:
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	BREAK IDENTIFIER.i SEMICOLON
		{:
			JSNode node = new JSBreakNode((String) i.value);
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

ReturnStatement
	=	RETURN SEMICOLON
		{:
			JSNode node = new JSReturnNode(new JSNode());
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	RETURN Expression.e SEMICOLON
		{:
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

WithStatement
	=	WITH LPAREN Expression.e RPAREN Statement.s
		{:
			return new JSWithNode(e, s);
		:}
	;

WithStatement_NoIf
	=	WITH LPAREN Expression.e RPAREN Statement_NoIf.s
		{:
			return new JSWithNode(e, s);
		:}
	;

SwitchStatement
	=	SWITCH LPAREN Expression.e RPAREN LCURLY RCURLY
		{:
			return new JSSwitchNode(e);
		:}
	|	SWITCH LPAREN Expression.e RPAREN LCURLY CaseClauses.c RCURLY
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();
			
			nodes.add(e);
			
			for (JSNode statement : c)
			{
				nodes.add(statement);
			}
			
			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);
			
			return new JSSwitchNode(children);
		:}
	|	SWITCH LPAREN Expression.e RPAREN LCURLY DefaultClause.d RCURLY
		{:
			return new JSSwitchNode(e, d);
		:}
	|	SWITCH LPAREN Expression.e RPAREN LCURLY DefaultClause.d CaseClauses.c RCURLY
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();
			
			nodes.add(e);
			nodes.add(d);
			
			for (JSNode statement : c)
			{
				nodes.add(statement);
			}
			
			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);
			
			return new JSSwitchNode(children);
		:}
	|	SWITCH LPAREN Expression.e RPAREN LCURLY CaseClauses.c DefaultClause.d RCURLY
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();
			
			nodes.add(e);
			
			for (JSNode statement : c)
			{
				nodes.add(statement);
			}
			
			nodes.add(d);
			
			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);
			
			return new JSSwitchNode(children);
		:}
	|	SWITCH LPAREN Expression.e RPAREN LCURLY CaseClauses.c1 DefaultClause.d CaseClauses.c2 RCURLY
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();
			
			nodes.add(e);
			
			for (JSNode statement : c1)
			{
				nodes.add(statement);
			}
			
			nodes.add(d);
			
			for (JSNode statement : c2)
			{
				nodes.add(statement);
			}
			
			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);
			
			return new JSSwitchNode(children);
		:}
	;

CaseClauses
	=	CaseClauses CaseClause
	|	CaseClause
	;

CaseClause
	=	CASE Expression.e COLON
		{:
			return new JSCaseNode(e);
		:}
	|	CASE Expression.e COLON StatementList.s
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();
			
			nodes.add(e);
			
			for (JSNode statement : s)
			{
				nodes.add(statement);
			}
			
			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);
			
			return new JSCaseNode(children);
		:}
	;

DefaultClause
	=	DEFAULT COLON
		{:
			return new JSDefaultNode();
		:}
	|	DEFAULT COLON StatementList.s
		{:
			return new JSDefaultNode(s);
		:}
	;

LabelledStatement
	=	IDENTIFIER.i COLON Statement.s
		{:
			JSNode id = new JSIdentifierNode(i);
			
			return new JSLabelledNode(id, s);
		:}
	;

LabelledStatement_NoIf
	=	IDENTIFIER.i COLON Statement_NoIf.s
		{:
			JSNode id = new JSIdentifierNode(i);
			
			return new JSLabelledNode(id, s);
		:}
	;

ThrowStatement
	=	THROW Expression.e SEMICOLON
		{:
			JSNode node = new JSThrowNode(e);
			
			node.setSemicolonIncluded(true);
			
			return node;
		:}
	;

TryStatement
	=	TRY Block.b Catch.c
		{:
			return new JSTryNode(b, c, new JSNode());
		:}
	|	TRY Block.b Finally.f
		{:
			return new JSTryNode(b, new JSNode(), f);
		:}
	|	TRY Block.b Catch.c Finally.f
		{:
			return new JSTryNode(b, c, f);
		:}
	;

Catch
	=	CATCH LPAREN IDENTIFIER.i RPAREN Block.b
		{:
			JSNode id = new JSIdentifierNode(i);
			
			return new JSCatchNode(id, b);
		:}
	;

Finally
	=	FINALLY Block.b
		{:
			return new JSFinallyNode(b);
		:}
	;

PrimaryExpression
	=	PrimaryExpression_NoLBF
	|	ObjectLiteral
	;

PrimaryExpression_NoLBF
	=	THIS.t
		{:
			return new JSThisNode(t);
		:}
	|	IDENTIFIER.i
		{:
			return new JSIdentifierNode(i);
		:}
	|	Literal
	|	ArrayLiteral
	|	LPAREN Expression.e RPAREN
		{:
			return new JSGroupNode(e);
		:}
	;

ArrayLiteral
	=	LBRACKET RBRACKET
		{:
			return new JSArrayNode();
		:}
	|	LBRACKET Elision.e RBRACKET
		{:
			return new JSArrayNode(e);
		:}
	|	LBRACKET ElementList.e RBRACKET
		{:
			return new JSArrayNode(e);
		:}
	|	LBRACKET ElementList.e COMMA RBRACKET
		{:
			return new JSArrayNode(e, new JSNullNode());
		:}
	|	LBRACKET ElementList.e COMMA Elision.n RBRACKET
		{:
			return new JSArrayNode(e, n);
		:}
	;

ElementList
	=	AssignmentExpression.e
		{:
			return new JSElementsNode(e);
		:}
	|	Elision.n AssignmentExpression.e
		{:
			return new JSElementsNode(n, e);
		:}
	|	ElementList.l COMMA AssignmentExpression.e
		{:
			l.addChild(e);
			
			return l;
		:}
	|	ElementList.l COMMA Elision.n AssignmentExpression.e
		{:
			l.addChild(n);
			l.addChild(e);
			
			return l;
		:}
	;

Elision
	=	Elision.e COMMA
		{:
			e.addChild(new JSNullNode());
			
			return e;
		:}
	|	COMMA
		{:
			return new JSElisionNode(new JSNullNode(), new JSNullNode());
		:}
	;

ObjectLiteral
	=	LCURLY RCURLY
		{:
			return new JSObjectNode();
		:}
	|	LCURLY PropertyNameAndValueList.p RCURLY
		{:
			return new JSObjectNode(p);
		:}
	;

PropertyNameAndValueList
	=	PropertyNameAndValue
	|	PropertyNameAndValueList COMMA PropertyNameAndValue
	;

PropertyNameAndValue
	=	PropertyName.n COLON AssignmentExpression.v
		{:
			return new JSNameValuePairNode(n, v);
		:}
	;

PropertyName
	=	IDENTIFIER.i
		{:
			return new JSIdentifierNode(i);
		:}
	|	STRING.s
		{:
			return new JSStringNode(s);
		:}
	|	NUMBER.n
		{:
			return new JSNumberNode(n);
		:}
	;

MemberExpression
	=	PrimaryExpression
	|	FunctionExpression
	|	MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	MemberExpression.l DOT.o IDENTIFIER.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	|	NEW MemberExpression.e Arguments.a
		{:
			return new JSConstructNode(e, a);
		:}
	;

MemberExpression_NoLBF
	=	PrimaryExpression_NoLBF
	|	MemberExpression_NoLBF.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	MemberExpression_NoLBF.l DOT.o IDENTIFIER.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	|	NEW MemberExpression.e Arguments.a
		{:
			return new JSConstructNode(e, a);
		:}
	;

NewExpression
	=	MemberExpression
	|	NEW NewExpression.e
		{:
			return new JSConstructNode(e, new JSNode());
		:}
	;

NewExpression_NoLBF
	=	MemberExpression_NoLBF
	|	NEW NewExpression.e
		{:
			return new JSConstructNode(e, new JSNode());
		:}
	;

CallExpression
	=	MemberExpression.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	CallExpression.l DOT.o IDENTIFIER.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	;

CallExpression_NoLBF
	=	MemberExpression_NoLBF.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression_NoLBF.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression_NoLBF.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	CallExpression_NoLBF.l DOT.o IDENTIFIER.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	;

Arguments
	=	LPAREN RPAREN
		{:
			return new JSArgumentsNode();
		:}
	|	LPAREN ArgumentList.a RPAREN
		{:
			return new JSArgumentsNode(a);
		:}
	;

ArgumentList
	=	ArgumentList COMMA AssignmentExpression
	|	AssignmentExpression
	;

LeftHandSideExpression
	=	NewExpression
	|	CallExpression
	;

LeftHandSideExpression_NoLBF
	=	NewExpression_NoLBF
	|	CallExpression_NoLBF
	;

PostfixExpression
	=	LeftHandSideExpression
	|	LeftHandSideExpression.e PostfixOperator.o
		{:
			return new JSPostUnaryOperatorNode(o, e);
		:}
	;

PostfixExpression_NoLBF
	=	LeftHandSideExpression_NoLBF
	|	LeftHandSideExpression_NoLBF.e PostfixOperator.o
		{:
			return new JSPostUnaryOperatorNode(o, e);
		:}
	;

PostfixOperator
	=	PLUS_PLUS
	|	MINUS_MINUS
	;

UnaryExpression
	=	PostfixExpression
	|	UnaryOperator.o UnaryExpression.e
		{:
			return new JSPreUnaryOperatorNode(o, e);
		:}
	;

UnaryExpression_NoLBF
	=	PostfixExpression_NoLBF
	|	UnaryOperator.o UnaryExpression.e
		{:
			return new JSPreUnaryOperatorNode(o, e);
		:}
	;

UnaryOperator
	=	DELETE
	|	EXCLAMATION
	|	MINUS
	|	MINUS_MINUS
	|	PLUS
	|	PLUS_PLUS
	|	TILDE
	|	TYPEOF
	|	VOID
	;

MultiplicativeExpression
	=	UnaryExpression
	|	MultiplicativeExpression.l MultiplicativeOperator.o UnaryExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

MultiplicativeExpression_NoLBF
	=	UnaryExpression_NoLBF
	|	MultiplicativeExpression_NoLBF.l MultiplicativeOperator.o UnaryExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

MultiplicativeOperator
	=	STAR
	|	FORWARD_SLASH
	|	PERCENT
	;

AdditiveExpression
	=	MultiplicativeExpression
	|	AdditiveExpression.l AdditiveOperator.o MultiplicativeExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

AdditiveExpression_NoLBF
	=	MultiplicativeExpression_NoLBF
	|	AdditiveExpression_NoLBF.l AdditiveOperator.o MultiplicativeExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

AdditiveOperator
	=	PLUS
	|	MINUS
	;

ShiftExpression
	=	AdditiveExpression
	|	ShiftExpression.l ShiftOperator.o AdditiveExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

ShiftExpression_NoLBF
	=	AdditiveExpression_NoLBF
	|	ShiftExpression_NoLBF.l ShiftOperator.o AdditiveExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

ShiftOperator
	=	LESS_LESS
	|	GREATER_GREATER
	|	GREATER_GREATER_GREATER
	;

RelationalExpression
	=	ShiftExpression
	|	RelationalExpression.l RelationalOperator.o ShiftExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

RelationalExpression_NoLBF
	=	ShiftExpression_NoLBF
	|	RelationalExpression_NoLBF.l RelationalOperator.o ShiftExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

RelationalExpression_NoIn
	=	ShiftExpression
	|	RelationalExpression_NoIn.l RelationalOperator_NoIn.o ShiftExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

RelationalOperator_NoIn
	=	LESS
	|	GREATER
	|	LESS_EQUAL
	|	GREATER_EQUAL
	|	INSTANCEOF
	;

RelationalOperator
	=	RelationalOperator_NoIn
	|	IN
	;

EqualityExpression
	=	RelationalExpression
	|	EqualityExpression.l EqualityOperator.o RelationalExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

EqualityExpression_NoLBF
	=	RelationalExpression_NoLBF
	|	EqualityExpression_NoLBF.l EqualityOperator.o RelationalExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

EqualityExpression_NoIn
	=	RelationalExpression_NoIn
	|	EqualityExpression_NoIn.l EqualityOperator.o RelationalExpression_NoIn.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

EqualityOperator
	=	EQUAL_EQUAL
	|	EXCLAMATION_EQUAL
	|	EQUAL_EQUAL_EQUAL
	|	EXCLAMATION_EQUAL_EQUAL
	;

BitwiseAndExpression
	=	BitwiseAndExpression.l AMPERSAND.o EqualityExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	EqualityExpression
	;

BitwiseAndExpression_NoLBF
	=	BitwiseAndExpression_NoLBF.l AMPERSAND.o EqualityExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	EqualityExpression_NoLBF
	;

BitwiseAndExpression_NoIn
	=	BitwiseAndExpression_NoIn.l AMPERSAND.o EqualityExpression_NoIn.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	EqualityExpression_NoIn
	;

BitwiseXorExpression
	=	BitwiseXorExpression.l CARET.o BitwiseAndExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseAndExpression
	;

BitwiseXorExpression_NoLBF
	=	BitwiseXorExpression_NoLBF.l CARET.o BitwiseAndExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseAndExpression_NoLBF
	;

BitwiseXorExpression_NoIn
	=	BitwiseXorExpression_NoIn.l CARET.o BitwiseAndExpression_NoIn.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseAndExpression_NoIn
	;

BitwiseOrExpression
	=	BitwiseOrExpression.l PIPE.o BitwiseXorExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseXorExpression
	;

BitwiseOrExpression_NoLBF
	=	BitwiseOrExpression_NoLBF.l PIPE.o BitwiseXorExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseXorExpression_NoLBF
	;

BitwiseOrExpression_NoIn
	=	BitwiseOrExpression_NoIn.l PIPE.o BitwiseXorExpression_NoIn.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseXorExpression_NoIn
	;

LogicalAndExpression
	=	LogicalAndExpression.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	BitwiseOrExpression
	;

LogicalAndExpression_NoLBF
	=	LogicalAndExpression_NoLBF.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	BitwiseOrExpression_NoLBF
	;

LogicalAndExpression_NoIn
	=	LogicalAndExpression_NoIn.l AMPERSAND_AMPERSAND.o BitwiseOrExpression_NoIn.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	BitwiseOrExpression_NoIn
	;

LogicalOrExpression
	=	LogicalOrExpression.l PIPE_PIPE.o LogicalAndExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	LogicalAndExpression
	;

LogicalOrExpression_NoLBF
	=	LogicalOrExpression_NoLBF.l PIPE_PIPE.o LogicalAndExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	LogicalAndExpression_NoLBF
	;

LogicalOrExpression_NoIn
	=	LogicalOrExpression_NoIn.l PIPE_PIPE.o LogicalAndExpression_NoIn.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	LogicalAndExpression_NoIn
	;

ConditionalExpression
	=	LogicalOrExpression
	|	LogicalOrExpression.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
		{:
			return new JSConditionalNode(l, t, f);
		:}
	;

ConditionalExpression_NoLBF
	=	LogicalOrExpression_NoLBF
	|	LogicalOrExpression_NoLBF.l QUESTION AssignmentExpression.t COLON AssignmentExpression.f
		{:
			return new JSConditionalNode(l, t, f);
		:}
	;

ConditionalExpression_NoIn
	=	LogicalOrExpression_NoIn
	|	LogicalOrExpression_NoIn.l QUESTION AssignmentExpression_NoIn.t COLON AssignmentExpression_NoIn.f
		{:
			return new JSConditionalNode(l, t, f);
		:}
	;

AssignmentExpression
	=	ConditionalExpression
	|	LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression.r
		{:
			return new JSAssignmentNode(l, o, r);
		:}
	;

AssignmentExpression_NoLBF
	=	ConditionalExpression_NoLBF
	|	LeftHandSideExpression_NoLBF.l AssignmentOperator.o AssignmentExpression.r
		{:
			return new JSAssignmentNode(l, o, r);
		:}
	;

AssignmentExpression_NoIn
	=	ConditionalExpression_NoIn
	|	LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression_NoIn.r
		{:
			return new JSAssignmentNode(l, o, r);
		:}
	;

AssignmentOperator
	=	EQUAL
	|	STAR_EQUAL
	|	FORWARD_SLASH_EQUAL
	|	PERCENT_EQUAL
	|	PLUS_EQUAL
	|	MINUS_EQUAL
	|	LESS_LESS_EQUAL
	|	GREATER_GREATER_EQUAL
	|	GREATER_GREATER_GREATER_EQUAL
	|	AMPERSAND_EQUAL
	|	CARET_EQUAL
	|	PIPE_EQUAL
	;

Expression
	=	Expression.l COMMA AssignmentExpression.r
		{:
			return new JSCommaNode(l, r);
		:}
	|	AssignmentExpression
	;

Expression_NoLBF
	=	Expression_NoLBF.l COMMA AssignmentExpression.r
		{:
			return new JSCommaNode(l, r);
		:}
	|	AssignmentExpression_NoLBF
	;

Expression_NoIn
	=	Expression_NoIn.l COMMA AssignmentExpression_NoIn.r
		{:
			return new JSCommaNode(l, r);
		:}
	|	AssignmentExpression_NoIn
	;

Literal
	=	NULL.n
		{:
			return new JSNullNode(n);
		:}
	|	TRUE.t
		{:
			return new JSTrueNode(t);
		:}
	|	FALSE.f
		{:
			return new JSFalseNode(f);
		:}
	|	NUMBER.n
		{:
			return new JSNumberNode(n);
		:}
	|	STRING.s
		{:
			return new JSStringNode(s);
		:}
	|	REGEX.r
		{:
			return new JSRegexNode(r);
		:}
	;
