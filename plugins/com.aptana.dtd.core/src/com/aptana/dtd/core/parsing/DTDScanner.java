/* The following code was generated by JFlex 1.4.3 on 12/4/12 8:46 AM */

// $codepro.audit.disable
/**
 * Aptana Studio
 * Copyright (c) 2005-2012 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.dtd.core.parsing;

import java.io.Reader;
import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;

import beaver.Symbol;
import beaver.Scanner;

import org.eclipse.core.internal.utils.StringPool;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/4/12 8:46 AM from the specification file
 * <tt>/Users/cwilliams/repos/studio3/plugins/com.aptana.dtd.core/parsing/DTD.flex</tt>
 */
public class DTDScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\11\1\5"+
    "\1\33\1\0\1\55\1\15\1\7\1\47\1\51\1\52\1\53\1\54"+
    "\1\12\1\3\1\0\12\3\1\4\1\16\1\10\1\0\1\13\1\14"+
    "\1\0\1\21\1\46\1\40\1\36\1\26\1\34\1\44\1\4\1\24"+
    "\1\4\1\45\1\23\1\27\1\30\1\32\1\37\1\42\1\41\1\25"+
    "\1\22\1\43\2\4\1\35\1\31\1\4\1\17\1\6\1\20\1\0"+
    "\1\4\1\0\32\4\1\0\1\50\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\1\1\1\7\1\1\5\4\1\1\2\4\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\0\1\17\1\1"+
    "\1\0\1\1\4\0\2\4\1\20\7\4\4\0\2\4"+
    "\3\0\1\21\4\0\1\22\1\23\1\24\11\4\4\0"+
    "\2\4\5\0\1\25\11\4\4\0\2\4\5\0\1\4"+
    "\1\26\2\4\1\27\3\4\1\30\4\0\1\4\1\31"+
    "\5\0\1\4\1\32\1\33\1\34\1\4\1\35\2\4"+
    "\1\0\1\36\2\0\1\37\1\40\4\0\1\41\1\4"+
    "\1\42\1\4\1\0\1\43\3\0\1\44\1\0\1\45"+
    "\1\46\1\47\1\50\1\0\1\51\1\52\1\0\1\53"+
    "\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\56\0\56\0\u0170\0\56\0\u019e\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\56\0\56\0\56"+
    "\0\56\0\56\0\56\0\u0170\0\u033c\0\56\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u036a\0\u03c6\0\u078c"+
    "\0\56\0\u07ba\0\u07e8\0\u0816\0\u0844\0\56\0\56\0\270"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\56\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\270\0\u105a\0\u1088"+
    "\0\u10b6\0\270\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\270"+
    "\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\270\0\270"+
    "\0\270\0\u12de\0\270\0\u130c\0\u133a\0\u1368\0\56\0\u1396"+
    "\0\u13c4\0\270\0\56\0\u13f2\0\u1420\0\u144e\0\u147c\0\270"+
    "\0\u14aa\0\u14d8\0\u1506\0\u1534\0\56\0\u1562\0\u1590\0\u15be"+
    "\0\56\0\u15ec\0\270\0\270\0\270\0\56\0\u161a\0\56"+
    "\0\56\0\u1648\0\56\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\2\1\4\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\2\5\1\17\1\20\1\21\1\5\1\22\2\5"+
    "\1\23\3\5\1\24\1\25\6\5\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\57\0\2\3\56\0\2\4"+
    "\5\0\1\4\6\0\12\4\1\0\13\4\12\0\2\5"+
    "\5\0\1\5\6\0\12\5\1\0\13\5\7\0\1\35"+
    "\1\0\3\35\1\36\1\37\47\35\1\40\1\0\4\40"+
    "\1\41\1\36\46\40\11\0\1\42\2\0\1\43\45\0"+
    "\1\44\14\0\12\44\1\0\13\44\27\0\1\45\40\0"+
    "\2\5\5\0\1\5\6\0\7\5\1\46\2\5\1\0"+
    "\13\5\12\0\2\5\5\0\1\5\6\0\7\5\1\47"+
    "\2\5\1\0\2\5\1\50\5\5\1\51\2\5\12\0"+
    "\2\5\5\0\1\5\6\0\10\5\1\52\1\5\1\0"+
    "\13\5\12\0\2\5\5\0\1\5\6\0\6\5\1\53"+
    "\1\54\2\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\6\5\1\55\2\5\1\56\1\0\2\5\1\57"+
    "\10\5\33\0\1\60\7\0\1\61\2\0\1\62\1\0"+
    "\1\63\17\0\2\5\5\0\1\5\6\0\12\5\1\0"+
    "\7\5\1\64\3\5\12\0\2\5\5\0\1\5\6\0"+
    "\12\5\1\0\2\5\1\65\10\5\7\0\1\35\1\0"+
    "\3\35\1\36\1\66\125\35\1\40\1\0\4\40\1\67"+
    "\1\36\124\40\12\0\1\70\4\0\1\71\1\0\1\72"+
    "\4\0\1\73\1\0\1\74\25\0\14\43\1\75\41\43"+
    "\3\0\2\44\5\0\1\44\3\0\1\76\2\0\12\44"+
    "\1\0\13\44\22\0\1\77\45\0\2\5\5\0\1\5"+
    "\6\0\10\5\1\100\1\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\12\5\1\0\4\5\1\101\6\5"+
    "\12\0\2\5\5\0\1\5\6\0\12\5\1\0\5\5"+
    "\1\102\5\5\12\0\2\5\5\0\1\5\6\0\7\5"+
    "\1\103\2\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\4\5\1\104\5\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\12\5\1\0\3\5\1\105\7\5"+
    "\12\0\2\5\5\0\1\5\6\0\1\5\1\106\10\5"+
    "\1\0\13\5\12\0\2\5\5\0\1\5\6\0\1\5"+
    "\1\107\10\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\1\5\1\110\10\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\1\111\11\5\1\0\13\5\36\0"+
    "\1\112\52\0\1\113\71\0\1\114\43\0\1\115\32\0"+
    "\2\5\5\0\1\5\6\0\12\5\1\0\12\5\1\116"+
    "\12\0\2\5\5\0\1\5\6\0\1\117\11\5\1\0"+
    "\13\5\21\0\1\120\65\0\1\121\56\0\1\122\4\0"+
    "\1\123\57\0\1\124\23\0\13\43\1\125\1\75\41\43"+
    "\3\0\2\5\5\0\1\5\6\0\2\5\1\126\7\5"+
    "\1\0\13\5\12\0\2\5\5\0\1\5\6\0\5\5"+
    "\1\127\4\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\11\5\1\130\1\0\13\5\12\0\2\5\5\0"+
    "\1\5\6\0\1\5\1\131\10\5\1\0\13\5\12\0"+
    "\2\5\5\0\1\5\6\0\1\5\1\132\10\5\1\0"+
    "\13\5\12\0\2\5\5\0\1\5\6\0\3\5\1\133"+
    "\6\5\1\0\13\5\12\0\2\5\5\0\1\5\6\0"+
    "\11\5\1\134\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\1\135\11\5\1\0\13\5\12\0\2\5\5\0"+
    "\1\5\6\0\1\5\1\136\10\5\1\0\13\5\46\0"+
    "\1\137\53\0\1\140\56\0\1\141\61\0\1\142\16\0"+
    "\2\5\5\0\1\5\6\0\2\5\1\143\7\5\1\0"+
    "\13\5\12\0\2\5\5\0\1\5\6\0\1\5\1\144"+
    "\10\5\1\0\13\5\7\0\12\120\1\145\43\120\22\0"+
    "\1\146\61\0\1\147\51\0\1\150\55\0\1\151\36\0"+
    "\2\5\5\0\1\5\6\0\12\5\1\0\7\5\1\152"+
    "\3\5\12\0\2\5\5\0\1\5\6\0\12\5\1\0"+
    "\1\153\12\5\12\0\2\5\5\0\1\5\6\0\12\5"+
    "\1\0\5\5\1\154\5\5\12\0\2\5\5\0\1\5"+
    "\6\0\5\5\1\155\4\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\10\5\1\156\1\5\1\0\13\5"+
    "\12\0\2\5\5\0\1\5\6\0\1\5\1\157\10\5"+
    "\1\0\13\5\12\0\2\5\5\0\1\5\6\0\12\5"+
    "\1\0\11\5\1\160\1\5\12\0\2\5\5\0\1\5"+
    "\6\0\1\5\1\161\10\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\1\162\11\5\1\0\13\5\32\0"+
    "\1\163\60\0\1\164\50\0\1\165\77\0\1\166\15\0"+
    "\2\5\5\0\1\5\6\0\3\5\1\167\6\5\1\0"+
    "\13\5\12\0\2\5\5\0\1\5\6\0\1\170\11\5"+
    "\1\0\13\5\7\0\12\120\1\171\43\120\23\0\1\172"+
    "\61\0\1\173\52\0\1\174\52\0\1\175\37\0\2\5"+
    "\5\0\1\5\6\0\12\5\1\0\2\5\1\176\10\5"+
    "\12\0\2\5\5\0\1\5\6\0\4\5\1\177\5\5"+
    "\1\0\13\5\12\0\2\5\5\0\1\5\6\0\5\5"+
    "\1\200\4\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\6\5\1\201\3\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\3\5\1\202\4\5\1\203\1\5"+
    "\1\0\13\5\12\0\2\5\5\0\1\5\6\0\5\5"+
    "\1\204\4\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\3\5\1\205\6\5\1\0\13\5\33\0\1\206"+
    "\67\0\1\207\41\0\1\210\57\0\1\211\34\0\2\5"+
    "\5\0\1\5\6\0\12\5\1\0\4\5\1\212\6\5"+
    "\7\0\12\120\1\171\1\213\42\120\24\0\1\214\57\0"+
    "\1\215\51\0\1\216\55\0\1\217\36\0\2\5\5\0"+
    "\1\5\6\0\5\5\1\220\4\5\1\0\13\5\12\0"+
    "\2\5\5\0\1\5\6\0\5\5\1\221\4\5\1\0"+
    "\13\5\12\0\2\5\5\0\1\5\6\0\7\5\1\222"+
    "\2\5\1\0\13\5\12\0\2\5\5\0\1\5\6\0"+
    "\11\5\1\223\1\0\13\5\35\0\1\224\50\0\1\225"+
    "\75\0\1\226\41\0\1\227\60\0\1\230\56\0\1\231"+
    "\50\0\1\232\34\0\2\5\5\0\1\5\6\0\4\5"+
    "\1\233\5\5\1\0\13\5\12\0\2\5\5\0\1\5"+
    "\6\0\4\5\1\234\5\5\1\0\13\5\12\0\2\5"+
    "\5\0\1\5\6\0\7\5\1\235\2\5\1\0\13\5"+
    "\45\0\1\236\45\0\1\237\51\0\1\240\55\0\1\241"+
    "\65\0\1\242\61\0\1\243\47\0\1\244\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\1\1\1\11\11\1\6\11"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\4\0\12\1"+
    "\4\0\2\1\3\0\1\11\4\0\2\11\12\1\4\0"+
    "\2\1\5\0\1\11\11\1\4\0\2\1\5\0\11\1"+
    "\4\0\2\1\5\0\10\1\1\0\1\11\2\0\1\1"+
    "\1\11\4\0\4\1\1\0\1\11\3\0\1\11\1\0"+
    "\3\1\1\11\1\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// last token used for look behind. Also needed when implementing the ITokenScanner interface
	private Symbol _lastToken;
	
	private StringPool _stringPool;

	public DTDScanner()
	{
		this((Reader) null);
	}

	public Symbol getLastToken()
	{
		return _lastToken;
	}

	private Symbol newToken(DTDTokenType type, Object value)
	{
		return newToken(type.getIndex(), value);
	}

	private Symbol newToken(DTDTokenType type)
	{
		return newToken(type.getIndex(), null);
	}
	
	private String pool(String value)
	{
		return _stringPool.add(value);
	}

	private Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yychar, yychar + yylength() - 1, value);
	}

	public Symbol nextToken() throws java.io.IOException, Scanner.Exception
	{
		try
		{
			// get next token
			_lastToken = yylex();
		} 
		catch (Scanner.Exception e)
		{
			// create default token type
			String text = yytext();
			int end = yychar + text.length() - 1;

			_lastToken = new Symbol(DTDTokenType.EOF.getIndex(), yychar, end, text);
		}

		return _lastToken;
	}

	public void setSource(String source)
	{
		yyreset(new StringReader(source));

		_stringPool = new StringPool();

		// clear last token
		_lastToken = null;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DTDScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DTDScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 45: break;
        case 36: 
          { return newToken(DTDTokenType.ENTITY);
          }
        case 46: break;
        case 15: 
          { return newToken(Terminals.STRING, pool(yytext()));
          }
        case 47: break;
        case 7: 
          { return newToken(DTDTokenType.LBRACKET);
          }
        case 48: break;
        case 17: 
          { return newToken(DTDTokenType.SECTION_START);
          }
        case 49: break;
        case 9: 
          { return newToken(DTDTokenType.PIPE);
          }
        case 50: break;
        case 18: 
          { return newToken(DTDTokenType.PE_REF);
          }
        case 51: break;
        case 20: 
          { return newToken(DTDTokenType.ANY, pool("ANY"));
          }
        case 52: break;
        case 41: 
          { return newToken(DTDTokenType.ATTLIST);
          }
        case 53: break;
        case 16: 
          { return newToken(DTDTokenType.ID_TYPE, pool("ID"));
          }
        case 54: break;
        case 4: 
          { return newToken(DTDTokenType.NAME, pool(yytext()));
          }
        case 55: break;
        case 40: 
          { return newToken(DTDTokenType.IMPLIED, pool("#IMPLIED"));
          }
        case 56: break;
        case 43: 
          { return newToken(DTDTokenType.REQUIRED, pool("#REQUIRED"));
          }
        case 57: break;
        case 33: 
          { return newToken(DTDTokenType.INCLUDE, pool("INCLUDE"));
          }
        case 58: break;
        case 44: 
          { return newToken(DTDTokenType.NOTATION);
          }
        case 59: break;
        case 6: 
          { return newToken(DTDTokenType.QUESTION);
          }
        case 60: break;
        case 24: 
          { return newToken(DTDTokenType.NDATA, pool("NDATA"));
          }
        case 61: break;
        case 8: 
          { return newToken(DTDTokenType.LPAREN);
          }
        case 62: break;
        case 3: 
          { return newToken(DTDTokenType.NMTOKEN, pool(yytext()));
          }
        case 63: break;
        case 39: 
          { return newToken(DTDTokenType.NOTATION_TYPE, pool("NOTATION"));
          }
        case 64: break;
        case 25: 
          { return newToken(DTDTokenType.CDATA_TYPE, pool("CDATA"));
          }
        case 65: break;
        case 31: 
          { return newToken(DTDTokenType.PUBLIC, pool("PUBLIC"));
          }
        case 66: break;
        case 29: 
          { return newToken(DTDTokenType.ENTITY_TYPE, pool("ENTITY"));
          }
        case 67: break;
        case 5: 
          { return newToken(DTDTokenType.GREATER_THAN);
          }
        case 68: break;
        case 26: 
          { return newToken(DTDTokenType.IDREFS_TYPE, pool("IDREFS"));
          }
        case 69: break;
        case 21: 
          { return newToken(Terminals.PI, pool(yytext()));
          }
        case 70: break;
        case 35: 
          { return newToken(DTDTokenType.PCDATA, pool("#PCDATA"));
          }
        case 71: break;
        case 34: 
          { return newToken(DTDTokenType.NMTOKEN_TYPE, pool("NMTOKEN"));
          }
        case 72: break;
        case 22: 
          { return newToken(DTDTokenType.IDREF_TYPE, pool("IDREF"));
          }
        case 73: break;
        case 38: 
          { return newToken(DTDTokenType.NMTOKENS_TYPE, pool("NMTOKENS"));
          }
        case 74: break;
        case 1: 
          { // make sure we reset the lexer state for next (potential) scan
				yybegin(YYINITIAL);
				throw new Scanner.Exception("Unexpected character '" + yytext() + "' around offset " + yychar);
          }
        case 75: break;
        case 12: 
          { return newToken(DTDTokenType.PLUS);
          }
        case 76: break;
        case 42: 
          { return newToken(DTDTokenType.ELEMENT);
          }
        case 77: break;
        case 14: 
          { return newToken(DTDTokenType.PERCENT);
          }
        case 78: break;
        case 13: 
          { return newToken(DTDTokenType.COMMA);
          }
        case 79: break;
        case 28: 
          { return newToken(DTDTokenType.SYSTEM, pool("SYSTEM"));
          }
        case 80: break;
        case 37: 
          { return newToken(DTDTokenType.ENTITIES_TYPE, pool("ENTITIES"));
          }
        case 81: break;
        case 32: 
          { return newToken(Terminals.COMMENT, pool(yytext()));
          }
        case 82: break;
        case 27: 
          { return newToken(DTDTokenType.IGNORE, pool("IGNORE"));
          }
        case 83: break;
        case 10: 
          { return newToken(DTDTokenType.RPAREN);
          }
        case 84: break;
        case 30: 
          { return newToken(DTDTokenType.FIXED, pool("#FIXED"));
          }
        case 85: break;
        case 23: 
          { return newToken(DTDTokenType.EMPTY, pool("EMPTY"));
          }
        case 86: break;
        case 11: 
          { return newToken(DTDTokenType.STAR);
          }
        case 87: break;
        case 19: 
          { return newToken(DTDTokenType.SECTION_END);
          }
        case 88: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return newToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
