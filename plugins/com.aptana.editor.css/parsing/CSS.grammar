%package "com.aptana.editor.css.parsing";
%class "CSSParser";
%import "com.aptana.editor.css.parsing.ast.*";

%terminals AT_KEYWORD, CHARSET, IMPORT, MEDIA, PAGE, FUNCTION;
%terminals SEMICOLON, COLON, COMMA, LCURLY, RCURLY, LBRACKET, RBRACKET, RPAREN, FORWARD_SLASH;
%terminals MINUS, PLUS, EQUAL, STAR;
%terminals IDENTIFIER, STRING, URL, NUMBER, CLASS, LENGTH, EMS, EXS, ANGLE, TIME, FREQUENCY, COLOR, PERCENTAGE;
%terminals IMPORTANT, PROPERTY, SELECTOR, HASH, INCLUDES, DASHMATCH;

%typeof IDENTIFIER, PROPERTY, STRING, URL, IMPORTANT, NUMBER, PERCENTAGE, LENGTH, EMS, EXS, ANGLE, TIME, FREQUENCY, COLOR, HASH, CLASS = "String";
%typeof Declaration, Declaration2 = "CSSDeclarationNode";
%typeof Expression, Function, Term = "CSSExpressionNode";
%typeof ImportWord, Identifier, IdentiferOrString, Separator, Primitive, TypeOrUniversalSelector, AttributeValueOperator = "String";
%typeof AttributeSelector = "CSSAttributeSelectorNode";

%goal Program;

Program
	=	Statements
	;

Statements
	=	Statements Statement
	|	Statement
	;

Statement
	=	CharSet
	|	Import
	|	Media
	|	Page
	|	AtRule
	|	Rule
	|	error
	;

CharSet
	=	CHARSET STRING.s SEMICOLON {:return new CSSCharSetNode(s);:}
	;

Import
	=	IMPORT ImportWord.s SEMICOLON {:return new CSSImportNode(s);:}
	|	IMPORT ImportWord.s List.m SEMICOLON {:return new CSSImportNode(s, m);:}
	;

Media
	=	MEDIA List.m LCURLY RCURLY {:return new CSSMediaNode(m);:}
	|	MEDIA List.m LCURLY Statements RCURLY {:return new CSSMediaNode(m);:}
	;
	
Page
	=	PAGE LCURLY RCURLY {:return new CSSPageNode();:}
	|	PAGE LCURLY Declarations.d RCURLY {:return new CSSPageNode(d.value);:}
	|	PAGE COLON IDENTIFIER.s LCURLY RCURLY {:return new CSSPageNode(s);:}
	|	PAGE COLON IDENTIFIER.s LCURLY Declarations.d RCURLY {:return new CSSPageNode(s, d.value);:}
	;

AtRule
	=	AT_KEYWORD STRING SEMICOLON
	|	AT_KEYWORD STRING LCURLY RCURLY
	;

Rule
	=	Selectors.s LCURLY RCURLY {:return new CSSRuleNode(s);:}
	|	Selectors.s LCURLY Declarations.d RCURLY {:return new CSSRuleNode(s, d.value);:}
	;

Function
	=	FUNCTION Expression.e RPAREN {:return new CSSFunctionNode(e);:}
	;
	
List
	=	List COMMA IDENTIFIER
	|	IDENTIFIER
	;

Declarations
	=	Subdeclarations
	|	Subdeclarations.l Declaration2.d {:_list_l.add(d); return _symbol_l;:}
	|	Declaration2
	;

Subdeclarations
	=	Subdeclarations Declaration
	|	Declaration
	;

Declaration
	=	Declaration2.d SEMICOLON {:((CSSDeclarationNode) d).setHasSemicolon(true); return d;:}
	|	SEMICOLON {:return new CSSDeclarationNode(true);:}
	;

Declaration2
	=	Identifier.i COLON Expression.e {:return new CSSDeclarationNode(i, e);:}
	|	Identifier.i COLON Expression.e IMPORTANT.s {:return new CSSDeclarationNode(i, e, s);:}
	|	error
	;

Expression
	=	Expression.e Separator.s Term.t {:return new CSSTermListNode(e, t, s);:}
	|	Expression.e Term.t {:return new CSSTermListNode(e, t);:}
	|	Term
	;

Term
	=	Primitive.p {:return new CSSTermNode(p);:}
	|	Function
	;

Selectors
	=	Selectors COMMA Selector
	|	Selector
	;

Selector
	=	Selector SimpleSelector
	|	SimpleSelector
	;

SimpleSelector
	=	TypeOrUniversalSelector.t AttributeSelectors.a {:return new CSSSimpleSelectorNode(t, a);:}
	|	TypeOrUniversalSelector.t {:return new CSSSimpleSelectorNode(t);:}
	|	AttributeSelectors.a {:return new CSSSimpleSelectorNode(a);:}
	;

AttributeSelectors
	=	AttributeSelectors AttributeSelector
	|	AttributeSelector
	;
	
AttributeSelector
	=	CLASS.c {:return new CSSAttributeSelectorNode(c);:}
	|	COLON IDENTIFIER.i {:return new CSSAttributeSelectorNode(":" + i);:}
	|	COLON Function.f {:return new CSSAttributeSelectorNode(f);:}
	|	COLOR.c {:return new CSSAttributeSelectorNode(c);:}
	|	HASH.h {:return new CSSAttributeSelectorNode(h);:}
	|	LBRACKET IDENTIFIER.i RBRACKET {:return new CSSAttributeSelectorNode("[" + i + "]");:}
	|	LBRACKET IDENTIFIER.i AttributeValueOperator.o IdentiferOrString.s RBRACKET {:return new CSSAttributeSelectorNode("[" + i + " " + o + " " + s + "]");:}
	;

ImportWord
	=	STRING
	|	URL
	;
	
Identifier
	=	IDENTIFIER
	|	PROPERTY
	;

IdentiferOrString
	=	IDENTIFIER
	|	STRING
	;
	
Separator
	=	FORWARD_SLASH
	|	COMMA
	|	PLUS
	|	MINUS
	;

Primitive
	=	NUMBER
	|	PERCENTAGE
	|	LENGTH
	|	EMS
	|	EXS
	|	ANGLE
	|	TIME
	|	FREQUENCY
	|	STRING
	|	IDENTIFIER
	|	URL
	|	COLOR
	;

TypeOrUniversalSelector
	=	IDENTIFIER
	|	STAR
	|	SELECTOR
	;
	
AttributeValueOperator
	=	EQUAL
	|	INCLUDES
	|	DASHMATCH
	;
