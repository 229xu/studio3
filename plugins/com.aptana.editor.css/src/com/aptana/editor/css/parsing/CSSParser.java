package com.aptana.editor.css.parsing;

import beaver.*;
import com.aptana.editor.css.parsing.ast.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.lexer.IRange;
import java.util.ArrayList;
import com.aptana.parsing.ast.ParseRootNode;
import java.util.List;
import com.aptana.parsing.ast.IParseRootNode;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CSS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class CSSParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9obLbbq55KGlPtfGIUC2MA8W1WZH2496IOXGCAM8O5Ct51mtm4LnGL5mO2A8fpZbp$wupd" +
		"w9owueuWxu0OYYe8RAkwYndq355pA#wfVPhedaybmd3ctg$hshLVrbdwl0USsD60iIj6EXR" +
		"WEv#5WZC5CHD4Fuz281FfW1EAeHHr6eXwZC1eNuqADkHIpSGaceGdDZAcIpt24ZJaWQqmxp" +
		"W$4JC2IL5Rp$4OKs#TdOYdwua2u2ACNziF#YA0Gn#0W5AHZv4uSnXXpDuijC4O#PGN1cDDG" +
		"Wa7oBnPfXjDnaStG3zVWMX7B3s3T7Z$Oy9Y2Cfo2tkYFQHY68bJWI0oLTRBMnnzBFbr$3CD" +
		"PImmJSHngM4k8rnCoQl5o7O9gcskwvlBOGt6oPPFAbgFLbsiWSvtAtf#1DXzxPQ22it0LAr" +
		"YC6JYNRR02#Pnj12imitOzsvYC2p07Dt3MOcZ1PJfhbxFYp5ap#YjGgVfviiRJotEgHpTwO" +
		"7ngJiReYA1RlTTtf4O4lX4nlwxib0psA1oDeSecSJY6O2hx31yB74yMx3C2sfF8dkZJcjzS" +
		"d4CsgTgp#Mm#5k1g17zjSBW68wXYpSFPeoBwSSBXcY$Y#WrprVRbJ9LmXPNoNUfFTKXZl5a" +
		"ePvM3gQ$GcSaLOpBuOuPm7ZgpckTnziHxRaOop7bivEYFu#XFu9WtKL7CTomTqyPtEfwwCp" +
		"6cWc1Cc9KsivUEPeZIUXaShftUARw5TNkygtmbtv#1NDU3k8f3V2Uz6Gxnd#OTykbQOheIp" +
		"3LgLq8zsmhMukLokLTukQAQgvDr0vMPdgHpHPahmjwxtBkwgo2gyrRCbUtoIVRHCBdAsOQ9" +
		"Yd5dYMZ5taotikBCMJFw97S$eo$ZtzEN6JrtcgnwyebKJQedaqFFjrewHuHUQaI4lwuiAZD" +
		"ORsOCw$3TR31zffzYwPFbjO#VxQfLPPcoZchDs767n309$3XsmB8btfipZrXi$5pGDGPK69" +
		"yDxA4fj7ohjNEpn2mYrXEhxFrQQwSH6wo$rDeEejmNUpEnqrJhtJlHdchCNRzJmSk0$FMuX" +
		"RYLc6dlRoVkO3kpxFqAQrUIMsZzTTPk8kPOVwkrswYxoVexR4tZYQJbIecuB$#2B3K9zREj" +
		"lvtOPVtTnDui#aJF$NIc#$GbnFoUOZ9oc5ya3zr4QsFMhlRLK9EXdP4bVWlHRlrzgZ5BMnr" +
		"cEV#VDcpT3LcubZpoBwTkgf$ZCl#0PfHzNcZwwzDlxgQTDTPkpAVFUMZikuPbzlOV#KlsoX" +
		"xvK$wGtR9BkPrw$PtuZVXIlf0Nv7ch$vNuHRsVYP$K#qW#KVkXwQ5iaxVbBNbSLibZygYib" +
		"4VaONb87fG7v7wvJtKxv3rvLfwHf#KfULVUaVTbkstzOsj$97vGxtlYE$M#9JhK#uRucjWg" +
		"RyhhibasoKRUlI8RPBsyh8gNzFgYNk#MksIvl2gloGgvL#wHD#H9UK9MorUoHVw6#TumNnR" +
		"cowEPEtSp$T4vqCYzVQp2vNbb4EQf5I9SmlYzU8Q529SdMOXmzOkWIQt3SyQSuWPcRpSeKD" +
		"j0Q$RqEjewsbfgQXbJIpz1Fq4#eRwZ9#48FJj3XCFJj81mU98L48wYcdurRPMYmABptdpZX" +
		"FaLuoX6MYGj9cLWiW$r#uWQ7rfzgFmFqbKKlG==");

		// suppress the error printouts
		private static class CSSEvents extends Events
		{
	
			public void scannerError(Scanner.Exception e)
			{
			}
	
			public void syntaxError(Symbol token)
			{
			}
	
			public void unexpectedTokenRemoved(Symbol token)
			{
			}
	
			public void missingTokenInserted(Symbol token)
			{
			}
	
			public void misspelledTokenReplaced(Symbol token)
			{
			}
	
			public void errorPhraseRemoved(Symbol error)
			{
			}
		}
		
	public synchronized IParseRootNode parse(IParseState parseState) throws java.lang.Exception
	{
		CSSScanner scanner = new CSSScanner();
		scanner.setSource(new String(parseState.getSource()));
		ParseRootNode result = (ParseRootNode) parse(scanner);
		int start = parseState.getStartingOffset();
		int end = start + parseState.getSource().length;
		result.setLocation(start, end);
		List<CSSCommentNode> commentNodes = new ArrayList<CSSCommentNode>();
		IRange[] comments = scanner.getComments();
		for (IRange comment : comments)
		{
			commentNodes.add(new CSSCommentNode(getSource(parseState, comment), comment.getStartingOffset(), comment
					.getEndingOffset()));
		}
		result.setCommentNodes(commentNodes.toArray(new CSSCommentNode[commentNodes.size()]));
		parseState.setParseResult(result);
		return result;
	}
	
	private String getSource(IParseState parseState, IRange comment)
	{
		char[] src = parseState.getSource();
		int length = comment.getLength();
		char[] dest = new char[length];
		System.arraycopy(src, comment.getStartingOffset(), dest, 0, length);
		return new String(dest);
	}

	public CSSParser() {
		super(PARSING_TABLES);


		report = new CSSEvents();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // Program = Statements.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final beaver.Symbol[] p = _list_p == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_p.toArray(new beaver.Symbol[_list_p.size()]);
					
			return new ParseRootNode(ICSSParserConstants.LANGUAGE, p, _symbol_p.getStart(), _symbol_p.getEnd());
			}
			case 1: // Program = 
			{
					
			return new ParseRootNode(ICSSParserConstants.LANGUAGE, new Symbol[0], 0, 0);
			}
			case 2: // Statements = Statements Statement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 3: // Statements = Statement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 11: // CharSet = CHARSET.c STRING.s SEMICOLON.e
			{
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol e = _symbols[offset + 3];
					
			return new CSSCharSetNode(s, c.getStart(), e.getEnd());
			}
			case 12: // Import = IMPORT.i ImportWord.s SEMICOLON.e
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol e = _symbols[offset + 3];
					
			return new CSSImportNode(s, i.getStart(), e.getEnd());
			}
			case 13: // Import = IMPORT.i ImportWord.s List.m SEMICOLON.e
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final String[] m = _list_m == null ? new String[0] : (String[]) _list_m.toArray(new String[_list_m.size()]);
					final Symbol e = _symbols[offset + 4];
					
			return new CSSImportNode(s, m, i.getStart(), e.getEnd());
			}
			case 14: // Media = MEDIA.m List.l LCURLY RCURLY.r
			{
					final Symbol m = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final String[] l = _list_l == null ? new String[0] : (String[]) _list_l.toArray(new String[_list_l.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new CSSMediaNode(l, m.getStart(), r.getEnd());
			}
			case 15: // Media = MEDIA.m List.l LCURLY Statements RCURLY.r
			{
					final Symbol m = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final String[] l = _list_l == null ? new String[0] : (String[]) _list_l.toArray(new String[_list_l.size()]);
					final Symbol r = _symbols[offset + 5];
					
			return new CSSMediaNode(l, m.getStart(), r.getEnd());
			}
			case 16: // Page = PAGE.p LCURLY RCURLY.r
			{
					final Symbol p = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 3];
					
			return new CSSPageNode(p.getStart(), r.getEnd());
			}
			case 17: // Page = PAGE.p LCURLY Declarations.d RCURLY.r
			{
					final Symbol p = _symbols[offset + 1];
					final Symbol d = _symbols[offset + 3];
					final Symbol r = _symbols[offset + 4];
					
			return new CSSPageNode(d.value, p.getStart(), r.getEnd());
			}
			case 18: // Page = PAGE.p COLON IDENTIFIER.s LCURLY RCURLY.r
			{
					final Symbol p = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					final Symbol r = _symbols[offset + 5];
					
			return new CSSPageNode(s, p.getStart(), r.getEnd());
			}
			case 19: // Page = PAGE.p COLON IDENTIFIER.s LCURLY Declarations.d RCURLY.r
			{
					final Symbol p = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					final Symbol d = _symbols[offset + 5];
					final Symbol r = _symbols[offset + 6];
					
			return new CSSPageNode(s, d.value, p.getStart(), r.getEnd());
			}
			case 20: // FontFace = FONTFACE.f LCURLY RCURLY.r
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 3];
					
			return new CSSFontFaceNode(f.getStart(), r.getEnd());
			}
			case 21: // FontFace = FONTFACE.f LCURLY Declarations.d RCURLY.r
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol d = _symbols[offset + 3];
					final Symbol r = _symbols[offset + 4];
					
			return new CSSFontFaceNode(f.getStart(), d.value, r.getEnd());
			}
			case 24: // Rule = Selectors.s LCURLY RCURLY.r
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final beaver.Symbol[] s = _list_s == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_s.toArray(new beaver.Symbol[_list_s.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new CSSRuleNode(s, r.getEnd());
			}
			case 25: // Rule = Selectors.s LCURLY Declarations.d RCURLY.r
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final beaver.Symbol[] s = _list_s == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_s.toArray(new beaver.Symbol[_list_s.size()]);
					final Symbol d = _symbols[offset + 3];
					final Symbol r = _symbols[offset + 4];
					
			return new CSSRuleNode(s, d.value, r.getEnd());
			}
			case 27: // Function = LPAREN.l Expression.e RPAREN.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new CSSFunctionNode(e, l.getStart(), r.getEnd());
			}
			case 28: // List = List COMMA IDENTIFIER
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 29: // List = IDENTIFIER
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 31: // Declarations = Subdeclarations.l Declaration2.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final CSSDeclarationNode[] l = _list_l == null ? new CSSDeclarationNode[0] : (CSSDeclarationNode[]) _list_l.toArray(new CSSDeclarationNode[_list_l.size()]);
					final Symbol _symbol_d = _symbols[offset + 2];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					
			_list_l.add(d); return _symbol_l;
			}
			case 33: // Subdeclarations = Subdeclarations Declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 34: // Subdeclarations = Declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 35: // Declaration = Declaration2.d SEMICOLON.s
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					final Symbol s = _symbols[offset + 2];
					
			((CSSDeclarationNode) d).setHasSemicolon(s); return d;
			}
			case 36: // Declaration = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new CSSDeclarationNode(s);
			}
			case 37: // Declaration2 = Identifier.i COLON Expression.e
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					
			return new CSSDeclarationNode(_symbol_i, e);
			}
			case 38: // Declaration2 = Identifier.i COLON Expression.e IMPORTANT.s
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					
			return new CSSDeclarationNode(_symbol_i, e, _symbol_s);
			}
			case 39: // Declaration2 = error.e
			{
					final Symbol e = _symbols[offset + 1];
					
			return new CSSErrorDeclarationNode(e.getStart(), e.getEnd());
			}
			case 40: // Expression = Expression.e Separator.s Term.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					
			return new CSSTermListNode(e, t, s);
			}
			case 41: // Expression = Expression.e Term.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					
			return new CSSTermListNode(e, t);
			}
			case 43: // Expression = error.e
			{
					final Symbol e = _symbols[offset + 1];
					
			return new CSSErrorExpressionNode(e.getStart(), e.getEnd());
			}
			case 44: // Term = Primitive.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final String p = (String) _symbol_p.value;
					
			return new CSSTermNode(_symbol_p);
			}
			case 46: // Selectors = Selectors Combinator Selector
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 47: // Selectors = Selector
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 48: // Selector = Selector SimpleSelector
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 49: // Selector = SimpleSelector
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 50: // SimpleSelector = TypeOrUniversalSelector.t AttributeSelectors.a
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					
			return new CSSSimpleSelectorNode(_symbol_t, a);
			}
			case 51: // SimpleSelector = TypeOrUniversalSelector.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					
			return new CSSSimpleSelectorNode(_symbol_t);
			}
			case 52: // SimpleSelector = AttributeSelectors.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					
			return new CSSSimpleSelectorNode(a);
			}
			case 53: // AttributeSelectors = AttributeSelectors AttributeSelector
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 54: // AttributeSelectors = AttributeSelector
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 55: // AttributeSelector = CLASS.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					
			return new CSSAttributeSelectorNode(c, _symbol_c.getStart(), _symbol_c.getEnd());
			}
			case 56: // AttributeSelector = COLON.c IDENTIFIER.i
			{
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					
			return new CSSAttributeSelectorNode(":" + i, c.getStart(), _symbol_i.getEnd());
			}
			case 57: // AttributeSelector = COLON.c Function.f
			{
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_f = _symbols[offset + 2];
					final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;
					
			return new CSSAttributeSelectorNode(f, c.getStart());
			}
			case 58: // AttributeSelector = COLOR.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					
			return new CSSAttributeSelectorNode(c, _symbol_c.getStart(), _symbol_c.getEnd());
			}
			case 59: // AttributeSelector = HASH.h
			{
					final Symbol _symbol_h = _symbols[offset + 1];
					final String h = (String) _symbol_h.value;
					
			return new CSSAttributeSelectorNode(h, _symbol_h.getStart(), _symbol_h.getEnd());
			}
			case 60: // AttributeSelector = LBRACKET.l IDENTIFIER.i RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol r = _symbols[offset + 3];
					
			return new CSSAttributeSelectorNode("[" + i + "]", l.getStart(), r.getEnd());
			}
			case 61: // AttributeSelector = LBRACKET.l IDENTIFIER.i AttributeValueOperator.o IdentiferOrString.s RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 3];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					final Symbol r = _symbols[offset + 5];
					
			return new CSSAttributeSelectorNode("[" + i + " " + o + " " + s + "]", l.getStart(), r.getEnd());
			}
			case 4: // Statement = CharSet
			case 5: // Statement = Import
			case 6: // Statement = Media
			case 7: // Statement = Page
			case 8: // Statement = FontFace
			case 9: // Statement = AtRule
			case 10: // Statement = Rule
			case 26: // Rule = error
			case 30: // Declarations = Subdeclarations
			case 32: // Declarations = Declaration2
			case 42: // Expression = Term
			case 45: // Term = Function
			case 62: // ImportWord = STRING
			case 63: // ImportWord = URL
			case 64: // Identifier = IDENTIFIER
			case 65: // Identifier = PROPERTY
			case 66: // IdentiferOrString = IDENTIFIER
			case 67: // IdentiferOrString = STRING
			case 68: // Separator = SLASH
			case 69: // Separator = COMMA
			case 70: // Separator = PLUS
			case 71: // Separator = MINUS
			case 72: // Combinator = COMMA
			case 73: // Combinator = PLUS
			case 74: // Combinator = GREATER
			case 75: // Primitive = NUMBER
			case 76: // Primitive = PERCENTAGE
			case 77: // Primitive = LENGTH
			case 78: // Primitive = EMS
			case 79: // Primitive = EXS
			case 80: // Primitive = ANGLE
			case 81: // Primitive = TIME
			case 82: // Primitive = FREQUENCY
			case 83: // Primitive = STRING
			case 84: // Primitive = IDENTIFIER
			case 85: // Primitive = URL
			case 86: // Primitive = COLOR
			case 87: // TypeOrUniversalSelector = IDENTIFIER
			case 88: // TypeOrUniversalSelector = STAR
			case 89: // TypeOrUniversalSelector = SELECTOR
			case 90: // AttributeValueOperator = EQUAL
			case 91: // AttributeValueOperator = INCLUDES
			case 92: // AttributeValueOperator = DASHMATCH
			{
				return _symbols[offset + 1];
			}
			case 22: // AtRule = AT_RULE STRING SEMICOLON
			{
				return _symbols[offset + 3];
			}
			case 23: // AtRule = AT_RULE STRING LCURLY RCURLY
			{
				return _symbols[offset + 4];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
