package com.aptana.editor.css.parsing;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CSS.grammar".
 */
public class CSSParser extends Parser {

    @SuppressWarnings("nls")
	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9obLLTqLKKKtVVT6qqYY0WX3G532o6aaeQ80H8b6XKBH8sz8w96nSQFIt$uqxLSIpzrBN$" +
		"i3Rj1HGKLKLImOSC2Y1KHiNFSS#RmSlDAG9otzioPEMNsd9dx3X1qe1dJK8ec3C8nE1x3CH" +
		"8jE0opS1p6eXerg4KTwZ4L3MZ4iIZ7JCn6cNgDerSdMdLridaLOdwQLm#kLA$hS0PEHH46u" +
		"sHwdOB3LNCKvgZcUfJWKbJWG2p23JW91MX7X1piX$sHYppaemq9tNS8ckGUifs0yJXOzpsQ" +
		"REUbxJjKhJl8SWQEm4Iox3JhIen8iovM9XqYk0hdunnCnuKu6nTW57TgLwPNOp5E9zFHP38" +
		"5LRes0Lt6$b0SW4Dm48OX9FjEZ4bXxwDUR55xS2REJKOzZH4km#MuWkmceHj7AlEvPDuNbS" +
		"pbS$aC9wGnTxOdqlOiFQVRfSLsgKopzIpEC$r5M81Bi13NA0lLoPDU9qymdcjUvvhtlTPy#" +
		"rhIDulEQM2QkEnExvexVL$hHi1xZlGNC9SpcRjyPc6Gvd48Sp6KjpwCBxN0Rh6OBwTGlHhf" +
		"KygSkTLnIQ$6DAzoPjbvLUez5jEca5x5VF5EKy7Nx3K1VxNKHPgzNEQucRcTnbkQpjVhijs" +
		"g##RHefsIOvWx0Dj8hKiukZqSorAphkEtaseTg5K9S#AyGZBnxycnQbAcW$crEAQ5PE9itP" +
		"hRrxCVoPSpYgzrZB8lvNf$zZvgaKLrla6$gEFvkYUINSZNKw7M0PdtHSrNNSZTqvdxd9GhA" +
		"xTBlkrIbz4sfDNkiytcrrN4Z3WM$HaMeLpOl4ubho$pUacsc6zc7JMKVDIupDEh3KyVywZd" +
		"3IovqR$EPSHI9my4QxKcpxLn0T7bP0RTnQ7DraVRU7E6EBSGDn5tspma8fFdsNYhZIk9#Ow" +
		"npLVlYUS0$1SH9NjXjp7B#ZfYVMo#XbX1RB3vMABRv3ly60ndjzFaCjDjfbmTYzEROQz$Y3" +
		"jDRYUschoDs95k7pHaFqyGnUAE81PdizrRy3fMSMZPHzyjAMTjJ#4tn#IUVUK7zu#R8QyPx" +
		"Exw7pdOdX8hZxZTv8KstaOiZzcipSAZDpxkWVEcxBgWm6oM#45soT$ob$mfVyZlyflirBLV" +
		"YHqg$QBzTk9dOejibczbgtbkq$uduaVvMZRfx0lPoFvJ#KGUbsNoc3mgZyZ3yf0yA0$8$NA" +
		"VtAjMtyZ7ia7MoRloZhmj7t7bG$b0tfVtPBtglv8lROyVjF#U#8vOAs#oNoEhvNLvILwa$8" +
		"8yBykbLwsUq$vPxP#Hf#KfMI6loKfvHLwMLsMLl25lYVjgkhHgjV8$qDMngGEWcVyypOXOF" +
		"q9M48U8TIHY9Ga9D#QmfeH4n8eTA2PpFaiHi0Q7XAlGWQAQyshQrb2kqIeR6XA6W3KjGGIA" +
		"9aDT2Xheqy2nYhPLb5tDhbGaTAmtJ8bX4dM#rZaa3Bld8P73AXGaqMQe#8#OyI#Z$zet");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	private final Action[] actions;

	public CSSParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Program = Statements
			new Action() {	// [1] Statements = Statements Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [2] Statements = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [3] Statement = AtRule
			Action.RETURN,	// [4] Statement = CharSet
			Action.RETURN,	// [5] Statement = Import
			Action.RETURN,	// [6] Statement = Media
			Action.RETURN,	// [7] Statement = Page
			Action.RETURN,	// [8] Statement = Rule
			Action.RETURN,	// [9] Statement = error
			RETURN3,	// [10] AtRule = AT_KEYWORD STRING SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN4,	// [11] AtRule = AT_KEYWORD STRING LCURLY RCURLY; returns 'RCURLY' although none is marked
			RETURN3,	// [12] CharSet = CHARSET STRING SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [13] Import = IMPORT ImportWord SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN4,	// [14] Import = IMPORT ImportWord List SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN4,	// [15] Media = MEDIA IDENTIFIER LCURLY RCURLY; returns 'RCURLY' although none is marked
			RETURN3,	// [16] Page = PAGE LCURLY RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [17] Page = PAGE LCURLY Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [18] Page = PAGE COLON IDENTIFIER LCURLY RCURLY; returns 'RCURLY' although none is marked
			RETURN3,	// [19] Rule = Selectors LCURLY RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [20] Rule = Selectors LCURLY Declarations RCURLY; returns 'RCURLY' although none is marked
			Action.RETURN,	// [21] ImportWord = STRING
			Action.RETURN,	// [22] ImportWord = URL
			RETURN3,	// [23] Function = FUNCTION Expression RPAREN; returns 'RPAREN' although none is marked
			new Action() {	// [24] List = List COMMA IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [25] List = IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [26] Declarations = Declarations SEMICOLON Declaration; returns 'Declaration' although none is marked
			RETURN2,	// [27] Declarations = Declarations SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [28] Declarations = Declaration
			Action.RETURN,	// [29] Declarations = SEMICOLON
			RETURN3,	// [30] Declaration = Identifier COLON Expression; returns 'Expression' although none is marked
			RETURN4,	// [31] Declaration = Identifier COLON Expression IMPORTANT; returns 'IMPORTANT' although none is marked
			Action.RETURN,	// [32] Identifier = IDENTIFIER
			Action.RETURN,	// [33] Identifier = PROPERTY
			RETURN3,	// [34] Expression = Expression Separator Primitive; returns 'Primitive' although none is marked
			RETURN3,	// [35] Expression = Expression Separator Function; returns 'Function' although none is marked
			RETURN2,	// [36] Expression = Expression Primitive; returns 'Primitive' although none is marked
			RETURN2,	// [37] Expression = Expression Function; returns 'Function' although none is marked
			Action.RETURN,	// [38] Expression = Term
			RETURN2,	// [39] Term = PlusMinus Primitive; returns 'Primitive' although none is marked
			Action.RETURN,	// [40] Term = Primitive
			Action.RETURN,	// [41] Term = Function
			Action.RETURN,	// [42] PlusMinus = MINUS
			Action.RETURN,	// [43] PlusMinus = PLUS
			Action.RETURN,	// [44] Separator = FORWARD_SLASH
			Action.RETURN,	// [45] Separator = COMMA
			Action.RETURN,	// [46] Separator = PLUS
			Action.RETURN,	// [47] Separator = MINUS
			new Action() {	// [48] Selectors = Selectors COMMA Selector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [49] Selectors = Selector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [50] Selector = Selector SimpleSelector; returns 'SimpleSelector' although none is marked
			RETURN3,	// [51] Selector = Selector Combinator SimpleSelector; returns 'SimpleSelector' although none is marked
			Action.RETURN,	// [52] Selector = SimpleSelector
			Action.RETURN,	// [53] SimpleSelector = TypeOrUniversalSelector
			RETURN2,	// [54] SimpleSelector = TypeOrUniversalSelector AttributeSelectors; returns 'AttributeSelectors' although none is marked
			Action.RETURN,	// [55] SimpleSelector = AttributeSelectors
			Action.RETURN,	// [56] Combinator = PLUS
			Action.RETURN,	// [57] Combinator = GREATER
			Action.RETURN,	// [58] TypeOrUniversalSelector = IDENTIFIER
			Action.RETURN,	// [59] TypeOrUniversalSelector = STAR
			Action.RETURN,	// [60] TypeOrUniversalSelector = SELECTOR
			new Action() {	// [61] AttributeSelectors = AttributeSelectors AttributeSelector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [62] AttributeSelectors = AttributeSelector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [63] AttributeSelector = CLASS
			RETURN2,	// [64] AttributeSelector = COLON IDENTIFIER; returns 'IDENTIFIER' although none is marked
			RETURN2,	// [65] AttributeSelector = COLON Function; returns 'Function' although none is marked
			Action.RETURN,	// [66] AttributeSelector = COLOR
			Action.RETURN,	// [67] AttributeSelector = HASH
			RETURN3,	// [68] AttributeSelector = LBRACKET IDENTIFIER RBRACKET; returns 'RBRACKET' although none is marked
			RETURN5,	// [69] AttributeSelector = LBRACKET IDENTIFIER AttributeValueOperator IdentiferOrString RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [70] AttributeValueOperator = EQUAL
			Action.RETURN,	// [71] AttributeValueOperator = INCLUDES
			Action.RETURN,	// [72] AttributeValueOperator = DASHMATCH
			Action.RETURN,	// [73] IdentiferOrString = IDENTIFIER
			Action.RETURN,	// [74] IdentiferOrString = STRING
			Action.RETURN,	// [75] Primitive = NUMBER
			Action.RETURN,	// [76] Primitive = PERCENTAGE
			Action.RETURN,	// [77] Primitive = LENGTH
			Action.RETURN,	// [78] Primitive = EMS
			Action.RETURN,	// [79] Primitive = EXS
			Action.RETURN,	// [80] Primitive = ANGLE
			Action.RETURN,	// [81] Primitive = TIME
			Action.RETURN,	// [82] Primitive = FREQUENCY
			Action.RETURN,	// [83] Primitive = STRING
			Action.RETURN,	// [84] Primitive = IDENTIFIER
			Action.RETURN,	// [85] Primitive = URL
			Action.RETURN	// [86] Primitive = COLOR
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
