// $codepro.audit.disable
/**
 * Aptana Studio
 * Copyright (c) 2005-2012 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.editor.css.parsing;

import java.util.ArrayList;
import java.util.List;

import beaver.Parser;
import beaver.ParsingTables;
import beaver.Scanner;
import beaver.Symbol;

import com.aptana.editor.css.ICSSConstants;
import com.aptana.editor.css.parsing.ast.CSSAtRuleNode;
import com.aptana.editor.css.parsing.ast.CSSAttributeSelectorNode;
import com.aptana.editor.css.parsing.ast.CSSCharSetNode;
import com.aptana.editor.css.parsing.ast.CSSCommentNode;
import com.aptana.editor.css.parsing.ast.CSSDeclarationNode;
import com.aptana.editor.css.parsing.ast.CSSErrorDeclarationNode;
import com.aptana.editor.css.parsing.ast.CSSErrorExpressionNode;
import com.aptana.editor.css.parsing.ast.CSSExpressionNode;
import com.aptana.editor.css.parsing.ast.CSSFontFaceNode;
import com.aptana.editor.css.parsing.ast.CSSFunctionNode;
import com.aptana.editor.css.parsing.ast.CSSImportNode;
import com.aptana.editor.css.parsing.ast.CSSMediaNode;
import com.aptana.editor.css.parsing.ast.CSSNamespaceNode;
import com.aptana.editor.css.parsing.ast.CSSNode;
import com.aptana.editor.css.parsing.ast.CSSPageNode;
import com.aptana.editor.css.parsing.ast.CSSPageSelectorNode;
import com.aptana.editor.css.parsing.ast.CSSParseRootNode;
import com.aptana.editor.css.parsing.ast.CSSRuleNode;
import com.aptana.editor.css.parsing.ast.CSSSelectorNode;
import com.aptana.editor.css.parsing.ast.CSSSimpleSelectorNode;
import com.aptana.editor.css.parsing.ast.CSSTermListNode;
import com.aptana.editor.css.parsing.ast.CSSTermNode;
import com.aptana.editor.css.parsing.ast.CSSTextNode;
import com.aptana.parsing.IParseState;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseError;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.ast.IParseRootNode;
import com.aptana.parsing.ast.ParseError;
import com.aptana.parsing.ast.ParseRootNode;
import com.aptana.parsing.lexer.IRange;
import com.aptana.parsing.util.ParseUtil;

/**
 * This class is a LALR parser generated by <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1 from the grammar
 * specification "CSS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes", "nls" })
public class CSSParser extends Parser implements IParser
{

	static final ParsingTables PARSING_TABLES = new ParsingTables(
			"U9pDLcTuL4KKFM#J3Pe4H4H4n12g69OGIaZ144921r4HKEo5ee8AIkyXzDvxxxqNmO856zW"
					+ "LEm8gebXG4K7Kwvdx9d6pkqYGFxpzpjmxy#wvPShR0Jn968y9c8L9c8B9c8ffc8wPc869c8"
					+ "svc8VvM825M8J5M88vM8hbM86LM8LbM8qrM8Thi1RhiG6Ri16RiGLRiUq2FHOEuN4qib42G"
					+ "z0CcHYEHr04O$00nk9oXCEB21J29RWKaOX24YqUWmUrqHsFuaaKHR9qHmgkG3og8G7LKGCr"
					+ "KGk9g8TYAAuU6oghB3B8kWhfg8$haOoIPBKCmQg4vhWIBR0TuvINWLBa6LOvf95t7Ncn8NY"
					+ "fQ62ZLKKMofFdGqNbDTNwibbVPvcYzLMszTK9gYzLRQ#bRLLKKLkVseQXKP2jiMpiDsjzhM"
					+ "M$G4lv6pcu4KCvSyRMdJcJRpQ6QQGi6#aXt8IRKGRHk1gjqGxtuZ8HSczGRa$EdijjmzcxW"
					+ "zp#682168J1Ecjtea9#BfbtA$DnbBRC9nZt7ZBlm$sCMrTvFivsfo1cAsN68SOltrGoksY#"
					+ "XklZ$FdGBO1frgm9Ud3Duj1B$ISphnJq3bepOzb79j7INRSkjBm5AJ8nfALvSYr1orlf4mM"
					+ "oR1lICWTtQON8crLmLdDOeJkAl57aZQRcZPhwmL4VMrCZE8Tkn17KRrTM76vJEH8FiitDPn"
					+ "JQ1p3Cqv5x0TmB7HZbOUu5Duf$7kvxyvZtheSAURAPrjqL3izcMD1EZUQfByArASeJNOndj"
					+ "JXFM0dMNPBhLehVcDBSyJ5SnrYUqd8yEnLuSYhnf5NcIRqmZzuG7gjoBHokXV5irYAAgvN4"
					+ "TJAdhmxtUXhdDfqdEaCjmhdll3Po5cCtP#oe4B6R4cwkfetGs5uREvA$Q7eAPlcOZSETqP0"
					+ "$mol3cNHPASmuafnepihPU2QQsL4cMYApSgEP#k9PNm9hD$NLj$ML3QhFfxODykrBrzONP6"
					+ "iim$rcpR6MtY1By5sKhfcnTMVEZLGu89B3slAlcU7MLsvCtgp7SXwoo7LNBuxVHUCjYhEMd"
					+ "#lGoZ1zUJkbElKeChriJLp3IoIlKH0pHPcPUKnZwICpNda6YPo$H8u5CZtCryS8cVmM6rOa"
					+ "$KVp2nIuPiOoHgjorosUbX6qZ0bbANnoBQcf9UM5M3gcGhNL2jNMOOKwofuTfMP7uSiTDVL"
					+ "JBun4jgoHRJLRHGdg4ShAv9VJI9vYzU7cKudvv6EeJGJYsIPmriDrBxXH$F9mtslVlC$ruE"
					+ "U9CfoxPSSW$IGv7YBMwES27$EbQcbryrLhPVLELiuCmQcikS19i$7QsV5Hn02hRxLoivLBQ"
					+ "DUJieFbZ2b8VW5nb$dfQ#bZ8UNW0d9R4yV8sKOvD#3TQPjJ2JQdA2VQ$Z8h8ubTLZzXvJuY"
					+ "pkfbYRfMvp#8as7rmu0dpDKzXUtONcA$ZTkUuyN$pSDJW#zQK3cUFpydWYXaEIUeTxNZtOY"
					+ "#Pw$PK#hSy#8SEfVDnGO#5OdL$uDNXQXP0BisH5jYgktlzdlNsPNkUWJmUDjmIblzlFCBuU"
					+ "yW$QKMq3Rtx2SJE$$RrYblPIk$iJrMYlLtrC$tcRFuYIOEk7hkFjUSZrXzcd$#vdnPcHNWf"
					+ "oLHs#fr2bAljUrO09kJ1VLtCO3F3bV8Nt96$f3JSaf#bvFocvpGqL#r$ONucTWkssIQJBMC"
					+ "uyHFghr4l2YRPPFsDie6jcjaXIoNaJ92Xiim6IevCaIoPR0Cae4om7hO8QjbWeoNSJ9M9ii"
					+ "gMMd7ryiwcI9hPQjiiICl4C#hjfjuJhLdjNr6swUrtKNi99R94baeYsI#p6Ll3Z5RPibCjP"
					+ "cXxNHj#qXlwIKzfOVCamNIN$f9NraiOsIqZ9AdPAdyAJ$Azt9ClfDlvQXy8qVaQ$bAlfJ3S"
					+ "aWEoXToG3wNp#HJ#KG#be$aGzal7yZxyfwyA#$8s$AMl2blo3xPAw$BQ$Agl28lonxv0UP$"
					+ "gpd$HStTlG7$bHjGJpu7KlblNqSHpjkUWPTtLG$XwDtrOaOQyqvZpcdCEOstZxhirsK$dJA"
					+ "TiXvbXY9SR$tLAPkotrHlXWOUYp3UFWp2BRnw6p4trlfw4tGKDIoIE9waDsMFtdPhwjtPKI"
					+ "HGDxVfU8M72BFIiRgNzrb7uRDeOf4PW4P#I3nFrF93un2e#WyJoFwq");

	private IParseState fParseState;

	// Collect the errors into a list of IParseErrors
	private class CSSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token == null || fParseState == null)
			{
				return;
			}
			fParseState.addError(new ParseError(ICSSConstants.CONTENT_TYPE_CSS, token, IParseError.Severity.ERROR));
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	public synchronized IParseRootNode parse(IParseState parseState) throws java.lang.Exception
	{
		fParseState = parseState;
		// grab source
		String source = fParseState.getSource();

		fParseState.clearErrors();

		// create scanner and send source to it
		CSSFlexScanner scanner = new CSSFlexScanner();
		scanner.setSource(source);

		// parse
		ParseRootNode result = (ParseRootNode) parse(scanner);

		// attach comments to parse root node
		List<Symbol> comments = scanner.getComments();
		List<CSSCommentNode> commentNodes = new ArrayList<CSSCommentNode>(comments.size());

		for (Symbol comment : comments)
		{
			// @formatter:off
			CSSCommentNode commentNode = new CSSCommentNode(
				source.substring(comment.getStart(), comment.getEnd() + 1),
				comment.getStart(),
				comment.getEnd()
			);
			// @formatter:on

			commentNodes.add(commentNode);
		}

		result.setCommentNodes(commentNodes.toArray(new IParseNode[commentNodes.size()]));

		// update node offsets
		int start = fParseState.getStartingOffset();
		int length = source.length();

		// align root with zero-based offset
		result.setLocation(0, length - 1);

		if (start != 0)
		{
			// shift all offsets to the correct position
			ParseUtil.addOffset(result, start);
		}

		// store results in the parse state
		fParseState.setParseResult(result);

		fParseState = null;

		return result;
	}

	private String getSource(IParseState parseState, IRange comment)
	{
		String src = parseState.getSource();
		int start = comment.getStartingOffset();
		int endIndex = start + comment.getLength();
		return new String(src.substring(start, endIndex));
	}

	public CSSParser()
	{
		super(PARSING_TABLES);

		report = new CSSEvents();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset)
	{
		switch (rule_num)
		{
			case 0: // Program = Statements.p
			{
				final Symbol _symbol_p = _symbols[offset + 1];
				final ArrayList _list_p = (ArrayList) _symbol_p.value;
				final CSSNode[] p = _list_p == null ? new CSSNode[0] : (CSSNode[]) _list_p.toArray(new CSSNode[_list_p
						.size()]);

				return new CSSParseRootNode(p);
			}
			case 1: // Program =
			{

				return new CSSParseRootNode();
			}
			case 2: // Statements = Statements Statement
			{
				((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value);
				return _symbols[offset + 1];
			}
			case 3: // Statements = Statement
			{
				ArrayList lst = new ArrayList();
				lst.add(_symbols[offset + 1].value);
				return new Symbol(lst);
			}
			case 12: // CharSet = CHARSET STRING.s SEMICOLON
			{
				final Symbol _symbol_s = _symbols[offset + 2];
				final String s = (String) _symbol_s.value;

				return new CSSCharSetNode(s);
			}
			case 13: // Import = IMPORT ImportWord.s SEMICOLON
			{
				final Symbol _symbol_s = _symbols[offset + 2];
				final String s = (String) _symbol_s.value;

				return new CSSImportNode(s);
			}
			case 14: // Import = IMPORT ImportWord.s List.w SEMICOLON
			{
				final Symbol _symbol_s = _symbols[offset + 2];
				final String s = (String) _symbol_s.value;
				final Symbol _symbol_w = _symbols[offset + 3];
				final List<CSSTextNode> w = (List<CSSTextNode>) _symbol_w.value;

				return new CSSImportNode(s, w.toArray(new CSSTextNode[w.size()]));
			}
			case 15: // Media = MEDIA_KEYWORD MediaExprs.m LCURLY RCURLY
			{
				final Symbol _symbol_m = _symbols[offset + 2];
				final ArrayList _list_m = (ArrayList) _symbol_m.value;
				final beaver.Symbol[] m = _list_m == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_m
						.toArray(new beaver.Symbol[_list_m.size()]);

				List<CSSTextNode> list = new ArrayList<CSSTextNode>();

				for (Symbol symbol : m)
				{
					CSSTextNode text = new CSSTextNode((String) symbol.value);

					text.setLocation(symbol.getStart(), symbol.getEnd());
					list.add(text);
				}

				return new CSSMediaNode(list.toArray(new CSSTextNode[list.size()]));
			}
			case 16: // Media = MEDIA_KEYWORD MediaExprs.m LCURLY Statements.s RCURLY
			{
				final Symbol _symbol_m = _symbols[offset + 2];
				final ArrayList _list_m = (ArrayList) _symbol_m.value;
				final beaver.Symbol[] m = _list_m == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_m
						.toArray(new beaver.Symbol[_list_m.size()]);
				final Symbol _symbol_s = _symbols[offset + 4];
				final ArrayList _list_s = (ArrayList) _symbol_s.value;
				final CSSNode[] s = _list_s == null ? new CSSNode[0] : (CSSNode[]) _list_s.toArray(new CSSNode[_list_s
						.size()]);

				List<CSSTextNode> list = new ArrayList<CSSTextNode>();

				for (Symbol symbol : m)
				{
					CSSTextNode text = new CSSTextNode((String) symbol.value);

					text.setLocation(symbol.getStart(), symbol.getEnd());
					list.add(text);
				}

				return new CSSMediaNode(list.toArray(new CSSTextNode[list.size()]), s);
			}
			case 17: // MediaExprs = MediaExprs MediaExpr
			{
				((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]);
				return _symbols[offset + 1];
			}
			case 18: // MediaExprs = MediaExpr
			{
				ArrayList lst = new ArrayList();
				lst.add(_symbols[offset + 1]);
				return new Symbol(lst);
			}
			case 59: // Page = PAGE LCURLY RCURLY
			{

				return new CSSPageNode();
			}
			case 60: // Page = PAGE LCURLY Declarations.d RCURLY
			{
				final Symbol _symbol_d = _symbols[offset + 3];
				final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;

				return new CSSPageNode(d);
			}
			case 61: // Page = PAGE COLON IDENTIFIER.s LCURLY RCURLY
			{
				final Symbol _symbol_s = _symbols[offset + 3];
				final String s = (String) _symbol_s.value;

				CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
				CSSPageNode result = new CSSPageNode();

				pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
				result.setSelector(pageSelector);

				return result;
			}
			case 62: // Page = PAGE COLON IDENTIFIER.s LCURLY Declarations.d RCURLY
			{
				final Symbol _symbol_s = _symbols[offset + 3];
				final String s = (String) _symbol_s.value;
				final Symbol _symbol_d = _symbols[offset + 5];
				final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;

				CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
				CSSPageNode result = new CSSPageNode(d);

				pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
				result.setSelector(pageSelector);

				return result;
			}
			case 63: // FontFace = FONTFACE LCURLY RCURLY
			{

				return new CSSFontFaceNode();
			}
			case 64: // FontFace = FONTFACE LCURLY Declarations.d RCURLY
			{
				final Symbol _symbol_d = _symbols[offset + 3];
				final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;

				return new CSSFontFaceNode(d);
			}
			case 65: // Namespace = NAMESPACE ImportWord.w SEMICOLON
			{
				final Symbol _symbol_w = _symbols[offset + 2];
				final String w = (String) _symbol_w.value;

				return new CSSNamespaceNode(w);
			}
			case 66: // Namespace = NAMESPACE IDENTIFIER.i ImportWord.w SEMICOLON
			{
				final Symbol _symbol_i = _symbols[offset + 2];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_w = _symbols[offset + 3];
				final String w = (String) _symbol_w.value;

				return new CSSNamespaceNode(i, w);
			}
			case 67: // AtRule = AT_RULE.a STRING.s SEMICOLON
			{
				final Symbol _symbol_a = _symbols[offset + 1];
				final String a = (String) _symbol_a.value;
				final Symbol _symbol_s = _symbols[offset + 2];
				final String s = (String) _symbol_s.value;

				return new CSSAtRuleNode(a, s);
			}
			case 68: // Rule = Selectors.s LCURLY RCURLY
			{
				final Symbol _symbol_s = _symbols[offset + 1];
				final List<CSSSelectorNode> s = (List<CSSSelectorNode>) _symbol_s.value;

				CSSRuleNode result = new CSSRuleNode(s);

				for (CSSSelectorNode selector : s)
				{
					selector.setParent(result);
				}

				return result;
			}
			case 69: // Rule = Selectors.s LCURLY Declarations.d RCURLY
			{
				final Symbol _symbol_s = _symbols[offset + 1];
				final List<CSSSelectorNode> s = (List<CSSSelectorNode>) _symbol_s.value;
				final Symbol _symbol_d = _symbols[offset + 3];
				final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;

				CSSRuleNode result = new CSSRuleNode(s, d);

				for (CSSSelectorNode selector : s)
				{
					selector.setParent(result);
				}

				CSSSelectorNode firstSelector = s.get(0);

				for (CSSDeclarationNode declaration : d)
				{
					declaration.setParent(firstSelector);
				}

				return result;
			}
			case 71: // Function = Identifier.i LPAREN Expression.e RPAREN
			{
				final Symbol _symbol_i = _symbols[offset + 1];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_e = _symbols[offset + 3];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;

				return new CSSFunctionNode(i, e);
			}
			case 72: // List = List COMMA IDENTIFIER.i
			{
				final Symbol _symbol_i = _symbols[offset + 3];
				final String i = (String) _symbol_i.value;

				List<CSSTextNode> list = (List<CSSTextNode>) _symbols[offset + 1].value;
				CSSTextNode text = new CSSTextNode(i);

				text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
				list.add(text);

				return _symbols[offset + 1];
			}
			case 73: // List = IDENTIFIER.i
			{
				final Symbol _symbol_i = _symbols[offset + 1];
				final String i = (String) _symbol_i.value;

				List<CSSTextNode> list = new ArrayList<CSSTextNode>();
				CSSTextNode text = new CSSTextNode(i);

				text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
				list.add(text);

				return new Symbol(list);
			}
			case 74: // Declarations = Declaration.d
			{
				final Symbol _symbol_d = _symbols[offset + 1];
				final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;

				List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

				list.add(d);

				return new Symbol(list);
			}
			case 75: // Declarations = Declaration.d SEMICOLON.s
			{
				final Symbol _symbol_d = _symbols[offset + 1];
				final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
				final Symbol s = _symbols[offset + 2];

				List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

				d.setHasSemicolon(s);
				list.add(d);

				return new Symbol(list);
			}
			case 76: // Declarations = Declarations.ds Declaration.d
			{
				final Symbol _symbol_ds = _symbols[offset + 1];
				final List<CSSDeclarationNode> ds = (List<CSSDeclarationNode>) _symbol_ds.value;
				final Symbol _symbol_d = _symbols[offset + 2];
				final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;

				ds.add(d);

				return _symbols[offset + 1];
			}
			case 77: // Declarations = Declarations.ds Declaration.d SEMICOLON.s
			{
				final Symbol _symbol_ds = _symbols[offset + 1];
				final List<CSSDeclarationNode> ds = (List<CSSDeclarationNode>) _symbol_ds.value;
				final Symbol _symbol_d = _symbols[offset + 2];
				final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
				final Symbol s = _symbols[offset + 3];

				d.setHasSemicolon(s);
				ds.add(d);

				return _symbols[offset + 1];
			}
			case 78: // Declaration = Identifier.i COLON Expression.e
			{
				final Symbol _symbol_i = _symbols[offset + 1];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_e = _symbols[offset + 3];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;

				return new CSSDeclarationNode(i, e);
			}
			case 79: // Declaration = Identifier.i COLON Expression.e IMPORTANT.s
			{
				final Symbol _symbol_i = _symbols[offset + 1];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_e = _symbols[offset + 3];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
				final Symbol s = _symbols[offset + 4];

				return new CSSDeclarationNode(i, e, s);
			}
			case 80: // Declaration = STAR.a Identifier.i COLON Expression.e
			{
				final Symbol _symbol_a = _symbols[offset + 1];
				final String a = (String) _symbol_a.value;
				final Symbol _symbol_i = _symbols[offset + 2];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_e = _symbols[offset + 4];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;

				return new CSSDeclarationNode(a + i, e);
			}
			case 81: // Declaration = STAR.a Identifier.i COLON Expression.e IMPORTANT.s
			{
				final Symbol _symbol_a = _symbols[offset + 1];
				final String a = (String) _symbol_a.value;
				final Symbol _symbol_i = _symbols[offset + 2];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_e = _symbols[offset + 4];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
				final Symbol s = _symbols[offset + 5];

				return new CSSDeclarationNode(a + i, e, s);
			}
			case 82: // Declaration = error
			{

				return new CSSErrorDeclarationNode();
			}
			case 83: // Expression = Expression.e Separator.s Term.t
			{
				final Symbol _symbol_e = _symbols[offset + 1];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
				final Symbol _symbol_s = _symbols[offset + 2];
				final String s = (String) _symbol_s.value;
				final Symbol _symbol_t = _symbols[offset + 3];
				final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;

				return new CSSTermListNode(e, t, s);
			}
			case 84: // Expression = Expression.e Term.t
			{
				final Symbol _symbol_e = _symbols[offset + 1];
				final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
				final Symbol _symbol_t = _symbols[offset + 2];
				final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;

				return new CSSTermListNode(e, t);
			}
			case 86: // Expression = error
			{

				return new CSSErrorExpressionNode();
			}
			case 87: // Term = Primitive.p
			{
				final Symbol _symbol_p = _symbols[offset + 1];
				final String p = (String) _symbol_p.value;

				return new CSSTermNode(p);
			}
			case 89: // Selectors = Selectors.ss Combinator.c Selector.s
			{
				final Symbol _symbol_ss = _symbols[offset + 1];
				final List<CSSSelectorNode> ss = (List<CSSSelectorNode>) _symbol_ss.value;
				final Symbol _symbol_c = _symbols[offset + 2];
				final String c = (String) _symbol_c.value;
				final Symbol _symbol_s = _symbols[offset + 3];
				final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;

				CSSSelectorNode lastSelector = ss.get(ss.size() - 1);
				lastSelector.setCombinator(c);

				ss.add(s);

				return _symbols[offset + 1];
			}
			case 90: // Selectors = Selector.s
			{
				final Symbol _symbol_s = _symbols[offset + 1];
				final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;

				List<CSSSelectorNode> list = new ArrayList<CSSSelectorNode>();

				list.add(s);

				return new Symbol(list);
			}
			case 91: // Selector = Selector.s SimpleSelector.ss
			{
				final Symbol _symbol_s = _symbols[offset + 1];
				final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
				final Symbol _symbol_ss = _symbols[offset + 2];
				final CSSSimpleSelectorNode ss = (CSSSimpleSelectorNode) _symbol_ss.value;

				s.addChild(ss);

				return s;
			}
			case 92: // Selector = SimpleSelector.ss
			{
				final Symbol _symbol_ss = _symbols[offset + 1];
				final CSSSimpleSelectorNode ss = (CSSSimpleSelectorNode) _symbol_ss.value;

				CSSSelectorNode selector = new CSSSelectorNode();

				selector.addChild(ss);

				return selector;
			}
			case 93: // SimpleSelector = TypeOrUniversalSelector.t AttributeSelectors.a
			{
				final Symbol _symbol_t = _symbols[offset + 1];
				final String t = (String) _symbol_t.value;
				final Symbol _symbol_a = _symbols[offset + 2];
				final ArrayList _list_a = (ArrayList) _symbol_a.value;
				final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0]
						: (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);

				return new CSSSimpleSelectorNode(t, a);
			}
			case 94: // SimpleSelector = TypeOrUniversalSelector.t
			{
				final Symbol _symbol_t = _symbols[offset + 1];
				final String t = (String) _symbol_t.value;

				return new CSSSimpleSelectorNode(t);
			}
			case 95: // SimpleSelector = AttributeSelectors.a
			{
				final Symbol _symbol_a = _symbols[offset + 1];
				final ArrayList _list_a = (ArrayList) _symbol_a.value;
				final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0]
						: (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);

				return new CSSSimpleSelectorNode(a);
			}
			case 96: // AttributeSelectors = AttributeSelectors AttributeSelector
			{
				((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value);
				return _symbols[offset + 1];
			}
			case 97: // AttributeSelectors = AttributeSelector
			{
				ArrayList lst = new ArrayList();
				lst.add(_symbols[offset + 1].value);
				return new Symbol(lst);
			}
			case 98: // AttributeSelector = CLASS.c
			{
				final Symbol _symbol_c = _symbols[offset + 1];
				final String c = (String) _symbol_c.value;

				return new CSSAttributeSelectorNode(c);
			}
			case 99: // AttributeSelector = COLON.c Identifier.i
			{
				final Symbol _symbol_c = _symbols[offset + 1];
				final String c = (String) _symbol_c.value;
				final Symbol _symbol_i = _symbols[offset + 2];
				final String i = (String) _symbol_i.value;

				return new CSSAttributeSelectorNode(c + i);
			}
			case 100: // AttributeSelector = COLON.c1 COLON.c2 Identifier.i
			{
				final Symbol _symbol_c1 = _symbols[offset + 1];
				final String c1 = (String) _symbol_c1.value;
				final Symbol _symbol_c2 = _symbols[offset + 2];
				final String c2 = (String) _symbol_c2.value;
				final Symbol _symbol_i = _symbols[offset + 3];
				final String i = (String) _symbol_i.value;

				return new CSSAttributeSelectorNode(c1 + c2 + i);
			}
			case 101: // AttributeSelector = COLON Function.f
			{
				final Symbol _symbol_f = _symbols[offset + 2];
				final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;

				return new CSSAttributeSelectorNode(f);
			}
			case 102: // AttributeSelector = HASH.h
			{
				final Symbol _symbol_h = _symbols[offset + 1];
				final String h = (String) _symbol_h.value;

				return new CSSAttributeSelectorNode(h);
			}
			case 103: // AttributeSelector = LBRACKET.l Identifier.i RBRACKET.r
			{
				final Symbol _symbol_l = _symbols[offset + 1];
				final String l = (String) _symbol_l.value;
				final Symbol _symbol_i = _symbols[offset + 2];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_r = _symbols[offset + 3];
				final String r = (String) _symbol_r.value;

				return new CSSAttributeSelectorNode(l + i + r);
			}
			case 104: // AttributeSelector = LBRACKET.l Identifier.i AttributeValueOperator.o IdentiferOrString.s
						// RBRACKET.r
			{
				final Symbol _symbol_l = _symbols[offset + 1];
				final String l = (String) _symbol_l.value;
				final Symbol _symbol_i = _symbols[offset + 2];
				final String i = (String) _symbol_i.value;
				final Symbol _symbol_o = _symbols[offset + 3];
				final String o = (String) _symbol_o.value;
				final Symbol _symbol_s = _symbols[offset + 4];
				final String s = (String) _symbol_s.value;
				final Symbol _symbol_r = _symbols[offset + 5];
				final String r = (String) _symbol_r.value;

				return new CSSAttributeSelectorNode(l + i + " " + o + " " + s + r);
			}
			case 4: // Statement = CharSet
			case 5: // Statement = Import
			case 6: // Statement = Media
			case 7: // Statement = Page
			case 8: // Statement = FontFace
			case 9: // Statement = Namespace
			case 10: // Statement = AtRule
			case 11: // Statement = Rule
			case 19: // MediaExpr = IDENTIFIER
			case 20: // MediaExpr = PROPERTY
			case 21: // MediaExpr = COLOR
			case 22: // MediaExpr = COLON
			case 23: // MediaExpr = RCURLY
			case 24: // MediaExpr = STRING
			case 25: // MediaExpr = LBRACKET
			case 26: // MediaExpr = CLASS
			case 27: // MediaExpr = HASH
			case 28: // MediaExpr = SEMICOLON
			case 29: // MediaExpr = URL
			case 30: // MediaExpr = STAR
			case 31: // MediaExpr = SELECTOR
			case 32: // MediaExpr = COMMA
			case 33: // MediaExpr = NUMBER
			case 34: // MediaExpr = PERCENTAGE
			case 35: // MediaExpr = LENGTH
			case 36: // MediaExpr = EMS
			case 37: // MediaExpr = EXS
			case 38: // MediaExpr = ANGLE
			case 39: // MediaExpr = TIME
			case 40: // MediaExpr = FREQUENCY
			case 41: // MediaExpr = PAGE
			case 42: // MediaExpr = AT_RULE
			case 43: // MediaExpr = CHARSET
			case 44: // MediaExpr = MEDIA_KEYWORD
			case 45: // MediaExpr = FONTFACE
			case 46: // MediaExpr = NAMESPACE
			case 47: // MediaExpr = IMPORT
			case 48: // MediaExpr = RBRACKET
			case 49: // MediaExpr = LPAREN
			case 50: // MediaExpr = PLUS
			case 51: // MediaExpr = SLASH
			case 52: // MediaExpr = MINUS
			case 53: // MediaExpr = RPAREN
			case 54: // MediaExpr = IMPORTANT
			case 55: // MediaExpr = GREATER
			case 56: // MediaExpr = EQUAL
			case 57: // MediaExpr = INCLUDES
			case 58: // MediaExpr = DASHMATCH
			case 70: // Rule = error
			case 85: // Expression = Term
			case 88: // Term = Function
			case 105: // ImportWord = STRING
			case 106: // ImportWord = URL
			case 107: // Identifier = IDENTIFIER
			case 108: // Identifier = PROPERTY
			case 109: // IdentiferOrString = IDENTIFIER
			case 110: // IdentiferOrString = STRING
			case 111: // Separator = SLASH
			case 112: // Separator = COMMA
			case 113: // Separator = PLUS
			case 114: // Separator = MINUS
			case 115: // Combinator = COMMA
			case 116: // Combinator = PLUS
			case 117: // Combinator = GREATER
			case 118: // Primitive = NUMBER
			case 119: // Primitive = PERCENTAGE
			case 120: // Primitive = LENGTH
			case 121: // Primitive = EMS
			case 122: // Primitive = EXS
			case 123: // Primitive = ANGLE
			case 124: // Primitive = TIME
			case 125: // Primitive = FREQUENCY
			case 126: // Primitive = STRING
			case 127: // Primitive = IDENTIFIER
			case 128: // Primitive = URL
			case 129: // Primitive = COLOR
			case 130: // TypeOrUniversalSelector = IDENTIFIER
			case 131: // TypeOrUniversalSelector = STAR
			case 132: // TypeOrUniversalSelector = SELECTOR
			case 133: // AttributeValueOperator = EQUAL
			case 134: // AttributeValueOperator = INCLUDES
			case 135: // AttributeValueOperator = DASHMATCH
			case 136: // AttributeValueOperator = BEGINS_WITH
			case 137: // AttributeValueOperator = ENDS_WITH
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
