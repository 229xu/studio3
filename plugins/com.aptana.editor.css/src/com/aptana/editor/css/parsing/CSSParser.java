package com.aptana.editor.css.parsing;

import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.ast.IParseRootNode;
import com.aptana.parsing.lexer.IRange;
import com.aptana.parsing.ast.ParseRootNode;
import com.aptana.editor.css.parsing.ast.*;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CSS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class CSSParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLcTq5aKKlPk2cW0YAWGa920buWS869A08PKMiIE2Y8fO4K5GUWYzzzvxxqqKKC62YY0" +
		"gTW71hc0N5SLolJix2I7xSKWEVzXpxhmti###lVDcvli6S8vZ94PXDCPW7CPYF2PW8YPXCg" +
		"PWAgPZ1cPY5cPZ3kPY7kPZ8HPXCPPW0PPY6fRX2Yp72gp4Agp66gp5Egp7XdFAM29eng78H" +
		"adqmq0yY6feWc6eWhin76KGXd0KmmMu41SX0f6u16LH2Y58G0QI48Nwo6PFoqp4fRWVjL0R" +
		"rw0Ewg8UhaMyoLTQ#Jn6gXYNuNAa8GNfObo5hZv6J$H2R$H1NuoGhbHbVq3PFKQoqLerYDR" +
		"gFgrb#Hzo48t7q55ADw8B7a5dD41vzCS0D9MUBDH48rH2WDCGW#8eXvjnEzhYObBCxePP0p" +
		"qiyr5nNMQiuNOot2iHE9rfz3Mq#ch87uQ7f2yKpNtwSd2z#K8BLCZJrZXFsotAduaRbBzLW" +
		"I$au0x3YqD5otDxBi$hjJ5rkHFDWYYhxAjSAExoAVFMQf3MwXwqms2Z9n4TCCItLbvajYAz" +
		"LV8Y7rO5WaS#hiXk9ke9FAd8cpZ55vd3oMP6RfGterkLqPrV3b3WJKkDv7$ZFlvQmjJoNjN" +
		"oTFPzbjK0rzaHcDYhrGPCZLghYgujQoraet0ZlESsQzl3qPa8zTMnkCvRILM#bCvDQPqET#" +
		"UNKQuehKfvdUuAsfqLjKgnseELjPUgQ6TNqqwEqxaubupXGJFMLAKZRAK3wiMhxWbQ0qVpR" +
		"wWA96i$f#YyfIagN6UjiTKGgLujxLAF6QctyJuDRhuivVCOqM94o$SqH4f3HH$3qrH3jMwY" +
		"xD4sUwxgCsaDysaDL$qTQNLh5QbSNgq2EbjkhLmzOMPV5TFEYorGAvVf66QcykGo0uOPOxZ" +
		"ryhYdCrrziLPVflnu#Qw#29##t2$4vAsZEvzSRJ5v#TCBVC5HBfUNaSTpUoxFwwMRF16gYr" +
		"zPKf3AXGTHbhjMCSfJoVGZTJgg#TRAYwobI2#l5#bM87XaG97DZDzSAn#f6VZNtz6OEoCto" +
		"fjHCMKqTT6lRu4t6idtXdhyjTHORYtzR7Sae5gQ4SDNhDhw9eEZ6hastBCQhotLIJJFAQlz" +
		"icc0T#9t20TT$spGaovaMR#3qCxwdQmT6OGJPxu8fxZNT#Bi#1vXh$MFMhl0sWsAQoFRqN8" +
		"w5qPVWUzkpkSVK8x1ieEBcEEa$Nu9DR$AbhFzaVRzl$BdsB6LrXuMOktxhVBhsl4MGYlhfm" +
		"exhR$RsXd2KklN5dQTqk6q5zgUhitfeQQR$SuXzRlOyMv2zfddvEmx#xoTJOMfp$a4FLLXz" +
		"rCHUTM5n4B4kV$BhOM#Nj#9ElNEAMbZ0a5unuJSFRBitEVfJ52p$HnpRBJQMkORssB71bbx" +
		"9DySJfmXJqLXc$LZRApx6z7L#llTVPylpxOWETeAQTRFAC8SkXSY9hEm#Su7wDda6VxBltc" +
		"IV$5Fdk0V$9s$cT7ZfjNl47yHdk7JdC7fbl6py9FnTWalSpDDBcwaVakvZgkuagCvYYCvWi" +
		"CvZ4CvX8CvY0DfFysjNCj9dCW97C#fNCFLNCzftCAdxFkNX1UDzuAmqtWxJFkyQPypxRF2T" +
		"c45bt4nbt0XvwitZtCvXxDDn2pJpZHjDlko3tkp5nTm4VipX$subECubcEuZSlv3t$az$oE" +
		"ntYKt$8RVisl#2M$uEVyZ9$o20$p4nxYGHxWn$o87$83li$t#2xVuNw#pRVu9lVn3Uxb7hx" +
		"EtNoDh$8L$g0FZz0Tq16WsrQ8kHqcdWKDzB$Rq21CDmyNuRgNXGYERchdDvAbErcQawKvMR" +
		"UAHketKZz5DaKsLJRD8CpSfUh9PgcV9J$98CGYLBS95s7cVfmXFqFZ6SPtT6FnaA3n1Dbul" +
		"OkNhIDRnrX7jwuGmT7zo4M8HMxVkvcbotSHi6XkaLa0JVEXVX5HDn#Q1K7D$m6dJRsi");

	// suppress the error printouts
	private static class CSSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	public synchronized IParseRootNode parse(IParseState parseState) throws java.lang.Exception
	{
		// grab source
		char[] characters = parseState.getSource();

		// make sure we have some source
		String source = (characters != null) ? new String(characters) : "";

		// create scanner and send source to it
		CSSScanner scanner = new CSSScanner();
		scanner.setSource(source);

		// parse
		ParseRootNode result = (ParseRootNode) parse(scanner);
		int start = parseState.getStartingOffset();
		int end = start + parseState.getSource().length;
		result.setLocation(start, end);

		// store results in the parse state
		parseState.setParseResult(result);

		// attach comments to parse root node
		IRange[] comments = scanner.getComments();
		CSSCommentNode[] commentNodes = new CSSCommentNode[comments.length];

		for (int i = 0; i < comments.length; i++)
		{
			IRange comment = comments[i];
			CSSCommentNode commentNode = new CSSCommentNode( //
				this.getSource(parseState, comment),
				comment.getStartingOffset(),
				comment.getEndingOffset()
			);

			commentNodes[i] = commentNode;
		}

		result.setCommentNodes(commentNodes);

		return result;
	}

	private String getSource(IParseState parseState, IRange comment)
	{
		char[] src = parseState.getSource();
		int length = comment.getLength();
		char[] dest = new char[length];

		System.arraycopy(src, comment.getStartingOffset(), dest, 0, length);

		return new String(dest);
	}

	public CSSParser() {
		super(PARSING_TABLES);


		report = new CSSEvents();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // Program = Statements.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final CSSNode[] p = _list_p == null ? new CSSNode[0] : (CSSNode[]) _list_p.toArray(new CSSNode[_list_p.size()]);
					
			return new CSSParseRootNode(p);
			}
			case 1: // Program = 
			{
					
			return new CSSParseRootNode();
			}
			case 2: // Statements = Statements Statement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 3: // Statements = Statement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 12: // CharSet = CHARSET STRING.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new CSSCharSetNode(s);
			}
			case 13: // Import = IMPORT ImportWord.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new CSSImportNode(s);
			}
			case 14: // Import = IMPORT ImportWord.s List.w SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_w = _symbols[offset + 3];
					final List<CSSTextNode> w = (List<CSSTextNode>) _symbol_w.value;
					
			return new CSSImportNode(s, w.toArray(new CSSTextNode[w.size()]));
			}
			case 15: // Media = MEDIA_KEYWORD MediaExprs.m LCURLY RCURLY
			{
					final Symbol _symbol_m = _symbols[offset + 2];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final beaver.Symbol[] m = _list_m == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_m.toArray(new beaver.Symbol[_list_m.size()]);
					
			List<CSSTextNode> list = new ArrayList<CSSTextNode>();

			for (Symbol symbol : m)
			{
				CSSTextNode text = new CSSTextNode((String) symbol.value);

				text.setLocation(symbol.getStart(), symbol.getEnd());
				list.add(text);
			}

			return new CSSMediaNode(list.toArray(new CSSTextNode[list.size()]));
			}
			case 16: // Media = MEDIA_KEYWORD MediaExprs.m LCURLY Statements.s RCURLY
			{
					final Symbol _symbol_m = _symbols[offset + 2];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final beaver.Symbol[] m = _list_m == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_m.toArray(new beaver.Symbol[_list_m.size()]);
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final CSSNode[] s = _list_s == null ? new CSSNode[0] : (CSSNode[]) _list_s.toArray(new CSSNode[_list_s.size()]);
					
			List<CSSTextNode> list = new ArrayList<CSSTextNode>();

			for (Symbol symbol : m)
			{
				CSSTextNode text = new CSSTextNode((String) symbol.value);

				text.setLocation(symbol.getStart(), symbol.getEnd());
				list.add(text);
			}

			return new CSSMediaNode(list.toArray(new CSSTextNode[list.size()]), s);
			}
			case 17: // MediaExprs = MediaExprs MediaExpr
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 18: // MediaExprs = MediaExpr
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 59: // Page = PAGE LCURLY RCURLY
			{
					
			return new CSSPageNode();
			}
			case 60: // Page = PAGE LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			return new CSSPageNode(d);
			}
			case 61: // Page = PAGE COLON IDENTIFIER.s LCURLY RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					
			CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
			CSSPageNode result = new CSSPageNode();

			pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
			result.setSelector(pageSelector);

			return result;
			}
			case 62: // Page = PAGE COLON IDENTIFIER.s LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
			CSSPageNode result = new CSSPageNode(d);

			pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
			result.setSelector(pageSelector);

			return result;
			}
			case 63: // FontFace = FONTFACE LCURLY RCURLY
			{
					
			return new CSSFontFaceNode();
			}
			case 64: // FontFace = FONTFACE LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			return new CSSFontFaceNode(d);
			}
			case 65: // Namespace = NAMESPACE ImportWord.w SEMICOLON
			{
					final Symbol _symbol_w = _symbols[offset + 2];
					final String w = (String) _symbol_w.value;
					
			return new CSSNamespaceNode(w);
			}
			case 66: // Namespace = NAMESPACE IDENTIFIER.i ImportWord.w SEMICOLON
			{
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_w = _symbols[offset + 3];
					final String w = (String) _symbol_w.value;
					
			return new CSSNamespaceNode(i, w);
			}
			case 67: // AtRule = AT_RULE.a STRING.s SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new CSSAtRuleNode(a, s);
			}
			case 68: // Rule = Selectors.s LCURLY RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final List<CSSSelectorNode> s = (List<CSSSelectorNode>) _symbol_s.value;
					
			CSSRuleNode result = new CSSRuleNode(s);

			for (CSSSelectorNode selector : s)
			{
				selector.setParent(result);
			}

			return result;
			}
			case 69: // Rule = Selectors.s LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final List<CSSSelectorNode> s = (List<CSSSelectorNode>) _symbol_s.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			CSSRuleNode result = new CSSRuleNode(s, d);

			for (CSSSelectorNode selector : s)
			{
				selector.setParent(result);
			}

			CSSSelectorNode firstSelector = s.get(0);

			for (CSSDeclarationNode declaration : d)
			{
				declaration.setParent(firstSelector);
			}

			return result;
			}
			case 71: // Function = Identifier.i LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					
			return new CSSFunctionNode(i, e);
			}
			case 72: // List = List COMMA IDENTIFIER.i
			{
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					
		List<CSSTextNode> list = (List<CSSTextNode>) _symbols[offset + 1].value;
		CSSTextNode text = new CSSTextNode(i);

		text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
		list.add(text);

		return _symbols[offset + 1];
			}
			case 73: // List = IDENTIFIER.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					
		List<CSSTextNode> list = new ArrayList<CSSTextNode>();
		CSSTextNode text = new CSSTextNode(i);

		text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
		list.add(text);

		return new Symbol(list);
			}
			case 74: // Declarations = Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					
			List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

			list.add(d);

			return new Symbol(list);
			}
			case 75: // Declarations = Declaration.d SEMICOLON.s
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					final Symbol s = _symbols[offset + 2];
					
			List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

			d.setHasSemicolon(s);
			list.add(d);

			return new Symbol(list);
			}
			case 76: // Declarations = Declarations.ds Declaration.d
			{
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List<CSSDeclarationNode> ds = (List<CSSDeclarationNode>) _symbol_ds.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					
			ds.add(d);

			return _symbols[offset + 1];
			}
			case 77: // Declarations = Declarations.ds Declaration.d SEMICOLON.s
			{
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List<CSSDeclarationNode> ds = (List<CSSDeclarationNode>) _symbol_ds.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					final Symbol s = _symbols[offset + 3];
					
			d.setHasSemicolon(s);
			ds.add(d);

			return _symbols[offset + 1];
			}
			case 78: // Declaration = Identifier.i COLON Expression.e
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					
			return new CSSDeclarationNode(i, e);
			}
			case 79: // Declaration = Identifier.i COLON Expression.e IMPORTANT.s
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					
			return new CSSDeclarationNode(i, e, s);
			}
			case 80: // Declaration = error
			{
					
			return new CSSErrorDeclarationNode();
			}
			case 81: // Expression = Expression.e Separator.s Term.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					
			return new CSSTermListNode(e, t, s);
			}
			case 82: // Expression = Expression.e Term.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					
			return new CSSTermListNode(e, t);
			}
			case 84: // Expression = error
			{
					
			return new CSSErrorExpressionNode();
			}
			case 85: // Term = Primitive.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final String p = (String) _symbol_p.value;
					
			return new CSSTermNode(p);
			}
			case 87: // Selectors = Selectors.ss Combinator.c Selector.s
			{
					final Symbol _symbol_ss = _symbols[offset + 1];
					final List<CSSSelectorNode> ss = (List<CSSSelectorNode>) _symbol_ss.value;
					final Symbol _symbol_c = _symbols[offset + 2];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
					
			CSSSelectorNode lastSelector = ss.get(ss.size() - 1);
			lastSelector.setCombinator(c);

			ss.add(s);

			return _symbols[offset + 1];
			}
			case 88: // Selectors = Selector.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
					
			List<CSSSelectorNode> list = new ArrayList<CSSSelectorNode>();

			list.add(s);

			return new Symbol(list);
			}
			case 89: // Selector = Selector.s SimpleSelector.ss
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
					final Symbol _symbol_ss = _symbols[offset + 2];
					final CSSSimpleSelectorNode ss = (CSSSimpleSelectorNode) _symbol_ss.value;
					
			s.addChild(ss);

			return s;
			}
			case 90: // Selector = SimpleSelector.ss
			{
					final Symbol _symbol_ss = _symbols[offset + 1];
					final CSSSimpleSelectorNode ss = (CSSSimpleSelectorNode) _symbol_ss.value;
					
			CSSSelectorNode selector = new CSSSelectorNode();

			selector.addChild(ss);

			return selector;
			}
			case 91: // SimpleSelector = TypeOrUniversalSelector.t AttributeSelectors.a
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					
			return new CSSSimpleSelectorNode(t, a);
			}
			case 92: // SimpleSelector = TypeOrUniversalSelector.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					
			return new CSSSimpleSelectorNode(t);
			}
			case 93: // SimpleSelector = AttributeSelectors.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					
			return new CSSSimpleSelectorNode(a);
			}
			case 94: // AttributeSelectors = AttributeSelectors AttributeSelector
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 95: // AttributeSelectors = AttributeSelector
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 96: // AttributeSelector = CLASS.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					
			return new CSSAttributeSelectorNode(c);
			}
			case 97: // AttributeSelector = COLON.c Identifier.i
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					
			return new CSSAttributeSelectorNode(c + i);
			}
			case 98: // AttributeSelector = COLON Function.f
			{
					final Symbol _symbol_f = _symbols[offset + 2];
					final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;
					
			return new CSSAttributeSelectorNode(f);
			}
			case 99: // AttributeSelector = COLOR.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					
			return new CSSAttributeSelectorNode(c);
			}
			case 100: // AttributeSelector = HASH.h
			{
					final Symbol _symbol_h = _symbols[offset + 1];
					final String h = (String) _symbol_h.value;
					
			return new CSSAttributeSelectorNode(h);
			}
			case 101: // AttributeSelector = LBRACKET.l Identifier.i RBRACKET.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					
			return new CSSAttributeSelectorNode(l + i + r);
			}
			case 102: // AttributeSelector = LBRACKET.l Identifier.i AttributeValueOperator.o IdentiferOrString.s RBRACKET.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 3];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final String r = (String) _symbol_r.value;
					
			return new CSSAttributeSelectorNode(l + i + " " + o + " " + s + r);
			}
			case 4: // Statement = CharSet
			case 5: // Statement = Import
			case 6: // Statement = Media
			case 7: // Statement = Page
			case 8: // Statement = FontFace
			case 9: // Statement = Namespace
			case 10: // Statement = AtRule
			case 11: // Statement = Rule
			case 19: // MediaExpr = IDENTIFIER
			case 20: // MediaExpr = PROPERTY
			case 21: // MediaExpr = COLOR
			case 22: // MediaExpr = COLON
			case 23: // MediaExpr = RCURLY
			case 24: // MediaExpr = STRING
			case 25: // MediaExpr = LBRACKET
			case 26: // MediaExpr = CLASS
			case 27: // MediaExpr = HASH
			case 28: // MediaExpr = SEMICOLON
			case 29: // MediaExpr = URL
			case 30: // MediaExpr = STAR
			case 31: // MediaExpr = SELECTOR
			case 32: // MediaExpr = COMMA
			case 33: // MediaExpr = NUMBER
			case 34: // MediaExpr = PERCENTAGE
			case 35: // MediaExpr = LENGTH
			case 36: // MediaExpr = EMS
			case 37: // MediaExpr = EXS
			case 38: // MediaExpr = ANGLE
			case 39: // MediaExpr = TIME
			case 40: // MediaExpr = FREQUENCY
			case 41: // MediaExpr = PAGE
			case 42: // MediaExpr = AT_RULE
			case 43: // MediaExpr = CHARSET
			case 44: // MediaExpr = MEDIA_KEYWORD
			case 45: // MediaExpr = FONTFACE
			case 46: // MediaExpr = NAMESPACE
			case 47: // MediaExpr = IMPORT
			case 48: // MediaExpr = RBRACKET
			case 49: // MediaExpr = LPAREN
			case 50: // MediaExpr = PLUS
			case 51: // MediaExpr = SLASH
			case 52: // MediaExpr = MINUS
			case 53: // MediaExpr = RPAREN
			case 54: // MediaExpr = IMPORTANT
			case 55: // MediaExpr = GREATER
			case 56: // MediaExpr = EQUAL
			case 57: // MediaExpr = INCLUDES
			case 58: // MediaExpr = DASHMATCH
			case 70: // Rule = error
			case 83: // Expression = Term
			case 86: // Term = Function
			case 103: // ImportWord = STRING
			case 104: // ImportWord = URL
			case 105: // Identifier = IDENTIFIER
			case 106: // Identifier = PROPERTY
			case 107: // IdentiferOrString = IDENTIFIER
			case 108: // IdentiferOrString = STRING
			case 109: // Separator = SLASH
			case 110: // Separator = COMMA
			case 111: // Separator = PLUS
			case 112: // Separator = MINUS
			case 113: // Combinator = COMMA
			case 114: // Combinator = PLUS
			case 115: // Combinator = GREATER
			case 116: // Primitive = NUMBER
			case 117: // Primitive = PERCENTAGE
			case 118: // Primitive = LENGTH
			case 119: // Primitive = EMS
			case 120: // Primitive = EXS
			case 121: // Primitive = ANGLE
			case 122: // Primitive = TIME
			case 123: // Primitive = FREQUENCY
			case 124: // Primitive = STRING
			case 125: // Primitive = IDENTIFIER
			case 126: // Primitive = URL
			case 127: // Primitive = COLOR
			case 128: // TypeOrUniversalSelector = IDENTIFIER
			case 129: // TypeOrUniversalSelector = STAR
			case 130: // TypeOrUniversalSelector = SELECTOR
			case 131: // AttributeValueOperator = EQUAL
			case 132: // AttributeValueOperator = INCLUDES
			case 133: // AttributeValueOperator = DASHMATCH
			case 134: // AttributeValueOperator = BEGINS_WITH
			case 135: // AttributeValueOperator = ENDS_WITH
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
