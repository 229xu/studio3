Index: src/org/eclipse/tm/internal/terminal/model/TerminalTextData.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/model/TerminalTextData.java,v
retrieving revision 1.6
diff -u -r1.6 TerminalTextData.java
--- src/org/eclipse/tm/internal/terminal/model/TerminalTextData.java	11 Apr 2008 17:37:13 -0000	1.6
+++ src/org/eclipse/tm/internal/terminal/model/TerminalTextData.java	10 Apr 2010 00:16:06 -0000
@@ -222,8 +222,10 @@
 
 	public void copy(ITerminalTextData source) {
 		fData.copy(source);
+		sendLinesChangedToSnapshot(0, getHeight());
 		fCursorLine=source.getCursorLine();
 		fCursorColumn=source.getCursorColumn();
+		sendCursorChanged();
 	}
 
 	public void copyLine(ITerminalTextData source, int sourceLine, int destLine) {
Index: src/org/eclipse/tm/internal/terminal/emulator/VT100Emulator.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/emulator/VT100Emulator.java,v
retrieving revision 1.13
diff -u -r1.13 VT100Emulator.java
--- src/org/eclipse/tm/internal/terminal/emulator/VT100Emulator.java	1 Feb 2009 12:40:23 -0000	1.13
+++ src/org/eclipse/tm/internal/terminal/emulator/VT100Emulator.java	10 Apr 2010 00:16:06 -0000
@@ -299,6 +299,10 @@
 				case '\u001b':
 					ansiState = ANSISTATE_ESCAPE; // Escape.
 					break;
+					
+				case '\u000e':
+				case '\u000f':
+					break;
 
 				default:
 					processNonControlCharacters(character);
@@ -328,6 +332,12 @@
 					ansiOsCommand.delete(0, ansiOsCommand.length());
 					break;
 
+				case '=':
+				case '>':
+					terminal.setApplicationKeypad(character == '=');
+					ansiState = ANSISTATE_INITIAL;
+					break;
+					
 				case '7':
 					// Save cursor position and character attributes
 
@@ -467,6 +477,11 @@
 			processAnsiCommand_G();
 			break;
 
+		case 'h':
+			// Set Mode.
+			processAnsiCommand_h();
+			break;
+
 		case 'H':
 			// Set cursor Position.
 			processAnsiCommand_H();
@@ -482,6 +497,11 @@
 			processAnsiCommand_K();
 			break;
 
+		case 'l':
+			// Reset Mode.
+			processAnsiCommand_l();
+			break;
+
 		case 'L':
 			// Insert line(s) (current line moves down).
 			processAnsiCommand_L();
@@ -507,6 +527,11 @@
 			processAnsiCommand_P();
 			break;
 
+		case 'r':
+			// Set Top and Bottom Margins.
+			processAnsiCommand_r();
+			break;
+
 		case 'S':
 			// Scroll up.
 			// Emacs, vi, and GNU readline don't seem to use this command, so we ignore
@@ -620,6 +645,58 @@
 	private void processAnsiCommand_H() {
 		moveCursor(getAnsiParameter(0) - 1, getAnsiParameter(1) - 1);
 	}
+	
+	/**
+	 * This method sets terminal mode.
+	 */
+	private void processAnsiCommand_h() {
+		if (ansiParameters.length > 0 && ansiParameters[0].length() > 0) {
+			if (ansiParameters[0].charAt(0) == '?') {
+				ansiParameters[0].deleteCharAt(0);
+				int ansiParameter = getAnsiParameter(0);
+				switch (ansiParameter) {
+				case 1:
+					terminal.setApplicationKeypad(true);
+					break;
+				case 47:
+					text.setAlternativeScreenBuffer(true);
+					break;
+				case 1049:
+					// TODO: store position
+					text.setAlternativeScreenBuffer(true);
+					break;
+				}
+			} else {
+				
+			}
+		}
+	}
+
+	/**
+	 * This method resets terminal mode.
+	 */
+	private void processAnsiCommand_l() {
+		if (ansiParameters.length > 0 && ansiParameters[0].length() > 0) {
+			if (ansiParameters[0].charAt(0) == '?') {
+				ansiParameters[0].deleteCharAt(0);
+				int ansiParameter = getAnsiParameter(0);
+				switch (ansiParameter) {
+				case 1:
+					terminal.setApplicationKeypad(false);
+					break;
+				case 47:
+					text.setAlternativeScreenBuffer(false);
+					break;
+				case 1049:
+					// TODO: restore position
+					text.setAlternativeScreenBuffer(false);
+					break;
+				}
+			} else {
+				
+			}
+		}
+	}
 
 	/**
 	 * This method deletes some (or all) of the text on the screen without
@@ -858,6 +935,13 @@
 	private void processAnsiCommand_P() {
 		text.deleteCharacters(getAnsiParameter(0));
 	}
+	
+	/**
+	 * Set Top and Bottom Margins
+	 */
+	private void processAnsiCommand_r() {
+		text.setScrollingRegion(getAnsiParameter(0), getAnsiParameter(1));
+	}
 
 	/**
 	 * This method returns one of the numeric ANSI parameters received in the
@@ -923,7 +1007,8 @@
 			character=getNextChar();
 			if(character == '\u0000' || character == '\b' || character == '\t'
 				|| character == '\u0007' || character == '\n'
-				|| character == '\r' || character == '\u001b') {
+				|| character == '\r' || character == '\u001b'
+				|| character == '\u000e' || character == '\u000f') {
 				pushBackChar(character);
 				break;
 			}
Index: src/org/eclipse/tm/internal/terminal/emulator/IVT100EmulatorBackend.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/emulator/IVT100EmulatorBackend.java,v
retrieving revision 1.2
diff -u -r1.2 IVT100EmulatorBackend.java
--- src/org/eclipse/tm/internal/terminal/emulator/IVT100EmulatorBackend.java	19 Sep 2007 02:08:10 -0000	1.2
+++ src/org/eclipse/tm/internal/terminal/emulator/IVT100EmulatorBackend.java	10 Apr 2010 00:16:05 -0000
@@ -169,4 +169,8 @@
 
 	int getColumns();
 
+	void setScrollingRegion(int topLine, int bottomLine);
+	
+	void setAlternativeScreenBuffer(boolean enable);
+
 }
\ No newline at end of file
Index: src/org/eclipse/tm/internal/terminal/emulator/VT100TerminalControl.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/emulator/VT100TerminalControl.java,v
retrieving revision 1.27
diff -u -r1.27 VT100TerminalControl.java
--- src/org/eclipse/tm/internal/terminal/emulator/VT100TerminalControl.java	4 Dec 2008 19:37:11 -0000	1.27
+++ src/org/eclipse/tm/internal/terminal/emulator/VT100TerminalControl.java	10 Apr 2010 00:16:06 -0000
@@ -67,6 +67,7 @@
 import org.eclipse.tm.internal.terminal.provisional.api.ITerminalControl;
 import org.eclipse.tm.internal.terminal.provisional.api.Logger;
 import org.eclipse.tm.internal.terminal.provisional.api.TerminalState;
+import org.eclipse.tm.internal.terminal.textcanvas.ILinelRenderer;
 import org.eclipse.tm.internal.terminal.textcanvas.ITextCanvasModel;
 import org.eclipse.tm.internal.terminal.textcanvas.PipedInputStream;
 import org.eclipse.tm.internal.terminal.textcanvas.PollingTextCanvasModel;
@@ -119,6 +120,8 @@
 
 	private volatile TerminalState fState;
 
+	private boolean isApplicationKeypad = false;
+
 	private final ITerminalTextData fTerminalModel;
 
 	/**
@@ -574,7 +577,7 @@
 		// TODO how to get the initial size correctly!
 		snapshot.updateSnapshot(false);
 		ITextCanvasModel canvasModel=new PollingTextCanvasModel(snapshot);
-		fCtlText=new TextCanvas(fWndParent,canvasModel,SWT.NONE,new TextLineRenderer(fCtlText,canvasModel));
+		fCtlText=new TextCanvas(fWndParent,canvasModel,SWT.NONE,createLineRenderer(canvasModel));
 
 
 		fCtlText.setLayoutData(new GridData(GridData.FILL_BOTH));
@@ -591,6 +594,10 @@
 //		fViewer.setDocument(new TerminalDocument());
 		setFont(JFaceResources.getTextFont());
 	}
+	
+	protected ILinelRenderer createLineRenderer(ITextCanvasModel model) {
+		return new TextLineRenderer(null,model);
+	}
 
 	protected void setupListeners() {
 		fKeyHandler = new TerminalKeyHandler();
@@ -773,19 +780,19 @@
 
 				switch (event.keyCode) {
 				case 0x1000001: // Up arrow.
-					sendString("\u001b[A"); //$NON-NLS-1$
+					sendString(isApplicationKeypad ? "\u001bOA" : "\u001b[A"); //$NON-NLS-1$ //$NON-NLS-2$
 					break;
 
 				case 0x1000002: // Down arrow.
-					sendString("\u001b[B"); //$NON-NLS-1$
+					sendString(isApplicationKeypad ? "\u001bOB" : "\u001b[B"); //$NON-NLS-1$ //$NON-NLS-2$
 					break;
 
 				case 0x1000003: // Left arrow.
-					sendString("\u001b[D"); //$NON-NLS-1$
+					sendString(isApplicationKeypad ? "\u001bOD" : "\u001b[D"); //$NON-NLS-1$ //$NON-NLS-2$
 					break;
 
 				case 0x1000004: // Right arrow.
-					sendString("\u001b[C"); //$NON-NLS-1$
+					sendString(isApplicationKeypad ? "\u001bOC" : "\u001b[C"); //$NON-NLS-1$ //$NON-NLS-2$
 					break;
 
 				case 0x1000005: // PgUp key.
@@ -797,11 +804,11 @@
 					break;
 
 				case 0x1000007: // Home key.
-					sendString("\u001b[H"); //$NON-NLS-1$
+					sendString(isApplicationKeypad ? "\u001bOH" : "\u001b[H"); //$NON-NLS-1$ //$NON-NLS-2$
 					break;
 
 				case 0x1000008: // End key.
-					sendString("\u001b[F"); //$NON-NLS-1$
+					sendString(isApplicationKeypad ? "\u001bOF" : "\u001b[F"); //$NON-NLS-1$ //$NON-NLS-2$
 					break;
 
 				case 0x100000a: // F1 key.
@@ -867,6 +874,17 @@
 				// It's ok to return here, because we never locally echo special keys.
 
 				return;
+			} else if (event.stateMask == 0) {
+				switch (event.keyCode) {
+				case 8:
+					sendString("\u007f"); //$NON-NLS-1$
+					return;
+				case 127:
+					sendString("\u001b[3~"); //$NON-NLS-1$
+					return;
+				default:
+					break;
+				}
 			}
 
 			// To fix SPR 110341, we consider the Alt key to be pressed only when the
@@ -1019,4 +1037,8 @@
 	public void setInvertedColors(boolean invert) {
 		fCtlText.setInvertedColors(invert);
 	}
+
+	public void setApplicationKeypad(boolean mode) {
+		isApplicationKeypad = mode;
+	}
 }
Index: src/org/eclipse/tm/internal/terminal/emulator/VT100BackendTraceDecorator.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/emulator/VT100BackendTraceDecorator.java,v
retrieving revision 1.2
diff -u -r1.2 VT100BackendTraceDecorator.java
--- src/org/eclipse/tm/internal/terminal/emulator/VT100BackendTraceDecorator.java	19 Sep 2007 02:08:10 -0000	1.2
+++ src/org/eclipse/tm/internal/terminal/emulator/VT100BackendTraceDecorator.java	10 Apr 2010 00:16:05 -0000
@@ -141,4 +141,14 @@
 		fBackend.setStyle(style);
 	}
 
+	public void setScrollingRegion(int topLine, int bottomLine) {
+		fWriter.println("setScrollingRegion("+topLine+", "+bottomLine+")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+		fBackend.setScrollingRegion(topLine, bottomLine);
+	}
+
+	public void setAlternativeScreenBuffer(boolean enable) {
+		fWriter.println("setAlternativeScreenBuffer("+enable+")"); //$NON-NLS-1$ //$NON-NLS-2$
+		fBackend.setAlternativeScreenBuffer(enable);
+	}
+
 }
Index: src/org/eclipse/tm/internal/terminal/emulator/VT100EmulatorBackend.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/emulator/VT100EmulatorBackend.java,v
retrieving revision 1.3
diff -u -r1.3 VT100EmulatorBackend.java
--- src/org/eclipse/tm/internal/terminal/emulator/VT100EmulatorBackend.java	8 Oct 2007 21:12:56 -0000	1.3
+++ src/org/eclipse/tm/internal/terminal/emulator/VT100EmulatorBackend.java	10 Apr 2010 00:16:06 -0000
@@ -10,6 +10,9 @@
  *******************************************************************************/
 package org.eclipse.tm.internal.terminal.emulator;
 
+import java.util.Stack;
+
+import org.eclipse.tm.internal.terminal.model.TerminalTextDataStore;
 import org.eclipse.tm.terminal.model.ITerminalTextData;
 import org.eclipse.tm.terminal.model.Style;
 
@@ -50,6 +53,10 @@
 	private Style fStyle;
 	int fLines;
 	int fColumns;
+	int fScrollingRegionTopLine;
+	int fScrollingRegionBottomLine;
+	Stack fBufferStack = new Stack();
+	
 	final private ITerminalTextData fTerminal;
 	public VT100EmulatorBackend(ITerminalTextData terminal) {
 		fTerminal=terminal;
@@ -103,6 +110,7 @@
 			}
 			fLines=lines;
 			fColumns=cols;
+			setScrollingRegion(1, fLines);
 			// make the terminal at least as high as we need lines
 			fTerminal.setDimensions(newLines, fColumns);
 			setCursor(cl, cc);
@@ -206,7 +214,7 @@
 				return;
 			assert n>0;
 			int line=toAbsoluteLine(fCursorLine);
-			int nLines=fTerminal.getHeight()-line;
+			int nLines=toAbsoluteLine(fScrollingRegionBottomLine)-line;
 			fTerminal.scroll(line, nLines, n);
 		}
 	}
@@ -236,13 +244,13 @@
 				return;
 			assert n>0;
 			int line=toAbsoluteLine(fCursorLine);
-			int nLines=fTerminal.getHeight()-line;
+			int nLines=toAbsoluteLine(fScrollingRegionBottomLine)-line;
 			fTerminal.scroll(line, nLines, -n);
 		}
 	}
+	
 	private boolean isCusorInScrollingRegion() {
-		// TODO Auto-generated method stub
-		return true;
+		return (fScrollingRegionTopLine <= fCursorLine && fCursorLine <= fScrollingRegionBottomLine);
 	}
 
 	/* (non-Javadoc)
@@ -295,7 +303,7 @@
 				int col=fCursorColumn+n;
 				i+=n;
 				// wrap needed?
-				if(col>=fColumns) {
+				if(col>fColumns) {
 					doNewline();
 					line=toAbsoluteLine(fCursorLine);
 					setCursorColumn(0);
@@ -315,6 +323,8 @@
 			fTerminal.addLine();
 			if(h!=fTerminal.getHeight())
 				setCursorLine(fCursorLine+1);
+		} else if (fScrollingRegionTopLine != 0 || fScrollingRegionBottomLine != fLines-1) {
+			fTerminal.scroll(toAbsoluteLine(fScrollingRegionTopLine), fScrollingRegionBottomLine-fScrollingRegionTopLine+1, -1);
 		} else {
 			setCursorLine(fCursorLine+1);
 		}
@@ -404,4 +414,28 @@
 			return fColumns;
 		}
 	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.tm.internal.terminal.emulator.IVT100EmulatorBackend#setScrollingRegion(int, int)
+	 */
+	public void setScrollingRegion(int topLine, int bottomLine) {
+		fScrollingRegionTopLine=topLine-1;
+		fScrollingRegionBottomLine=bottomLine-1;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.tm.internal.terminal.emulator.IVT100EmulatorBackend#setAlternativeScreenBuffer(boolean)
+	 */
+	public void setAlternativeScreenBuffer(boolean enable) {
+		synchronized (fTerminal) {
+			if (enable) {
+				ITerminalTextData data = new TerminalTextDataStore();
+				data.copy(fTerminal);
+				fBufferStack.push(data);
+			} else if (!fBufferStack.isEmpty()) {
+				ITerminalTextData data = (ITerminalTextData) fBufferStack.pop();
+				fTerminal.copy(data);
+			}
+		}
+	}
 }
Index: src/org/eclipse/tm/internal/terminal/textcanvas/StyleMap.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/textcanvas/StyleMap.java,v
retrieving revision 1.14
diff -u -r1.14 StyleMap.java
--- src/org/eclipse/tm/internal/terminal/textcanvas/StyleMap.java	18 Feb 2009 18:11:09 -0000	1.14
+++ src/org/eclipse/tm/internal/terminal/textcanvas/StyleMap.java	10 Apr 2010 00:16:06 -0000
@@ -29,16 +29,16 @@
 import org.eclipse.tm.terminal.model.StyleColor;
 
 public class StyleMap {
-	private static final String BLACK = "black"; //$NON-NLS-1$
-	private static final String WHITE = "white"; //$NON-NLS-1$
-	private static final String WHITE_FOREGROUND = "white_foreground"; //$NON-NLS-1$
-	private static final String GRAY = "gray"; //$NON-NLS-1$
-	private static final String MAGENTA = "magenta"; //$NON-NLS-1$
-	private static final String CYAN = "cyan"; //$NON-NLS-1$
-	private static final String YELLOW = "yellow"; //$NON-NLS-1$
-	private static final String BLUE = "blue"; //$NON-NLS-1$
-	private static final String GREEN = "green"; //$NON-NLS-1$
-	private static final String RED = "red"; //$NON-NLS-1$
+	protected static final String BLACK = "black"; //$NON-NLS-1$
+	protected static final String WHITE = "white"; //$NON-NLS-1$
+	protected static final String WHITE_FOREGROUND = "white_foreground"; //$NON-NLS-1$
+	protected static final String GRAY = "gray"; //$NON-NLS-1$
+	protected static final String MAGENTA = "magenta"; //$NON-NLS-1$
+	protected static final String CYAN = "cyan"; //$NON-NLS-1$
+	protected static final String YELLOW = "yellow"; //$NON-NLS-1$
+	protected static final String BLUE = "blue"; //$NON-NLS-1$
+	protected static final String GREEN = "green"; //$NON-NLS-1$
+	protected static final String RED = "red"; //$NON-NLS-1$
 	
 	private static final String PREFIX = "org.eclipse.tm.internal."; //$NON-NLS-1$
 	// TODO propagate the name of the font in the FontRegistry
@@ -52,7 +52,7 @@
 	private boolean fInvertColors;
 	private boolean fProportional;
 	private final int[] fOffsets=new int[256];
-	StyleMap() {
+	protected StyleMap() {
 		initColors();
 		fDefaultStyle=Style.getStyle(StyleColor.getStyleColor(BLACK),StyleColor.getStyleColor(WHITE));
 		updateFont();
@@ -123,7 +123,7 @@
 		else
 			return getColor(fColorMapBackground,style.getBackground());
 	}
-	Color getColor(Map map,StyleColor color) {
+	protected Color getColor(Map map,StyleColor color) {
 		Color c=(Color) map.get(color);
 		if(c==null) {
 			c=Display.getCurrent().getSystemColor(SWT.COLOR_GRAY);
Index: src/org/eclipse/tm/internal/terminal/textcanvas/TextLineRenderer.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/textcanvas/TextLineRenderer.java,v
retrieving revision 1.8
diff -u -r1.8 TextLineRenderer.java
--- src/org/eclipse/tm/internal/terminal/textcanvas/TextLineRenderer.java	4 Apr 2008 16:31:43 -0000	1.8
+++ src/org/eclipse/tm/internal/terminal/textcanvas/TextLineRenderer.java	10 Apr 2010 00:16:06 -0000
@@ -27,7 +27,7 @@
  */
 public class TextLineRenderer implements ILinelRenderer {
 	private final ITextCanvasModel fModel;
-	StyleMap fStyleMap=new StyleMap();
+	protected StyleMap fStyleMap=new StyleMap();
 	Color fBackgroundColor;
 	public TextLineRenderer(TextCanvas c, ITextCanvasModel model) {
 		fModel=model;
Index: src/org/eclipse/tm/internal/terminal/textcanvas/GridCanvas.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/textcanvas/GridCanvas.java,v
retrieving revision 1.5
diff -u -r1.5 GridCanvas.java
--- src/org/eclipse/tm/internal/terminal/textcanvas/GridCanvas.java	4 Apr 2008 16:31:43 -0000	1.5
+++ src/org/eclipse/tm/internal/terminal/textcanvas/GridCanvas.java	10 Apr 2010 00:16:06 -0000
@@ -34,7 +34,7 @@
 		addListener(SWT.MouseWheel, new Listener() {
 			public void handleEvent(Event event) {
 				if(getVerticalBar().isVisible()) {
-					int delta=-fCellHeight;
+					int delta=-fCellHeight*5;
 					if(event.count<0)
 						delta=-delta;
 					scrollYDelta(delta);
Index: src/org/eclipse/tm/internal/terminal/control/impl/ITerminalControlForText.java
===================================================================
RCS file: /cvsroot/dsdp/org.eclipse.tm.core/terminal/org.eclipse.tm.terminal/src/org/eclipse/tm/internal/terminal/control/impl/ITerminalControlForText.java,v
retrieving revision 1.7
diff -u -r1.7 ITerminalControlForText.java
--- src/org/eclipse/tm/internal/terminal/control/impl/ITerminalControlForText.java	8 Jun 2008 03:10:21 -0000	1.7
+++ src/org/eclipse/tm/internal/terminal/control/impl/ITerminalControlForText.java	10 Apr 2010 00:16:05 -0000
@@ -27,6 +27,8 @@
 	void setState(TerminalState state);
 	void setTerminalTitle(String title);
 	
+	void setApplicationKeypad(boolean mode);
+	
 	ITerminalConnector getTerminalConnector();
 
 	OutputStream getOutputStream();
