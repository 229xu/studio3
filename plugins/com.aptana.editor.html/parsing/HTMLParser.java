package com.aptana.editor.html.parsing;

import beaver.*;
import com.aptana.editor.html.parsing.ast.*;
import java.util.ArrayList;
import com.aptana.parsing.ast.ParseRootNode;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "HTML.grammar".
 */
public class HTMLParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short STYLE = 1;
		static public final short SCRIPT = 2;
		static public final short START_TAG = 3;
		static public final short SELF_CLOSING = 4;
		static public final short TEXT = 5;
		static public final short END_TAG = 6;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nzKCiEWZ0Gd1PK2YBAHGyUF6lYD$B9ljyw3bW2mUWcipFPcMxQ0bZpWH4oX1WWGXyJE2H" +
		"8ORaXMqwZnYrTfti8lAev1Z0K3AnceHBzweIJatISTgRHJRfMDHlTp6f3Ng2gcP1wdPUjQ4" +
		"6rzBmgEbudLzRSwwcm#9V$iIF$45zLl$FA2yyyyCGTZznponkViZBzWT7Rh63qCYi4diqN8" +
		"iqZiHCxSVm679Gorm==");

	private final Action[] actions;

	public HTMLParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Program = Statements.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final HTMLNode[] p = _list_p == null ? new HTMLNode[0] : (HTMLNode[]) _list_p.toArray(new HTMLNode[_list_p.size()]);
					return new ParseRootNode(HTMLNode.LANGUAGE, p, _symbol_p.getStart(), _symbol_p.getEnd());
				}
			},
			new Action() {	// [1] Statements = Statements Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [2] Statements = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [3] Statement = START_TAG.t Statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final HTMLNode[] s = _list_s == null ? new HTMLNode[0] : (HTMLNode[]) _list_s.toArray(new HTMLNode[_list_s.size()]);
					return new HTMLElementNode(t, s, _symbol_t.getStart(), s[s.length - 1].getEnd());
				}
			},
			new Action() {	// [4] Statement = START_TAG.t Statements.s END_TAG.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final HTMLNode[] s = _list_s == null ? new HTMLNode[0] : (HTMLNode[]) _list_s.toArray(new HTMLNode[_list_s.size()]);
					final Symbol _symbol_e = _symbols[offset + 3];
					final String e = (String) _symbol_e.value;
					return new HTMLElementNode(t, s, _symbol_t.getStart(), _symbol_e.getEnd());
				}
			},
			new Action() {	// [5] Statement = START_TAG.t END_TAG.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final String e = (String) _symbol_e.value;
					return new HTMLElementNode(t, _symbol_t.getStart(), _symbol_e.getEnd());
				}
			},
			new Action() {	// [6] Statement = SELF_CLOSING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					return new HTMLElementNode(s, _symbol_s.getStart(), _symbol_s.getEnd());
				}
			},
			new Action() {	// [7] Statement = TEXT.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					return new HTMLElementNode("", _symbol_t.getStart(), _symbol_t.getEnd());
				}
			},
			new Action() {	// [8] Statement = CSSBlock.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 1];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final String[] b = _list_b == null ? new String[0] : (String[]) _list_b.toArray(new String[_list_b.size()]);
					
			IParseNode[] nested = new IParseNode[0];
			try {
				String text = fScanner.getSource().get(_symbol_b.getStart(), _symbol_b.getEnd() - _symbol_b.getStart() + 1);
				IParseNode node = CSSParserFactory.getInstance().getParser().parse(text);
				addOffset(node, _symbol_b.getStart());
				nested = new IParseNode[] { node };
			} catch (java.lang.Exception e) {
			}
			return new HTMLSpecialNode(HTMLSpecialNode.CSS, nested, _symbol_b.getStart(), _symbol_b.getEnd());
				}
			},
			new Action() {	// [9] Statement = JSBlock.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 1];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final String[] b = _list_b == null ? new String[0] : (String[]) _list_b.toArray(new String[_list_b.size()]);
					
			IParseNode[] nested = new IParseNode[0];
			try {
				String text = fScanner.getSource().get(_symbol_b.getStart(), _symbol_b.getEnd() - _symbol_b.getStart() + 1);
				IParseNode node = JSParserFactory.getInstance().getParser().parse(text);
				addOffset(node, _symbol_b.getStart());
				nested = new IParseNode[] { node };
			} catch (java.lang.Exception e) {
			}
			return new HTMLSpecialNode(HTMLSpecialNode.JS, nested, _symbol_b.getStart(), _symbol_b.getEnd());
				}
			},
			new Action() {	// [10] Statement = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new HTMLNode(HTMLNodeTypes.ERROR, e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [11] CSSBlock = CSSBlock STYLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [12] CSSBlock = STYLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [13] JSBlock = JSBlock SCRIPT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [14] JSBlock = SCRIPT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
